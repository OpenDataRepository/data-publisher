{% spaceless %}

{% set datatype = datatype_array[initial_datatype_id] %}

{% if record_display_view == "single" %}
<h1 class="no-margin-top-phone">
    <span>Search Result &raquo; {{ datatype.dataTypeMeta.shortName }}</span>
    <a id="page_settings" name="page_settings"><i class="fa fa-md fa-fw fa-cog"></i></a>
</h1>
{# Record View Menu #}
    <div id="page_settings_menu" class="pure-menu pure-menu-horizontal" style="display:none;">
        <ul class="pure-menu-list">
            <li class="pure-menu-item">
                <a name="ChooseView" id="ChooseView" class="pure-menu-link">Choose View</a>
            </li>
        </ul>
    </div>



{# End Record View Menu #}
{% endif %}

{% include 'ODRAdminBundle:Display:display_area.html.twig' with {
    'datatype_array': datatype_array,
    'datarecord_array': datarecord_array,
    'theme_id': theme_id,

    'initial_datatype_id': initial_datatype_id,
    'initial_datarecord_id': initial_datarecord_id,

    'is_top_level': is_top_level,
} %}

{% if record_display_view == "single" %}
    {%  include 'ODRAdminBundle:Default:file_download_dialog.html.twig' %}
{% endif %}

{% if record_display_view == "single" %}
<script>

    var record_datatype_id = {{ datatype.id }};
    var record_theme_id = {{ theme_id }};
    function initPage() {

        // TODO What is this for?
        // Resize all elements dependent on window size
        $(window).unbind('resize').resize(function() {
            // WindowResizeInterval variable defined in common.js
            // WindowResizeInterval = window.clearInterval(WindowResizeInterval);
            // WindowResizeInterval = window.setInterval("onWindowResize()", 500);
        });

        // Resize everything prior to divs being hidden
        // onWindowResize();

        // Set up image galleries
        setupImageGalleries();

        // Hide divs for accordion purposes
        setupAccordions();

        // Setup Theme System
        setupThemeSystem();

        // Setup File Downloader
        setupFileDownloader();

        $("#page_settings").click(function(event) {
            $("#page_settings_menu").toggle('fast');
        });
    }

    function setupFileDownloader() {

        $(".ODRFileDownloadProgress").hide();

        $("a.ODRFileDownload").click(function(event) {
            // Grab necessary attributes
            var file_id = $(this).attr('rel');
            var href = $(this).attr('href');

            // Prevent the click handler for <tr> elements from firing if a file
            // download href is clicked
            var short_form = false;
            var can_cancel = false;
            // defined in Default::file_handling.html.twig
            handleFileDownload(event, file_id, href, short_form, can_cancel);
        });

        $(".ODRDownloadAllFiles").click(function() {

            if ( $(this).hasClass('fa-muted') )
                return;

            // Grab necessary attributes
            var element = $(this);

            var id_data = $(this).closest(".ODRDataField").first().attr('id').split(/_/);
            var datarecord_id = id_data[1];
            var datafield_id = id_data[2];

            // defined in ODRAdminBundle:Default:file_download_dialog.html.twig
            openFileDownloadDialog({{ initial_datarecord_id }}, datarecord_id, datafield_id);
        });
    }

    function applyView(theme_id, redirect, session) {
        if(redirect === undefined) {
            redirect = true;
        }
        if(session === undefined) {
            session = 1;
        }

        var url = '{{ path('odr_apply_theme', { 'datatype_id': datatype.id, 'theme_id': 0, 'session': 0   }) }}';
        url = url.substr(0, (url.length - 3)) + theme_id + "/" + session;

        // set view
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                if(redirect) {
                    var inst = $('[data-remodal-id=ODRRemodal]').remodal();
                    inst.close();

                    // Reload the window
                    url = window.location.hash.substr(1);
                    LoadContentFullAjax( url );
                }
                // Without redirect, this just sets the view preference
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // TODO figure out why this is firing early...
                // Probably need a promise
                // Don't need to create a jGrowl because exception
                // handlers will automatically display. Close the dialog
                // so it's not in some half-initialized state.
                var inst = $('[data-remodal-id=ODRRemodal]').remodal();
                inst.close();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    function setModalMessage(message, message_type) {
        if(message_type === undefined) {
            $(".ODRRemodalBody").html(
                '<h4>' + message + '<h4>'
            );
        }
        else if (message_type == "raw") {
            $(".ODRRemodalBody").html( message );
        }
        resetRemodalInnerHeight()
    }

    function modifyView(event) {
        var inst = $('[data-remodal-id=ODRRemodal]').remodal();
        inst.close();
        window.location.hash = '{{ path('odr_modify_theme', { 'datatype_id': datatype.id, 'theme_id': theme_id }) }}';
    }

    function openModifyThemeEditor(theme_id) {
        // Close the modal
        var inst = $('[data-remodal-id=ODRRemodal]').remodal();
        inst.close();

        var url = '{{ path('odr_modify_theme', { 'datatype_id': datatype.id, 'theme_id': 0 }) }}';
        url = url.substr(0,(url.length - 1)) + theme_id;
        // Hash change event will load theme
        window.location.hash = url
    }

    function checkCopyProgress(tracked_job_id, ) {
        console.log('check: ' + tracked_job_id);

        // Check if job complete
        var url = '{{ path('odr_check_clone_theme', { 'tracked_job_id': 0 }) }}';
        url = url.substr(0, (url.length - 1)) + tracked_job_id;
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                if(data.d.completed !== null) {
                    $(".ODRCopyViewProgress").html(Math.floor(data.d.current/data.d.total * 100) + '%');
                    // show complete

                    // Set copied theme preferred view for session
                    applyView(data.d.additional_data.theme_id, 0, 1);

                    // Hash change event will load theme
                    // TODO This should probably be a callback.
                    openModifyThemeEditor(data.d.additional_data.theme_id);

                }
                else {
                    $(".ODRCopyViewProgress").html(Math.floor(data.d.current/data.d.total * 100) + '%');

                    // TODO This needs to be a cancelable interval
                    setTimeout("checkCopyProgress(" + tracked_job_id + ")", 1000);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // TODO figure out why this is firing early...
                // Probably need a promise
                // Don't need to create a jGrowl because exception
                // handlers will automatically display. Close the dialog
                // so it's not in some half-initialized state.
                var inst = $('[data-remodal-id=ODRRemodal]').remodal();
                inst.close();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });

        // Redirect to view editor if complete
    }

    function copyAndModifyView(theme_id) {
        console.log('copy and modify: {{ theme_id }}');
        var url = '{{ path('odr_clone_theme', { 'datatype_id': datatype.id, 'theme_id': 0 }) }}';
        url = url.substr(0, (url.length - 1)) + theme_id;
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                $(".ODRRemodalBody").html( '<div class="pure-u-1"><h4>Copying View</h4><div class="pure-u-1 ODRCopyViewProgress loading-text">' +
                    Math.floor(data.d.current/data.d.total * 100) + '%</div></div>');

                // Call Checker
                checkCopyProgress(data.d.id)
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // TODO figure out why this is firing early...
                // Probably need a promise
                // Don't need to create a jGrowl because exception
                // handlers will automatically display. Close the dialog
                // so it's not in some half-initialized state.
                var inst = $('[data-remodal-id=ODRRemodal]').remodal();
                inst.close();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    function setupThemeSystem() {
        // Init the choose view button
        $("#ChooseView").click(function(event) {
            chooseView();
        });
    }

    /**
     * If owner, option to customize existing view will be presented along
     * with the option to copy the view and then customize.
     *
     * If not owner, message will say that the view will be copied first.
     *
     */
    function customizeView() {
        modal_options = {
            title: "Customization Options",
            // body: "<div>Loading will not display if body is set.</div>",
            // loading: true,  // Force loading to display
            buttons: [
                {
                    id: 'ODRButtonCustomizeView',
                    text: 'Modify',
                    // secondary: true, // Secondary button style
                    // disabled: true, // Set button style disabled
                    title: 'Click to modify the slected view..',
                    click: modifyView
                },
                {
                    id: 'ODButtonCopyModifyView',
                    text: 'Copy and Modify',
                    // secondary: true, // Secondary button style
                    // disabled: true, // Set button style disabled
                    title: 'Click to copy and modify the selected view..',
                    click: copyAndModifyView
                }
            ]
        };
        openODRRemodal(modal_options);
        var url = '{{ path('odr_customize_view_dialog', { 'datatype_id': datatype.id, 'theme_id': theme_id }) }}';
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                $(".ODRRemodalBody").html( data.d );
                $(".ODRRemodalLoading").fadeOut('150', function() {
                    $(".ODRRemodalBody").show();
                    $(".ODRRemodalButtons").show();
                    resetRemodalInnerHeight()
                });
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // TODO figure out why this is firing early...
                // Probably need a promise
                // Don't need to create a jGrowl because exception
                // handlers will automatically display. Close the dialog
                // so it's not in some half-initialized state.
                var inst = $('[data-remodal-id=ODRRemodal]').remodal();
                inst.close();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    function initChooseViewButtons() {
        $(".ODRDeleteTheme").click(function() {
            // Show loading with "Deleting" text
            setODRRemodalLoadingText("deleting");
            $(".ODRRemodalBody").show();
            $(".ODRRemodalLoading").show();
            resetRemodalInnerHeight();

            var theme_id = $(this).parent().parent().parent().attr('data-theme-id');
            console.log('Deleting personal default theme: ' + theme_id);
            deleteView(theme_id);
        });
        $(".ODRDefaultPersonal").click(function() {
            setModalMessage("Setting view as personal default.");
            var theme_id = $(this).parent().parent().parent().attr('data-theme-id');
            console.log('Apply personal default theme: ' + theme_id);
            applyView(theme_id, 1, 0);
        });
        $(".ODRMakeCurrentView").click(function() {
            setModalMessage("Setting view for session.");
            var theme_id = $(this).parent().parent().parent().attr('data-theme-id');
            console.log('Apply theme: ' + theme_id);
            applyView(theme_id, 1, 1);
        });
        $(".ODRCopyModifyTheme").click(function() {
            var theme_id = $(this).parent().parent().parent().attr('data-theme-id');
            console.log('Apply theme: ' + theme_id);
            copyAndModifyView(theme_id);
        });
        $(".ODRModifyTheme").click(function() {
            var theme_id = $(this).parent().parent().parent().attr('data-theme-id');
            console.log('Apply theme: ' + theme_id);
            openModifyThemeEditor(theme_id);
        });
        // .ODRMakeViewPublic,
        // .ODRDefaultDatabase,
        // .ODREditThemeName,
    }

    function chooseView() {
        modal_options = {
            title: "Choose from available views:",
            // body: "<div>Loading will not display if body is set.</div>",
            // loading: true,  // Force loading to display
            buttons: [
                {
                    id: 'ODRApplyView',
                    text: 'Apply View',
                    // secondary: true, // Secondary button style
                    disabled: true, // Set button style disabled
                    title: 'Click to apply the selected view..',
                    click: applyView
                }
            ]
        };
        openODRRemodal(modal_options);
        var url = '{{ path('odr_get_available_themes', { 'datatype_id': datatype.id}) }}';
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                $(".ODRRemodalBody").html( data.d );
                $(".ODRRemodalLoading").fadeOut('150', function() {
                    $(".ODRRemodalBody").show();
                    $(".ODRRemodalButtons").show();
                    resetRemodalInnerHeight();
                    initChooseViewButtons();
                });

                // Check theme count
                // Check if current theme is selected
                // Offer to delete if user-owned and not default
                // Indicate user owned
                // Indicate system owned
                // Offer create new theme if no options

            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception
                // handlers will automatically display. Close the dialog
                // so it's not in some half-initialized state.
                var inst = $('[data-remodal-id=ODRRemodal]').remodal();
                inst.close();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    function deleteView(theme_id) {
        var url = '{{ path('odr_delete_custom_theme', { 'datatype_id': datatype.id, 'theme_id': 0}) }}';
        url = url.substr(0, (url.length - 1)) + theme_id;
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                resetODRRemodalLoadingText();
                $(".ODRRemodalLoading").hide();

                var inst = $('[data-remodal-id=ODRRemodal]').remodal();
                inst.close();

                // Reload the window
                url = window.location.hash.substr(1);
                LoadContentFullAjax( url );
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception
                // handlers will automatically display. Close the dialog
                // so it's not in some half-initialized state.
                var inst = $('[data-remodal-id=ODRRemodal]').remodal();
                inst.close();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });

    }

    function ReloadDatafield(datarecord_id, datafield_id) {

        var datafield_div = $("#Field_" + datarecord_id + "_" + datafield_id);
        var theme_id = $(datafield_div).attr('rel');

        var url = '{{ path('odr_display_reload_datafield', { 'datarecord_id': 0, 'datafield_id': 0, 'theme_id': 0 }) }}';
        url = url.substring(0, (url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + theme_id;

        $(datafield_div).children('form').each(function () {
            $(this).fadeOut();
            $(this).remove();
        });

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                if (data.r == 0) {
                    $(datafield_div).append(data.d.html);
                    initPage();
                }
                else {
                    alert(data.d);
                }
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    $(function() {
        initPage();
        $(".MenuDesignArea").remove();
        window.scrollTo(0,0);
    });
{% endif %}

</script>
{% endspaceless %}
