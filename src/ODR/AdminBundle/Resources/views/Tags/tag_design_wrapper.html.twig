{% spaceless %}

{% set disable_controls = false %}
{% if out_of_sync or (is_derived_field and not can_modify_template) %}
    {% set disable_controls = true %}
{% endif %}

{% set datafield_meta = datafield.dataFieldMeta %}
{% set allow_multiple_levels = datafield_meta.tags_allow_multiple_levels %}
{% set sort_by_name = datafield_meta.radio_option_name_sort %}

<div id="ODRTagEditDialogWrapper">
    <div id="odr_tag_design_modal">
        <div class="ODRThemeElement">
            <button class="ODRAddTag pure-button pure-button-primary{% if disable_controls %} pure-button-disabled{% endif %}">Create single tag</button>
            <button class="ODRTagCreationMode pure-button{% if disable_controls %} pure-button-disabled{% endif %}">Import tags</button>
        </div>

        <input type="hidden" id="tag_order_hash" value="" />

        <div id="odr_tag_design" class="ODRTagWrapper_design pure-form">
            {# this form is for tag displayOrder and setting parent/child relationships #}
            <form id="ODRTagPositionForm" rel="{{ datafield.id }}"></form>

            <div class="ODRThemeElement">
            {% if disable_controls and not can_modify_template %}
                <div class="ODRTagMoveHelpDiv">
                    This modal is in read-only mode because you do not have permissions to modify the template field.
                </div>
            {% elseif disable_controls and out_of_sync %}
                <div class="ODRTagMoveHelpDiv">
                    This modal is in read-only mode because this field and the template field are out of sync.
                </div>
            {% else %}
                <div class="ODRTagMoveHelpDiv">
                    To save changes to a tag's name, click on blank space inside the dialog box.  Press the escape key to close without saving.
                </div>
            {% endif %}

            {% if disable_controls %}
                {# do nothing #}
            {% else %}
                <div class="ODRTagMoveHelpDiv">
                    To begin moving a tag, click on the <i class="fa {% if allow_multiple_levels %}fa-arrows{% else %}fa-arrows-v{% endif %} Cursor"></i> icon.  The currently selected tag is highlighted in green.<br>
                    The up/down arrow keys will change the order of the tag{% if sort_by_name %}, but the tags will be re-sorted to be in alphabetical order when the dialog is closed{% endif %}.<br>
                    {% if allow_multiple_levels %}The right arrow key will change the selected tag to be a child of the tag above it, while the left arrow key does the opposite.{% endif %}<br>
                    When finished moving, click somewhere else in the box to save any changes, or press escape to close without saving.
                </div>
            {% endif %}
            </div>

            <div class="ODRThemeElement" style="margin-top: 15px;">
                {# this form is for renaming tags #}
                <form id="ODRTagForm" rel="{{ datafield.id }}">
                    {% include 'ODRAdminBundle:Tags:tag_wrapper.html.twig' with {
                        'datafield' : datafield,
                        'stacked_tags': stacked_tags,

                        'disable_controls': disable_controls,
                    } %}
                </form>
            </div>
        </div>

        <div id="odr_tag_import" class="pure-form ODRHidden">
            <div class="pure-u-1-2 ODRTagWrapper_design">
                <form id="ODRTagListForm" class="pure-form" rel="{{ datafield.id }}" style="padding-left: 20px;">
                    <input type="hidden" id="datafield_{{ datafield.id }}_name_sort" value="{% if sort_by_name %}1{% else %}0{% endif %}" />
                    {% if allow_multiple_levels %}
                    <fieldset style="margin-bottom: 10px;">
                        <label for="tag_hierarchy_delimiter" class="ODRFieldLabel">
                            Tag Hierarchy delimiter:&nbsp;
                        </label>
                        <input type="text" name="tag_hierarchy_delimiter" id="tag_hierarchy_delimiter" class="ODRDelimiterField" maxlength="3" size="4" />
                        &nbsp;
                        <span class="ODRInputError ODRAlwaysShow ODRTagHierarchyWarnWrapper"><i class="fa fa-warning"></i><span id="tag_hierarchy_delimiter_warn">Needs a value</span></span>
                    </fieldset>
                    {% else %}
                    <fieldset style="margin-bottom: 10px;">
                        <span class="ODRInputError ODRAlwaysShow ODRTagHierarchyWarnWrapper"><i class="fa fa-warning"></i><span id="tag_hierarchy_delimiter_warn">This field only allows a single level of tags</span></span>
                    </fieldset>
                    {% endif %}
                    <fieldset>
                        <table class="ODRTagListImport pure-table pure-table-striped pure-u-1">
                            <thead>
                                <tr>
                                    <th>Tags (one per line)</th>
                                </tr>
                            </thead>
                            <tbody class="ODRSortableOption pure-u-1" rel="{{ datafield.id }}">
                                <tr class="pure-u-1">
                                    <td class="pure-u-1">
                                        <textarea id="tag_list" class="pure-u-1" name="tag_list"></textarea>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </fieldset>
                </form>
            </div>
            <div class="pure-u-1-2 ODRTagWrapper_import">
            </div>
        </div>
    </div>
</div>

<script>
    var SaveTimeout = 2000;
    $(function () {
{% if not disable_controls and (not sort_by_name or allow_multiple_levels) %}
        {# Going to need tag movement in some capacity #}
        $("#odr_tag_design_modal").unbind('click').click(function() {
            clearTagHighlights();
        });

        // This needs to be before the other keyup handlers...
        $("#ODRRemodal").unbind('keyup').keyup(function(event) {
            // If not re-ordering tags, continue as usual
            if ( !reordering_tags )
                return;

        {% if allow_multiple_levels %}
            // Ignore all key presses other than arrow keys
            if ( event.which < 37 || event.which > 40)
                return;
        {% else %}
            // Changing depth in the tree makes no sense, so only respond to the up/down arrow keys
            if ( event.which !== 38 && event.which !== 40 )
                return;
        {% endif %}

            // Locate the highlighted tag
            var tag_item = $(".ODRTagHighlight");
            handleTagMovement( $(tag_item), event.which );
        });
{% endif %}

{% if not disable_controls %}
        $(".ODRTagCreationMode").unbind('click').click(function(event) {
            if ( $(this).hasClass('pure-button-disabled') )
                return;

            // Don't want #odr_tag_design_modal click event to fire
            event.stopPropagation();
            clearTagHighlights();

            if ( $("#odr_tag_import").hasClass('ODRHidden') ) {
                $("#odr_tag_design").addClass('ODRHidden');
                $("#odr_tag_import").removeClass('ODRHidden');

                $(".ODRTagCreationMode").html("Stop importing tags");
                $(".ODRAddTag").html("Validate tag list");
            }
            else {
                $("#odr_tag_design").removeClass('ODRHidden');
                $("#odr_tag_import").addClass('ODRHidden');

                $("#tag_hierarchy_delimiter").val('');
                $("#ODRTagListForm").find('textarea').each(function() {
                    $(this).val('');
                });
                $(".ODRTagWrapper_import").html('');

                $(".ODRTagCreationMode").html("Import tags");
                $(".ODRAddTag").html("Create single tag");
            }

            resetRemodalInnerHeight();
        });

        $(".ODRDelimiterField").unbind('keyup paste').on('keyup paste', function() {
            var tag_hierarchy_delimiter_value = $("#tag_hierarchy_delimiter").val().trim();

            if ( tag_hierarchy_delimiter_value === '' )
                $(".ODRTagHierarchyWarnWrapper").removeClass('ODRHidden');
            else
                $(".ODRTagHierarchyWarnWrapper").addClass('ODRHidden');
        });

        $("#tag_list").unbind('keyup paste').on('keyup paste', function() {
            $(".ODRTagWrapper_import").html('');
        });

        // Override each of the three ways to close this tag remodal so they go through ODR's javascript
        //  instead of the remodal.js source file
        $("button.remodal-close").removeAttr('onclick').on('click', function() {
            closeODRTagRemodal();
        });
        $(document).off('keydown.remodal').on('keydown.remodal', function(e) {
            var inst = $('[data-remodal-id=ODRRemodal]').remodal();
            var state = inst.getState();

            if (inst /*&& current.settings.closeOnEscape*/ && state === 'opened' && e.keyCode === 27) {
                closeODRTagRemodal();
            }
        });
        $("div.remodal-wrapper").off('click.remodal').on('click.remodal', function(e) {
            if ( $(e.target).hasClass('remodal-wrapper') )
                closeODRTagRemodal();
        });

        // Only want to run this if the user can actually make changes
        initTags();
{% endif %}

        // Probably should locate/warn about duplicate tags regardless
        FindDuplicateTagNames();

        // Also want tag tree collapsing/expanding
        setupTagTree($("#ODRTagForm"));

        // Need to set #ODRTagForm to have a max-height, but have to wait for resetRemodalInnerHeight()
        //  to finish first...
        setTimeout("resizeTagForm()", 400);
    });

    /**
     * Resizes the tag form so the modal scrollbars can be disabled without impacting functionality
     */
    function resizeTagForm() {
        var remodal_height = $(".ODRRemodalInner").height();
        var buttons_height = $("#odr_tag_design_modal").children(".ODRThemeElement").first().height();
        var blurbs_height = $("#odr_tag_design").children(".ODRThemeElement").first().height();

        var tag_form_height = remodal_height - buttons_height - blurbs_height - 75;
        // console.log(remodal_height, buttons_height, blurbs_height, tag_form_height);

        $("#ODRTagForm").css('max-height', tag_form_height + 'px').css('height', tag_form_height + 'px');
        $("#ODRRemodal").find('.ODRRemodalInner').css('overflow', 'hidden');
    }

    /**
     * Locates and highlights tags in the modal that do not have unique names.
     */
    function FindDuplicateTagNames() {
        $(".ODRInputError").not(".ODRAlwaysShow").addClass('ODRHidden');
        var has_duplicates = false;

        $("#odr_tag_design_modal").find(".ODRTagGroup").each(function() {
            var tag_names = {};

            $(this).children('.ODRTagItem').children('.ODRTagUnit').children('.ODRTagLabel').each(function(index, elem) {
                var name = $(elem).val();
                if ( tag_names[name] === undefined  ) {
                    // New tag name for this sibling group
                    tag_names[name] = $(elem);
                }
                else {
                    // Duplicate tag name, show warnings for both of them
                    has_duplicates = true;

                    var prev_elem = tag_names[name];
                    $(prev_elem).next().removeClass('ODRHidden');
                    $(elem).next().removeClass('ODRHidden');
                }
            });
        });

        {% if not disable_controls %}
        if (has_duplicates)
            $(".ODRTagCreationMode").addClass('pure-button-disabled').html('Fix duplicates to import');
        else
            $(".ODRTagCreationMode").removeClass('pure-button-disabled').html('Import tags');
        {% endif %}
    }

{% if not disable_controls %}
    /**
     * Most of the actions this modal permits end up requiring a reload of the underlying tag
     * datafield...rather than reload after every single change, it makes more sense to only reload
     * once when the modal is closing.
     */
    function closeODRTagRemodal() {
        // Trigger a reload of the tag datafield and close the remodal
        ReloadTagDatafield({{ datafield.id }});
        closeODRRemodal();

        // Because all of ODR shares the same remodal instance, the earlier overrides to closing it
        //  need to be restored back to what they were...but this has to be done "manually".  Sigh.
        $("button.remodal-close").attr('onclick', "closeODRRemodal()").off('click');
        $(document).off('keydown.remodal').on('keydown.remodal', function(e) {
            var inst = $('[data-remodal-id=ODRRemodal]').remodal();
            var state = inst.getState();

            if (inst /*&& current.settings.closeOnEscape*/ && state === 'opened' && e.keyCode === 27) {
                inst.close();
            }
        });
        $("div.remodal-wrapper").off('click.remodal').on('click.remodal', function(e) {
            if ( $(e.target).hasClass('remodal-wrapper') ) {
                var inst = $('[data-remodal-id=ODRRemodal]').remodal();
                inst.close();
            }
        });

        // Same deal for the temporary CSS overrides
        $("#ODRRemodal").find('.ODRRemodalInner').css('overflow', '');
    }

    /**
     * Initializes the tag modal.
     */
    function initTags() {
        // Save the current tag order for later use
        var current_tag_order = getTagOrderHash();
        $("#tag_order_hash").val(current_tag_order);

        $(".ODRTagAnchor").unbind('click').click(function(event) {
            // Don't want #odr_tag_design_modal click event to fire
            event.stopPropagation();
            clearTagHighlights();
            reordering_tags = true;

            var tag_parent = $(this).parent().parent();
            $(tag_parent).addClass('ODRTagHighlight');

            // When not sorting by name, the highlighted tag's neighbors are its siblings
            // e.g. adjacent to the highlighted tag with the same parent
            if ($(tag_parent).prev().length > 0)
                $(tag_parent).prev().children('.ODRTagUnit').addClass('ODRNeighborTag');
            if ($(tag_parent).next().length > 0)
                $(tag_parent).next().children('.ODRTagUnit').addClass('ODRNeighborTag');
        });

        $(".ODRAddTag").unbind('click').click(function(event) {
            // Don't want #odr_tag_design_modal click event to fire
            event.stopPropagation();
            clearTagHighlights();

            if ( $("#odr_tag_import").hasClass('ODRHidden') )
                AddTag({{ datafield.id }});
            else
                ValidateTags({{ datafield.id }});
        });

        $(".ODRDeleteTag").unbind('click').click(function(event) {
            // Don't want #odr_tag_design_modal click event to fire
            event.stopPropagation();
            clearTagHighlights();

            var tag_id = $(this).attr('rel');
            DeleteTag(tag_id);
        });

        $(".ODRTagLabel").unbind('click').click(function(event) {
            // Don't want #odr_tag_design_modal click event to fire
            event.stopPropagation();
            clearTagHighlights();
        });

        $(".ODRTagLabel").unbind('keyup paste').on('keyup paste', function() {
            var tag_data = $(this).attr('id').split(/_/);
            var tag_id = tag_data[1];

            // Only want to execute the save function once
            clearTimeout(SaveTagPropertyInterval[tag_id]);
            SaveTagPropertyInterval[tag_id] = setTimeout("SaveTagProperty(" + tag_id + ")", SaveTimeout);

            FindDuplicateTagNames();
        });
    }

    var reordering_tags = false;

    /**
     * clearTagHighlights() is called a lot as the user clicks around the tag form, but don't want
     * it to keep calling SaveTagPosition() (and therefore repeatedly reloading chunks of the page)
     * when nothing has actually changed...
     *
     * @returns {string}
     */
    function getTagOrderHash() {
        var str = '';
        $("#ODRTagForm").find(".ODRTagItem").each(function() {
            // Need to know both the tag's id and how deep it is
            var tag_id = $(this).attr('rel');
            var tag_level = $(this).parents(".ODRTagItem").length;

            if (str === '')
                str = tag_level + ":" + tag_id;
            else
                str += ',' + tag_level + ":" + tag_id;
        });

        return $.md5(str);
    }

    /**
     * Removes the border highlights around tags in the modal so users can tell where a tag is
     * going to get moved to.
     */
    function clearTagHighlights() {

        var prev_tag_order = $("#tag_order_hash").val();
        var current_tag_order = getTagOrderHash();

        reordering_tags = false;
        $(".ODRTagHighlight").each(function() {
            $(this).removeClass('ODRTagHighlight');

            // Only save tag positions when the order has changed
            if (prev_tag_order !== current_tag_order) {
                prev_tag_order = current_tag_order;
                $("#tag_order_hash").val(current_tag_order);

                SaveTagPosition( $(this) );
            }
        });
        $(".ODRNeighborTag").each(function() {
            $(this).removeClass('ODRNeighborTag');
        });
    }

    {% if not sort_by_name or allow_multiple_levels %}
    /**
     * Moves a tag element around the tag modal based on which key the user pushed.
     *
     * If the tags aren't allowed to have parents/children, then this function will only be called
     * when the user presses the up/down arrows.
     *
     * @param {HTMLElement} tag_item
     * @param {number} which
     */
    function handleTagMovement(tag_item, which) {
        var parent_tag_group = $(tag_item).parent();
        var prev_tag = $(tag_item).prev();
        var next_tag = $(tag_item).next();

        if (which === 37) {    // left arrow
            if ( $(parent_tag_group).hasClass('ODRTopLevelTagGroup') ) {
                // If already a top-level tag, do nothing
                return;
            }
            else {
                // Otherwise, move this tag and its children to be after its parent tag
                $(tag_item).insertAfter( $(parent_tag_group).parent() );

                // If the original parent tag group no longer has any children, get rid of it
                if ( $(parent_tag_group).children().length === 0 ) {
                    // Since the tag no longer has any children, it no longer needs to collapse/expand
                    var tag_spacer = $(parent_tag_group).parent().children('.ODRTagUnit').children('.ODRTagSpacer');
                    $(tag_spacer).removeClass('ODRTagParent').html('');

                    $(parent_tag_group).remove();
                }
            }
        }
        else if (which === 38) {    // up arrow
            if ( $(prev_tag).length === 0 && $(parent_tag_group).hasClass('ODRTopLevelTagGroup') ) {
                // If already at top of the list, do nothing
                return;
            }
            else {
                // Otherwise, move the highlighted tag to be after the next tag
                $(tag_item).insertBefore( $(prev_tag) );
            }
        }
        else if (which === 39) {    // right arrow
            if ( $(prev_tag).length === 0 && $(next_tag).length === 0 ) {
                // If no neighbor tags, do nothing
                return;
            }
            else if ( $(prev_tag).length > 0 ) {
                // Make the tag being moved a child of the previous tag
                var tag_spacer = $(prev_tag).children('.ODRTagUnit').children('.ODRTagSpacer');

                if ( $(prev_tag).children('ul.ODRTagGroup').length === 0 ) {
                    // Previous tag has no children, make an empty container
                    var new_parent_group = $( $.parseHTML('<ul class="ODRTagGroup"></ul>') );
                    $(new_parent_group).appendTo( $(prev_tag) );

                    // Move the highlighted tag into the previous tag's children
                    $(tag_item).appendTo( $(new_parent_group) );

                    // Need to make this tag able to collapse/expand...
                    $(tag_spacer).addClass('ODRTagParent').append( $.parseHTML('<i class="fa fa-caret-down Pointer"></i>') );

                    // ...which means it also needs the event handlers
                    setupTagTree( $("#ODRTagForm") );
                    {# TODO - modify setupTagTree() to use event bubbling instead? #}
                }
                else {
                    // If the previous tag is collapsed, then expand it prior to moving the
                    //  highlighted tag into the previous tag's children
                    if ( $(tag_spacer).hasClass('ODRTagCollapsed') )
                        $(tag_spacer).trigger('click');

                    // Move the highlighted tag into the previous tag's children
                    var new_parent_group = $(prev_tag).children('ul.ODRTagGroup').first();
                    $(tag_item).appendTo( $(new_parent_group) );
                }
            }
            // else {
            //     // Otherwise, make it a child of the next tag
            //     if ( $(next_tag).children('ul.ODRTagGroup').length === 0 ) {
            //         // Previous tag has no children, make an empty container
            //         var new_parent_group = $( $.parseHTML('<ul class="ODRTagGroup"></ul>') );
            //         $(new_parent_group).appendTo( $(next_tag) );
            //
            //         // Move the highlighted tag into the previous tag's children
            //         $(tag_item).appendTo( $(new_parent_group) );
            //     }
            //     else {
            //         // Move the highlighted tag into the previous tag's children
            //         var new_parent_group = $(next_tag).children('ul.ODRTagGroup').first();
            //         $(tag_item).appendTo( $(new_parent_group) );
            //     }
            // }
        }
        else if (which === 40) {    // down arrow
            if ( $(next_tag).length === 0 && $(parent_tag_group).hasClass('ODRTopLevelTagGroup') ) {
                // If already at bottom of the list, do nothing
                return;
            }
            else {
                // Otherwise, move the highlighted tag to be before the previous tag
                $(tag_item).insertAfter( $(next_tag) );
            }
        }

        // Update the neighbor tag indicators
        $(".ODRNeighborTag").each(function() {
            $(this).removeClass('ODRNeighborTag');
        });
        if ( $(tag_item).prev().length > 0 )
            $(tag_item).prev().children('.ODRTagUnit').addClass('ODRNeighborTag');
        if ( $(tag_item).next().length > 0 )
            $(tag_item).next().children('.ODRTagUnit').addClass('ODRNeighborTag');

        ensureTagVisibility( $(tag_item) );
    }
    {% endif %}

    var SaveTagPropertyInterval = [];

    /**
     * Saves changes to a tag's name.
     *
     * @param {number} tag_id
     */
    function SaveTagProperty(tag_id) {
        // Clear the save timeout for this specific tag
        clearTimeout(SaveTagPropertyInterval[tag_id]);

        // Placing this after window.clearInterval() to avoid pointless double save + double reload
        var tag_name = $("#ODRTag_" + tag_id + "_name").val().trim();
        var old_tag_name = $("#ODRTag_" + tag_id + "_name").data('old-value');

        // Silently ignore attempts to save unchanged values
        if ( old_tag_name === tag_name )
            return;

        // Silently revert attempts to save blank tags
        if (tag_name === '') {
            $("#ODRTag_" + tag_id + "_name").val(old_tag_name);
            return;
        }


        var url = '{{ path('odr_rename_tag', { 'tag_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += tag_id;

        // alert(url);  return;

        var post_data = $("#ODRTagForm").find("#ODRTag_" + tag_id + "_name").serialize();    // only want one tag

        showODRRemodalLoading();

        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data) {
                hideODRRemodalLoading();

                if ( data.d.reload_modal ) {
                    // ...also reload the list of radio options
                    updateODRRemodalBody('', 'full');
                    loadTagEditDialogContents(data.d.datafield_id, tag_id);
                }
                else {
                    // Replace the previous "old-value" with the one that just got saved
                    $("#ODRTag_" + tag_id + "_name").data('old-value', tag_name);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Revert back to the old value on an error
                $("#ODRTag_" + tag_id + "_name").val(old_tag_name);
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Sends a list of tags in the modal to the server for validation purposes.
     *
     * @param {number} datafield_id
     */
    function ValidateTags(datafield_id) {
        if ( $("#tag_list").val() === '' ) {
            alert('no tags given');
            return;
        }
        if ( $("#tag_hierarchy_delimiter").val() === '' ) {
            alert('empty tag delimiter');
            return;
        }

        var url = '{{ path('odr_validate_tag_list', { 'datafield_id': 0 }) }}';
        // Load display template menu
        url = url.substring(0,(url.length - 1));
        url += datafield_id;

        var form_data = $("#ODRTagListForm").serialize();

        $.ajax({
            cache: false,
            type: 'POST',
            url: url,
            dataType: "json",
            data: form_data,
            success: function(data) {
                //
                $(".ODRTagWrapper_import").html(data.d.html);
                setupTagTree( $(".ODRTagImport_content") );    {# defined in ODRAdminBundle:Default:common_js.html.twig #}
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Creates a new tag.
     *
     * @param {number} datafield_id
     */
    function AddTag(datafield_id) {
        var url = '{{ path('odr_create_tag', { 'datafield_id': 0 }) }}';
        // Load display template menu
        url = url.substring(0,(url.length - 1));
        url += datafield_id;
        // alert(url);  return;

        updateODRRemodalBody('', 'full');

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // Reload parts of the page so that the new tag shows up
                loadTagEditDialogContents(data.d.datafield_id, data.d.tag_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Deletes a tag.
     *
     * @param {number} tag_id
     */
    function DeleteTag(tag_id) {
        var delete_question = 'Are you sure you want to delete this tag?';
        if ( $("#ODRTag_" + tag_id + "_name").closest(".ODRTagItem").children(".ODRTagGroup").find('input').length > 0 )
            delete_question = 'Are you sure you want to delete this tag and its children?';

        if ( !confirm(delete_question) )
            return;

        var url = '{{ path('odr_delete_tag', { 'tag_id': 0 }) }}';
        // Load display template menu
        url = url.substring(0,(url.length - 1));
        url += tag_id;
        // alert(url);  return;

        // Show the loading blurb
        setODRRemodalLoadingText('Deleting...');
        showODRRemodalLoading();

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // Remove the tag from this modal
                $("#ODRTag_" + tag_id + "_name").closest(".ODRTagItem").remove();

                // Redo any warnings
                FindDuplicateTagNames();
                clearTagHighlights();
                initTags();

                // Hide the loading blurb
                hideODRRemodalLoading();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Saves the order of tags in the modal.
     *
     * @param {HTMLElement} item
     */
    function SaveTagPosition(item) {
        // Remove any pre-existing input elements added by this function
        $(".ODRTagPositionForm_input").remove();

        // Get a list of tags on "this level" that the tag got moved to
        var parent = $(item).parent();
    {% if sort_by_name == false %}
        {# Only enumerate the tag order if the tags aren't being sorted by name #}
        $(parent).children(".ODRTagItem").each(function(index, element) {
            var tag_id = $(element).attr('rel');
            var form_element = $("<input>", {"class": "ODRTagPositionForm_input", "type": "hidden", "value": tag_id, "name": "tag_ordering[" + index + "]"});
            $("#ODRTagPositionForm").append(form_element);
        });
    {% else %}
        {# When the tags are being sorted by name, just append an empty form element#}
        var form_element = $("<input>", {"class": "ODRTagPositionForm_input", "type": "hidden", "value": '', "name": "tag_ordering"});
        $("#ODRTagPositionForm").append(form_element);
    {% endif %}


        // Get the (new) parent of the tag that just got moved
        var child_tag_id = $(item).attr('rel');
        var child_tag = $("<input>", {"class": "ODRTagPositionForm_input", "type": "hidden", "value": child_tag_id, "name": "child_tag_id"});
        $("#ODRTagPositionForm").append(child_tag);

        var parent_tag_id = $(item).parent().parent().attr('rel');
        var parent_tag = $("<input>", {"class": "ODRTagPositionForm_input", "type": "hidden", "value": parent_tag_id, "name": "parent_tag_id"});
        $("#ODRTagPositionForm").append(parent_tag);


        var datafield_id = $("#ODRTagPositionForm").attr('rel');
        var url = '{{ path('odr_move_tag', { 'datafield_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datafield_id;

        {% if sort_by_name %}
        // Duplicate tag names shouldn't prevent this, but should be mentioned
        FindDuplicateTagNames();
        showODRRemodalLoading();
        {% endif %}

        // alert(url);  return;

        var post_data = $("#ODRTagPositionForm").serialize();
        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data) {
                hideODRRemodalLoading();

                {% if sort_by_name %}
                // The controller may have made a lot of changes...easier to just reload the contents
                updateODRRemodalBody('', 'full');
                loadTagEditDialogContents(datafield_id);
                {% endif %}
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Forcibly reload on error
                window.location.reload();
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

{% endif %}    {# END if not disable_controls #}
</script>

{% endspaceless %}
