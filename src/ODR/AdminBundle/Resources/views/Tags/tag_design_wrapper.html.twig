{% spaceless %}

{% set datafield_meta = datafield.dataFieldMeta %}
{% set allow_multiple_levels = datafield_meta.tags_allow_multiple_levels %}
{% set sort_by_name = datafield_meta.radio_option_name_sort %}

<div id="odr_tag_design_modal">
    <div class="ODRThemeElement">
        <button class="ODRAddTag pure-button pure-button-primary">Create single tag</button>
        <button class="ODRTagCreationMode pure-button">Import tags</button>
    </div>

    <div id="odr_tag_design" class="ODRTagWrapper_design pure-form">
        {# this form is for tag displayOrder and setting parent/child relationships #}
        <form id="ODRTagPositionForm" rel="{{ datafield.id }}"></form>

        {% if allow_multiple_levels == false and sort_by_name == true %}
            {# Don't display help message if only a single level of tags is permitted, and they're sorted by name #}
        {% else %}
        <div class="ODRThemeElement">
            <div id="ODRTagMoveHelpDiv">
                To move a tag, click on the <i class="fa fa-arrows Cursor"></i> icon, then press the arrow keys to change the position of the selected tag.
                <br>To save, either close the dialog box or click somewhere else within it.  Press the escape key to close without saving. {% if sort_by_name == true %}After saving, the system will automatically update the tags to be in alphabetical order.{% endif %}
            </div>
        </div>
        {% endif %}

        <div class="ODRThemeElement" style="margin-top: 15px;">
            {# this form is for renaming tags #}
            <form id="ODRTagForm" rel="{{ datafield.id }}">
                {% include 'ODRAdminBundle:Tags:tag_wrapper.html.twig' with {
                    'datafield' : datafield,
                    'stacked_tags': stacked_tags,
                } %}
            </form>
        </div>
    </div>

    <div id="odr_tag_import" class="pure-form">
        <div class="pure-u-1-2 ODRTagWrapper_design">
            <form id="ODRTagListForm" class="pure-form" rel="{{ datafield.id }}" style="padding-left: 20px;">
                <input type="hidden" id="datafield_{{ datafield.id }}_name_sort" value="{% if sort_by_name == true %}1{% else %}0{% endif %}" />
                {% if allow_multiple_levels == true %}
                <fieldset style="margin-bottom: 10px;">
                    <label for="tag_hierarchy_delimiter" class="ODRFieldLabel">
                        Tag Hierarchy delimiter:&nbsp;
                    </label>
                    <input type="text" name="tag_hierarchy_delimiter" id="tag_hierarchy_delimiter" class="ODRDelimiterField" maxlength="3" size="4" />
                    &nbsp;
                    <span class="ODRInputError ODRTagHierarchyWarnWrapper"><i class="fa fa-warning"></i><span id="tag_hierarchy_delimiter_warn">Needs a value</span></span>
                </fieldset>
                {% endif %}
                <fieldset>
                    <table class="ODRTagListImport pure-table pure-table-striped pure-u-1">
                        <thead>
                            <tr>
                                <th>Tags (one per line)</th>
                            </tr>
                        </thead>
                        <tbody class="ODRSortableOption pure-u-1" rel="{{ datafield.id }}">
                            <tr class="pure-u-1">
                                <td class="pure-u-1">
                                    <textarea id="tag_list" class="pure-u-1" name="tag_list"></textarea>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </fieldset>
            </form>
        </div>
        <div class="pure-u-1-2 ODRTagWrapper_import">
        </div>
    </div>
</div>
<script>

    var SaveTimeout = 2000;

    function notifySaved() {
        $.jGrowl('SAVED');
    }

    $(function () {
        $("#odr_tag_import").hide();
        $(".ODRInputError").hide();

{# inverse of allow_multiple_levels == false and sort_by_name == true #}
{% if allow_multiple_levels == true or sort_by_name == false %}
        {# Going to need tag movement in some capacity #}
        $("#odr_tag_design_modal").unbind('click').click(function() {
            clearTagHighlights();
        });

        // This needs to be before the other keyup handlers...
        $("#ODRRemodal").unbind('keyup').keyup(function(event) {
            // If not re-ordering tags, continue as usual
            if ( !reordering_tags )
                return;

        {% if allow_multiple_levels == true %}
            // Ignore all key presses other than arrow keys
            if ( event.which < 37 || event.which > 40)
                return;
        {% else %}
            // Changing depth in the tree makes no sense, so only respond to the up/down arrow keys
            if ( event.which !== 38 && event.which !== 40 )
                return;
        {% endif %}

            // Locate the highlighted tag
            var tag_item = $(".ODRTagHighlight");
            handleTagMovement( $(tag_item), event.which );
        });
{% endif %}

        $(".ODRTagCreationMode").unbind('click').click(function(event) {
            if ( $(this).hasClass('pure-button-disabled') )
                return;

            // Don't want #odr_tag_design_modal click event to fire
            event.stopPropagation();
            clearTagHighlights();

            if ( $("#odr_tag_import").is(':visible') ) {
                $("#odr_tag_design").show();
                $("#odr_tag_import").hide();

                $("#tag_hierarchy_delimiter").val('');
                $("#ODRTagListForm").find('textarea').each(function() {
                    $(this).val('');
                });
                $(".ODRTagWrapper_import").html('');

                $(".ODRTagCreationMode").html("Import tags");
                $(".ODRAddTag").html("Create single tag");

                resetRemodalInnerHeight();
            }
            else {
                $("#odr_tag_design").hide();
                $("#odr_tag_import").show();

                $(".ODRTagCreationMode").html("Design tags");
                $(".ODRAddTag").html("Validate tag list");

                resetRemodalInnerHeight();
            }
        });

        $(".ODRDelimiterField").unbind('keyup paste').on('keyup paste', function() {
            var tag_hierarchy_delimiter_value = $("#tag_hierarchy_delimiter").val().trim();

            if ( tag_hierarchy_delimiter_value === '' )
                $(".ODRTagHierarchyWarnWrapper").show();
            else
                $(".ODRTagHierarchyWarnWrapper").hide();
        });

        $("#tag_list").unbind('keyup paste').on('keyup paste', function() {
            $(".ODRTagWrapper_import").html('');
        });

        FindDuplicateTagNames();

        initTags();
    });

    function initTags() {
        $(".ODRTagAnchor").unbind('click').click(function(event) {
            // Don't want #odr_tag_design_modal click event to fire
            event.stopPropagation();
            clearTagHighlights();
            reordering_tags = true;

            var tag_parent = $(this).parent().parent();
            $(tag_parent).addClass('ODRTagHighlight');

            // When not sorting by name, the highlighted tag's neighbors are its siblings
            // e.g. adjacent to the highlighted tag with the same parent
            if ($(tag_parent).prev().length > 0)
                $(tag_parent).prev().children('.ODRTagUnit').addClass('ODRNeighborTag');
            if ($(tag_parent).next().length > 0)
                $(tag_parent).next().children('.ODRTagUnit').addClass('ODRNeighborTag');
        });

        $(".ODRAddTag").unbind('click').click(function(event) {
            // Don't want #odr_tag_design_modal click event to fire
            event.stopPropagation();
            clearTagHighlights();

            if ( $("#odr_tag_import").is(':visible') ) {
                ValidateTags({{ datafield.id }});
            }
            else {
                AddTag({{ datafield.id }});
            }
        });

        $(".ODRDeleteTag").unbind('click').click(function(event) {
            // Don't want #odr_tag_design_modal click event to fire
            event.stopPropagation();
            clearTagHighlights();

            var tag_id = $(this).attr('rel');
            DeleteTag(tag_id);
        });

        $(".ODRTagLabel").click(function(event) {
            // Don't want #odr_tag_design_modal click event to fire
            event.stopPropagation();
            clearTagHighlights();
        });

        $(".ODRTagLabel").unbind('keyup paste').on('keyup paste', function() {
            var tag_data = $(this).attr('id').split(/_/);
            var tag_id = tag_data[1];

            // Only want to execute the save function once
            clearTimeout(SaveTagPropertyInterval[tag_id]);
            SaveTagPropertyInterval[tag_id] = setTimeout("SaveTagProperty(" + tag_id + ")", SaveTimeout);

            save_tag_xhr = true;

            FindDuplicateTagNames();
        });
    }

    var reordering_tags = false;
    function clearTagHighlights() {
        reordering_tags = false;
        $(".ODRTagHighlight").each(function() {
            $(this).removeClass('ODRTagHighlight');
            SaveTagPosition( $(this) );
        });
        $(".ODRNeighborTag").each(function() {
            $(this).removeClass('ODRNeighborTag');
        });
    }

{# inverse of allow_multiple_levels == false and sort_by_name == true #}
{% if allow_multiple_levels == true or sort_by_name == false %}
    function ensureTagVisibility(element) {
        var pageTop = $('#ODRTagForm').offset().top;
        var pageBottom = pageTop + $('#ODRTagForm').height();
        var elementTop = $(element).offset().top;
        var elementBottom = elementTop + $(element).height();

        if ( (elementTop > pageBottom) || (elementBottom < pageTop) ) {
            $("#ODRTagForm").scrollTo(
                $(element),      // target
                250,             // duration
                {margin: 'true'} // options...get scrollTo() to consider margin when scrolling
            );
        }
    }

    function handleTagMovement(tag_item, which) {
        var parent_tag_group = $(tag_item).parent();
        var prev_tag = $(tag_item).prev();
        var next_tag = $(tag_item).next();

        if (which === 37) {    // left arrow
            if ( $(parent_tag_group).hasClass('ODRTopLevelTagGroup') ) {
                // If already a top-level tag, do nothing
                return;
            }
            else {
                // Otherwise, move this tag and its children to be after its parent tag
                $(tag_item).insertAfter( $(parent_tag_group).parent() );

                // If the original parent tag group no longer has any children, get rid of it
                if ( $(parent_tag_group).children().length === 0 )
                    $(parent_tag_group).remove();
            }
        }
        else if (which === 38) {    // up arrow
            if ( $(prev_tag).length === 0 && $(parent_tag_group).hasClass('ODRTopLevelTagGroup') ) {
                // If already at top of the list, do nothing
                return;
            }
            else {
                // Otherwise, move the highlighted tag to be after the next tag
                $(tag_item).insertBefore( $(prev_tag) );
            }
        }
        else if (which === 39) {    // right arrow
            if ( $(prev_tag).length === 0 && $(next_tag).length === 0 ) {
                // If no neighbor tags, do nothing
                return;
            }
            else if ( $(prev_tag).length > 0 ) {
                // Preferentially make this a child of the previous tag if possible
                if ( $(prev_tag).children('ul.ODRTagGroup').length === 0 ) {
                    // Previous tag has no children, make an empty container
                    var new_parent_group = $( $.parseHTML('<ul class="ODRTagGroup"></ul>') );
                    $(new_parent_group).appendTo( $(prev_tag) );

                    // Move the highlighted tag into the previous tag's children
                    $(tag_item).appendTo( $(new_parent_group) );
                }
                else {
                    // Move the highlighted tag into the previous tag's children
                    var new_parent_group = $(prev_tag).children('ul.ODRTagGroup').first();
                    $(tag_item).appendTo( $(new_parent_group) );
                }
            }
            // else {
            //     // Otherwise, make it a child of the next tag
            //     if ( $(next_tag).children('ul.ODRTagGroup').length === 0 ) {
            //         // Previous tag has no children, make an empty container
            //         var new_parent_group = $( $.parseHTML('<ul class="ODRTagGroup"></ul>') );
            //         $(new_parent_group).appendTo( $(next_tag) );
            //
            //         // Move the highlighted tag into the previous tag's children
            //         $(tag_item).appendTo( $(new_parent_group) );
            //     }
            //     else {
            //         // Move the highlighted tag into the previous tag's children
            //         var new_parent_group = $(next_tag).children('ul.ODRTagGroup').first();
            //         $(tag_item).appendTo( $(new_parent_group) );
            //     }
            // }
        }
        else if (which === 40) {    // down arrow
            if ( $(next_tag).length === 0 && $(parent_tag_group).hasClass('ODRTopLevelTagGroup') ) {
                // If already at bottom of the list, do nothing
                return;
            }
            else {
                // Otherwise, move the highlighted tag to be before the previous tag
                $(tag_item).insertAfter( $(next_tag) );
            }
        }

        // Update the neighbor tag indicators
        $(".ODRNeighborTag").each(function() {
            $(this).removeClass('ODRNeighborTag');
        });
        if ( $(tag_item).prev().length > 0 )
            $(tag_item).prev().children('.ODRTagUnit').addClass('ODRNeighborTag');
        if ( $(tag_item).next().length > 0 )
            $(tag_item).next().children('.ODRTagUnit').addClass('ODRNeighborTag');

        ensureTagVisibility( $(tag_item) );
    }
{% endif %}

    function FindDuplicateTagNames() {
        $(".ODRInputError").hide();
        var has_duplicates = false;

        $("#odr_tag_design_modal").find(".ODRTagGroup").each(function() {
            var tag_names = {};

            $(this).children('.ODRTagItem').children('.ODRTagUnit').children('.ODRTagLabel').each(function(index, elem) {
                var name = $(elem).val();
                if ( tag_names[name] === undefined  ) {
                    // New tag name for this sibling group
                    tag_names[name] = $(elem);
                }
                else {
                    // Duplicate tag name, show warnings for both of them
                    has_duplicates = true;

                    var prev_elem = tag_names[name];
                    $(prev_elem).next().show();
                    $(elem).next().show();
                }
            });
        });

        if (has_duplicates)
            $(".ODRTagCreationMode").addClass('pure-button-disabled');
        else
            $(".ODRTagCreationMode").removeClass('pure-button-disabled');
    }

    var save_tag_xhr = null;
    var SaveTagPropertyInterval = [];
    function SaveTagProperty(tag_id) {
        // Clear the save timeout for this specific tag
        clearTimeout(SaveTagPropertyInterval[tag_id]);

        // Placing this after window.clearInterval() to avoid pointless double save + double reload
        var tag_name = $("#ODRTag_" + tag_id + "_name").val().trim();
        var old_tag_name = $("#ODRTag_" + tag_id + "_name").data('old-value');

        // Silently ignore attempts to save the same value
        if ( old_tag_name === tag_name )
            return;

        // Silently revert attempts to save blank tags
        if (tag_name === '') {
            $("#ODRTag_" + tag_id + "_name").val(old_tag_name);
            return;
        }


        var url = '{{ path('odr_rename_tag', { 'tag_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += tag_id;

        // alert(url);
        // return;

        var post_data = $("#ODRTagForm").find("#ODRTag_" + tag_id + "_name").serialize();    // only want one tag

        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data) {
                notifySaved();

                // Replace the previous "old-value" with the one that just got saved
                $("#ODRTag_" + tag_id + "_name").data('old-value', tag_name);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Revert back to the old value on an error
                $("#ODRTag_" + tag_id + "_name").val(old_tag_name);
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }

                save_datafield_xhr = null;
            }
        });
    }

    function ValidateTags(datafield_id) {
        if ( $("#tag_list").val() === '' ) {
            alert('no tags given');
            return;
        }
        if ( $("#tag_hierarchy_delimiter").val() === '' ) {
            alert('empty tag delimiter');
            return;
        }

        var url = '{{ path('odr_validate_tag_list', { 'datafield_id': 0 }) }}';
        // Load display template menu
        url = url.substring(0,(url.length - 1));
        url += datafield_id;

        var form_data = $("#ODRTagListForm").serialize();

        $.ajax({
            cache: false,
            type: 'POST',
            url: url,
            dataType: "json",
            data: form_data,
            success: function(data) {
                //
                $(".ODRTagWrapper_import").html(data.d.html);
                setupTagTree();    {# defined in ODRAdminBundle:Default:common_js.html.twig #}
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function AddTag(datafield_id) {
        var url = '{{ path('odr_create_tag', { 'datafield_id': 0 }) }}';
        // Load display template menu
        url = url.substring(0,(url.length - 1));
        url += datafield_id;

        // alert(url);
        // return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                //
                $(".ODRTopLevelTagGroup").append(data.d.html);

                // Ensure the new tags respond to events
                initTags();
                FindDuplicateTagNames();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function DeleteTag(tag_id) {
        var delete_question = 'Are you sure you want to delete this tag?';
        if ( $("#ODRTag_" + tag_id + "_name").parent().children(".ODRTagGroup").find('input').length > 0 )
            delete_question = 'Are you sure you want to delete this tag and its children?';

        if ( !confirm(delete_question) )
            return;

        var url = '{{ path('odr_delete_tag', { 'tag_id': 0 }) }}';
        // Load display template menu
        url = url.substring(0,(url.length - 1));
        url += tag_id;

        // alert(url);
        // return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // TODO
                window.location.reload();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function SaveTagPosition(item) {

        // Remove any pre-existing input elements added by this function
        $(".ODRTagPositionForm_input").remove();

        // Get a list of tags on "this level" that the tag got moved to
        var parent = $(item).parent();
    {% if sort_by_name == false %}
        {# Only enumerate the tag order if the tags aren't being sorted by name #}
        $(parent).children(".ODRTagItem").each(function(index, element) {
            var tag_id = $(element).attr('rel');
            var form_element = $("<input>", {"class": "ODRTagPositionForm_input", "type": "hidden", "value": tag_id, "name": "tag_ordering[" + index + "]"});
            $("#ODRTagPositionForm").append(form_element);
        });
    {% else %}
        {# When the tags are being sorted by name, just append an empty form element#}
        var form_element = $("<input>", {"class": "ODRTagPositionForm_input", "type": "hidden", "value": '', "name": "tag_ordering"});
        $("#ODRTagPositionForm").append(form_element);
    {% endif %}


        // Get the (new) parent of the tag that just got moved
        var child_tag_id = $(item).attr('rel');
        var child_tag = $("<input>", {"class": "ODRTagPositionForm_input", "type": "hidden", "value": child_tag_id, "name": "child_tag_id"});
        $("#ODRTagPositionForm").append(child_tag);

        var parent_tag_id = $(item).parent().parent().attr('rel');
        var parent_tag = $("<input>", {"class": "ODRTagPositionForm_input", "type": "hidden", "value": parent_tag_id, "name": "parent_tag_id"});
        $("#ODRTagPositionForm").append(parent_tag);


        var datafield_id = $("#ODRTagPositionForm").attr('rel');
        var url = '{{ path('odr_move_tag', { 'datafield_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datafield_id;

        // Duplicate tag names shouldn't prevent this, but should be mentioned
        FindDuplicateTagNames();

        // alert(url);
        // return;

        var post_data = $("#ODRTagPositionForm").serialize();
        // $("#ODRTagPositionForm").children('input').each(function() {
        //     console.log( $(this).get(0) );
        // });
        // console.log('returning without saving...');
        // return;

        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data) {
                if ( data.d.changes_made === true)
                    notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Forcibly reload on error
                window.location.reload();
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }

                save_datafield_xhr = null;
            }
        });
    }
</script>

{% endspaceless %}
