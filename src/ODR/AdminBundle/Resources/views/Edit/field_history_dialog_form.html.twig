{% spaceless %}

{% set unique_id = datarecord.id ~ '_' ~ datafield.id %}

    <!-- Field History Dialog Form -->
    <form action="{{ path('odr_record_save', { 'datarecord_id': datarecord.id, 'datafield_id': datafield.id }) }}" class="pure-u-1" id="DatafieldHistoryForm" method="POST">
        <input type="hidden" id="{{ current_typeclass }}Form__token" name="{{ current_typeclass }}Form[_token]" value="{{ csrf_token }}" />
        <input type="hidden" value="" required="required" name="{{ current_typeclass }}Form[value]" id="{{ current_typeclass }}Form_revert" />
    </form>

    <div class="pure-control-group" id="ODRFieldHistoryDialogTable">
        <table class="display dataTable no-footer">
            <thead><tr>
                <th>Version</th>
                <th>Fieldtype</th>
                <th>Updated At</th>
                <th>Change Made By</th>
                <th>Value</th>
                <th></th>
            </tr></thead>
            <tbody>
            {% set latest_version = 0 %}
            {% for historical_value in historical_values %}
                {% if historical_value.version > latest_version %}
                    {% set latest_version = historical_value.version %}
                {% endif %}
            {% endfor %}

            {% for historical_value in historical_values|reverse %}
                <tr class="row">
                    <td>{{ historical_value.version }}{% if historical_value.version == latest_version %} (current){% endif %}</td>
                    <td>{{ historical_value.typename }}</td>
                    <td>{{ historical_value.created|date("Y-m-d H:i:s") }}</td>
                    <td>{{ historical_value.user }}</td>
                    {% if historical_value.typeclass == "DatetimeValue" %}
                        <td id="version_{{ historical_value.version }}">{% if historical_value.value|date('Y-m-d') != '9999-12-31' %}{{ historical_value.value|date('Y-m-d') }}{% endif %}</td>
                    {% else %}
                        <td id="version_{{ historical_value.version }}">{{ historical_value.value }}</td>
                    {% endif %}
                    <td id="version_{{ historical_value.version }}_button" rel="{{ historical_value.typeclass }}">
                        <input type="button" class="pure-button pure-button-primary ODRFieldHistoryRevertButton" value="Revert">
                    </td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </div>

    <script>
        $(function() {
            $(".row").each(function(index, value) {
                //
                if ( ((index+1) % 2) === 0 )
                    $(this).addClass('even');
                else
                    $(this).addClass('odd');

                //
                var parent = $(this).find(".pure-button").parent();
                var target_typeclass = $(parent).attr('rel');
                var current_typeclass = '{{ current_typeclass }}';

                // Prevent these following reversions...they don't make sense
                if ( current_typeclass === 'DatetimeValue' && target_typeclass !== 'DatetimeValue'
                    || current_typeclass !== 'DatetimeValue' && target_typeclass === 'DatetimeValue'
                    || current_typeclass === 'Boolean' && target_typeclass !== 'Boolean'
                    || current_typeclass !== 'Boolean' && target_typeclass === 'Boolean'
                ) {
                    $(parent).children().first().prop('value', 'Unable to revert').prop('disabled', true);
                }
            });

            // Doesn't make sense to revert to the current version...remove that option
            $("#version_{{ latest_version }}_button").remove();

            // Attach click events to the remaining buttons to revert back to older values
            $(".ODRFieldHistoryRevertButton").unbind('click').click(function() {
                var data = $(this).parent().attr('id').split(/_/);

                var version = 'version_' + data[1];
                var typeclass = $(this).parent().attr('rel');

                revertTo(version, typeclass);
            });
        });

        function revertTo(id, target_typeclass) {
            var current_typeclass = "{{ current_typeclass }}";

            // Changes that require no extra consideration or work
            var no_warn = {
                'IntegerValue': ['LongText','LongVarchar','MediumVarchar','ShortVarchar','DecimalValue'],
                'LongVarchar': ['LongText'],
                'MediumVarchar': ['LongText','LongVarchar'],
                'ShortVarchar': ['LongText','LongVarchar','MediumVarchar'],
                'DecimalValue': ['LongText','LongVarchar','MediumVarchar','ShortVarchar']
            };

            // Changes from 'longer' fieldtypes to 'shorter' fieldtypes
            var length_warn = {
                'LongText': ['LongVarchar','MediumVarchar','ShortVarchar'],
                'LongVarchar': ['MediumVarchar','ShortVarchar'],
                'MediumVarchar': ['ShortVarchar']
            };

            // Changes from text fields to IntegerValue/DecimalValue...it can easily result in lost data
            var number_warn = {
                'LongText': ['IntegerValue','DecimalValue'],
                'LongVarchar': ['IntegerValue','DecimalValue'],
                'MediumVarchar': ['IntegerValue','DecimalValue'],
                'ShortVarchar': ['IntegerValue','DecimalValue']
            };

            // Converting from DecimalValue to IntegerValue...going to lose fractional parts of data
            var precision_warn = {
                'DecimalValue': ['IntegerValue']
            };


            // Warn the user about potential issues when reverting to values from different fieldtypes
            var confirm_str = '';
            if ( no_warn[target_typeclass] !== undefined && $.inArray(current_typeclass, no_warn[target_typeclass]) === 0 ) {
                confirm_str = '';
            }
            else if ( length_warn[target_typeclass] !== undefined && $.inArray(current_typeclass, length_warn[target_typeclass]) === 0 ) {
                confirm_str = 'WARNING: The value may be truncated...';
            }
            else if ( number_warn[target_typeclass] !== undefined && $.inArray(current_typeclass, number_warn[target_typeclass]) === 0 ) {
                confirm_str = 'WARNING: The value will be converted to a number, which may result in nonsensical values...';
            }
            else if ( precision_warn[target_typeclass] !== undefined && $.inArray(current_typeclass, precision_warn[target_typeclass]) === 0 ) {
                confirm_str = 'WARNING: Any fractional part of the decimal will be dropped...';
            }
            confirm_str += 'Are you certain you want to revert back to this value?';


            if ( confirm(confirm_str) ) {
                var previous_value = $("#" + id).html();

                // Transfer the desired previous_value into the datafield history form
{% if current_typeclass == "Boolean" %}
                $("#{{ current_typeclass }}Form_revert").val(1);

                if (previous_value === '')
                    $("#{{ current_typeclass }}Form_revert").prop('disabled', true);  // force non-submission of value
                else
                    $("#{{ current_typeclass }}Form_revert").removeAttr('disabled');
{% else %}
                $("#{{ current_typeclass }}Form_revert").val(previous_value);
{% endif %}

                // Locate the datarecord/datafield ids again
                var unique_id = '{{ unique_id }}'.split(/_/);
                var datarecord_id = unique_id[0];
                var datafield_id = unique_id[1];

                // Determine save type
                var post_data = $("#DatafieldHistoryForm").serialize();
                var url = $("#DatafieldHistoryForm").attr('action');

                console.log('Save Form: #DatafieldHistoryForm, datarecord_id: ' + datarecord_id + ', datafield_id: ' + datafield_id);

                $.ajax({
                    type: 'POST',
                    url: url,
                    dataType: "json",
                    data: post_data,
                    success: function(data, textStatus, xhr) {
                        closeODRRemodal();

                        // Easier to just reload the datafield after the value got reverted
                        ReloadDatafield(datarecord_id, datafield_id);
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Do nothing on error?
                        closeODRRemodal();
                    },
                    complete: function(jqXHR, textStatus) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }
                        $(form_id).find('.ODRSaveIndicator').fadeOut('350');
                    }
                });
            }
        }
    </script>
{% endspaceless %}
