{% spaceless %}

{% set can_edit_record = false %}
{% set can_delete_record = false %}
{% set can_add_record = false %}
{% set can_change_public_status = false %}
{% set is_datatype_admin = false %}

{% if datatype_permissions[ datatype.id ] is defined and datatype_permissions[ datatype.id ][ 'dr_edit' ] is defined %}
    {# Edit page for a datarecord can be accessed if user has permissions for a childtype, need to verify that user has permissions to edit the parent datatype #}
    {% set can_edit_record = true %}
{% endif %}
{% if datatype_permissions[ datatype.id ] is defined and datatype_permissions[ datatype.id ][ 'dr_delete' ] is defined %}
    {% set can_delete_record = true %}
{% endif %}
{% if datatype_permissions[ datatype.id ] is defined and datatype_permissions[ datatype.id ][ 'dr_add' ] is defined %}
    {% set can_add_record = true %}
{% endif %}
{% if datatype_permissions[ datatype.id ] is defined and datatype_permissions[ datatype.id ][ 'dr_public' ] is defined %}
    {% set can_change_public_status = true %}
{% endif %}
{% if datatype_permissions[ datatype.id ] is defined and datatype_permissions[ datatype.id ][ 'dt_admin' ] is defined %}
    {% set is_datatype_admin = true %}
{% endif %}

{% if can_edit_record %}
<div class="ODRCreatedBy pure-u-1 PadRight">
    <strong>Created by: </strong>{{ datarecord.createdBy.getuserstring }} <strong>on</strong> {{ datarecord.created|date('Y-m-d h:m:s') }} (UTC-5)
    <strong>Last Modified by: </strong>{{ datarecord.updatedBy.getuserstring }} <strong>on</strong> {{ datarecord.updated|date('Y-m-d h:m:s') }} (UTC-5)
</div>
{% endif %}

<div class="pure-u-1 clearfix" id="ODRSearchHeaderWrapper">

    {% if search_key != '' %}
    <div class="pure-u-1-2" id="ODRPublicExportButtons">
    {% else %}
    <div class="pure-u-1" id="ODRPublicExportButtons">
    {% endif %}
        <button id="ODRViewRecord" type="button" class="pure-button pure-button-primary">View</button>

        <button id="ChooseView" class="pure-button pure-button-primary" data-step="3"
                data-intro="Clicking this brings up a dialog of options for selecting from alternate layouts, or for creating one of your own."
        >
            Choose View
        </button>

        <button id="ODRTracking" type="button" class="pure-button pure-button-primary">History</button>

        <i id="ODRDownloadAllFilesIcon" class="fa fa-file-archive-o Pointer" title="Download files"></i>

    {% if can_change_public_status %}
        <i id="ODRPublicRecord" class="tooltip fa fa-globe Pointer {% if datarecord.dataRecordMeta.publicDate|is_public %}ODRPublic{% endif %}" title="This record is{% if not datarecord.dataRecordMeta.publicDate|is_public %} not{% endif %} public"></i>
    {% endif %}

    {% if can_delete_record %}
        <i id="ODRDeleteRecord" class="Pointer tooltip fa fa-times ODRDeleteRecord" title="Click to delete record"></i>
    {% endif %}

    {% if can_add_record and is_top_level and datatype.isMasterType == 0 %}
        <i id="ODRAddRecord" class="fa fa-plus Pointer tooltip ODRAddRecord" title="Click to add a record"></i>
    {% endif %}

        <label for="edit_shows_all_fields_toggle" class="Pointer" title="If checked, then all fields will be displayed regardless of the layout settings" style="padding-left: 15px">
            <input type="checkbox" id="edit_shows_all_fields_toggle" /> Display All fields
        </label>

    {% if is_datatype_admin %}
        <label for="prevent_datarecord_edits" class="Pointer" title="If checked, then no changes can be made to this record" style="padding-left: 15px">
            <input type="checkbox" id="prevent_datarecord_edits" /> Prevent editing
        </label>
    {% endif %}
    </div>

    {% if search_key != '' %}
        {% include 'ODRAdminBundle:Default:search_header.html.twig' with {
            'search_key': search_key,
            'page_length': page_length,
            'offset': offset,
            'prev_datarecord': prev_datarecord,
            'next_datarecord': next_datarecord,
            'redirect_path': redirect_path,
            'search_result_current': search_result_current,
            'search_result_count': search_result_count,

            'page_type': 'edit'
        } %}
    {% endif %}
</div>

<script>
    $(function() {
        // Need a tab id in html5 sessionStorage if one doesn't exist
        if ( !window.sessionStorage.getItem('odr_tab_id') )
            window.sessionStorage.setItem('odr_tab_id', '{{ odr_tab_id }}');

        $(".MenuDesignArea").remove();

        {% if edit_shows_all_fields == true %}
        $("#edit_shows_all_fields_toggle").prop('checked', true);
        {% endif %}

        {% if datarecord.getpreventuseredits %}    {# NOTE - datarecord is not a cached array entry, so using the function name instead of the property #}
        $("#prevent_datarecord_edits").prop('checked', true);
        {% endif %}


        $("#ODRViewRecord").unbind('click').click(function() {
            loadDataRecord({{ datarecord.id }}, 'view', '{{ offset }}');
        });

        $("#ChooseView").unbind('click').click(function(event) {
            window.ODRChooseView_applyredirectcallback = function(theme_id) {
                // When a new 'edit' theme is selected, just reload the entire page afterwards
                // ...the newly selected theme will be pulled from the user's session
                reloadPage();
            }
            {#openChooseViewRemodal({{ datatype.id }}, 'edit', '{{ search_key }}');#}    {# NOTE: apparently differentiating between 'display' and 'edit' is...'confusing' #}
            openChooseViewRemodal({{ datatype.id }}, 'display', '{{ search_key }}');
        });

        $("#ODRDownloadAllFilesIcon").unbind('click').click(function() {
            {# defined in ODRAdminBundle:Default:mass_download_dialog.html.twig #}
            openMassDownloadDialog("{{ search_key }}");
        });

{% if can_change_public_status %}
        $("#ODRPublicRecord").unbind('click').click(function() {
            var url = '{{ path('odr_record_public', { 'datarecord_id': 0 }) }}';
            url = url.substring(0, (url.length - 1));
            url += '{{ datarecord.id }}';

            var elem = $(this);
            var is_public = $(elem).hasClass('ODRPublic');

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    if (is_public) {
                        // Was Public
                        $(elem).removeClass('ODRPublic').attr('title', 'This record is not public');
                    }
                    else {
                        $(elem).addClass('ODRPublic').attr('title', 'This record is public');
                    }
                    $.jGrowl('SAVED');
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        });
{% endif %}

{% if can_delete_record %}
        $("#ODRDeleteRecord").unbind('click').click(function() {
            if ( confirm("Are you sure you want to delete this record?") ) {
                // This is only available to be called from a top-level datarecord, so the value of
                //  is_link technically doesn't matter
                var url = '{{ path('odr_record_delete', { 'datarecord_id': 0, 'is_link': 0, 'search_key': '' }) }}';
                url = url.substring(0, (url.length - 3));
                url += '{{ datarecord.id }}' + '/0';
{% if search_key != '' %}
                url += '/{{ search_key }}';
{% endif %}

                $.ajax({
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function(data, textStatus, jqXHR) {
                        // Redirect to an appopriate page
                        var url = data.d;
                        UpdateURL(url);
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function(jqXHR, textStatus) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }
                    }
                });
            }
        });
{% endif %}

{% if can_add_record and is_top_level and datatype.isMasterType == 0 %}
        $("#ODRAddRecord").unbind('click').click(function() {
            var url = '{{ path('odr_edit_fake_record', { 'datatype_id': 0 }) }}';
            url = url.substring(0, (url.length - 1));
            url += '{{ datarecord.datatype.id }}';

            UpdateURL(url);
        });
{% endif %}

        $("#ODRDownloadAllFilesIcon").unbind('click').click(function() {
            openFileDownloadDialog( {{ datarecord.id }}, 0, 0 );
        });

        $("#ODRTracking").unbind('click').click(function() {
            var url = "{{ path('odr_track_datarecord_changes', {'datarecord_id': 0}) }}";
            url = url.substring(0, (url.length - 1));
            url += '{{ datarecord.id }}';

            UpdateURL(url);
        });

        $("#edit_shows_all_fields_toggle").unbind('click').click(function(event) {

        var toggle_data = {
            'odr_tab_id': window.sessionStorage.getItem('odr_tab_id'),
            'datatype_id': {{ datatype.id }}
        };

        var url = '{{ path('odr_session_toggle_edit_shows_all') }}';

        $.ajax({
            cache: false,
            type: 'POST',
            url: url,
            dataType: "json",
            data: toggle_data,
            // data: encodeURIComponent(toggle_data),
            success: function (data, textStatus, jqXHR) {
                // Have to reload the page here
                reloadPage();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything on error
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    });

{% if is_datatype_admin %}
        $("#prevent_datarecord_edits").unbind('click').click(function() {
            var url = '{{ path('odr_record_toggle_prevent_edits', { 'datarecord_id': 0 }) }}';
            url = url.substring(0, (url.length - 1));
            url += '{{ datarecord.id }}';

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    reloadPage();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        });
{% endif %}
    });
</script>

{% import "ODRAdminBundle:Default:load_datarecord_js.html.twig" as js %}
{{ js.write(search_theme_id, search_key) }}

{% endspaceless %}
