{% spaceless %}

{% set ALWAYS_EDIT = constant('ODR\\AdminBundle\\Entity\\DataTreeMeta::ALWAYS_EDIT') %}
{% set LINK_EDIT = constant('ODR\\AdminBundle\\Entity\\DataTreeMeta::LINK_EDIT') %}
{% set TOGGLE_EDIT_INACTIVE = constant('ODR\\AdminBundle\\Entity\\DataTreeMeta::TOGGLE_EDIT_INACTIVE') %}
{% set TOGGLE_EDIT_ACTIVE = constant('ODR\\AdminBundle\\Entity\\DataTreeMeta::TOGGLE_EDIT_ACTIVE') %}

{% set datatype = datatype_array[initial_datatype_id] %}
{% set datarecord = datarecord_array[initial_datarecord_id] %}
<input type="hidden" id="ODRRecordName_top" value="{{ datarecord.nameField_value }}" data-parent-name="{{ datatype.dataTypeMeta.shortName }}" />
{% set theme = theme_array[initial_theme_id] %}

{% set is_datatype_admin = false %}
{% if datatype_permissions[ datatype.id ] is defined and datatype_permissions[ datatype.id ][ 'dt_admin' ] is defined %}
    {% set is_datatype_admin = true %}
{% endif %}

{% include 'ODRAdminBundle:Edit:edit_area.html.twig' with {
    'datatype_array': datatype_array,
    'datarecord_array': datarecord_array,
    'theme_array': theme_array,

    'initial_datatype_id': initial_datatype_id,
    'initial_datarecord': datarecord,
    'initial_theme_id': initial_theme_id,

    'datatype_permissions': datatype_permissions,
    'datafield_permissions': datafield_permissions,
    'edit_shows_all_fields': edit_shows_all_fields,

    'is_top_level': is_top_level,
    'token_list': token_list,
} %}

{% if has_linked_datatypes > 0 %}
    <div id="ODRRecordLinkInfoWrapperDiv">
        {#    <button type="button" class="pure-button" onclick="OpenLinkInfoDialog({{ datarecord.id }})">View Linked Records...</button>#}
    </div>
{% endif %}

{% if is_datatype_admin %}
<div id="field_history_dialog_wrapper">
    {% include 'ODRAdminBundle:Edit:field_history_dialog.html.twig' %}
</div>
{% endif %}

<div id="download_files_dialog_wrapper">
    {% include 'ODRAdminBundle:Default:file_download_dialog.html.twig' with {
        'initial_datarecord_id': initial_datarecord_id,
    } %}
</div>
<div id="tag_edit_dialog_wrapper">
    {% include 'ODRAdminBundle:Displaytemplate:tag_wrapper_dialog.html.twig' with {
        'display': 'edit'
    } %}
</div>
{% endspaceless %}

<script>

$(function() {

    // --------------------
    // Only need to do this stuff once?

    // Resize all elements dependent on window size
    $(window).unbind('resize').resize(function() {
        WindowResizeInterval = window.clearInterval(WindowResizeInterval);    // variable WindowResizeInterval defined in common.js
        WindowResizeInterval = window.setInterval("onWindowResize()", 500);
    });

    // Resize everything prior to divs being hidden
    onWindowResize();

    // Setup any image galleries in linked datarecords
    setupImageGalleries();

    // Hide divs for accordion purposes
    setupAccordions();
    setupAccordionHighlights();

{% if (odr_wordpress_integrated and theme.themeMeta.disableSearchSidebar == true) or search_key == '' %}
    disableSearchSidebar();    {# defined in ODRAdminBundle:Default:common_js.html.twig #}
{% else %}
    enableSearchSidebar('{{ search_key }}', 'collapsed');    {# defined in ODRAdminBundle:Default:common_js.html.twig #}
{% endif %}

    // --------------------
    initPage();
    $(".MenuDesignArea").remove();
    window.scrollTo(0,0);

    OpenLinkInfoDialog({{ datarecord.id }});

    {% if notify_of_sync is defined and notify_of_sync == true %}
    {% include 'ODRAdminBundle:Theme:theme_sync_warning.js.twig' with {
        'datatype_id': datatype.id,
        'theme_id': theme.id,
        'page_type': 'edit',
        'search_key': search_key,
    }%}
    {% endif %}
});


var SaveTimeout = 1000;

var EditBehaviorLookup = {};

/**
 * Initializes the controls on the Edit page.
 */
function initPage() {
    // Shouldn't be needed, but shouldn't hurt
    hideSearchOverlay();    {# defined in Default::common_js.html.twig #}

    // Attach standard click handlers to tags in the search sidebar...    {# defined in ODRAdminBundle:Default:common_js.html.twig #}
    setupTagTree( $("#ODRSearchSidebar"), 2);
    // ...but attach a different set of handlers to the tags in the actual record area
    setupTagTree( $(".ODRRecord"), 3);
    // The "hide unselected" option for tags is ignored in Edit mode, so one call to initialize all
    //  tag fields is permissible

    $(".ODRTagsEdit").unbind('click').click(function() {
        {# defined in ODRAdminBundle:Displaytemplate:tag_wrapper_dialog.html.twig #}
        var datafield_id = $(this).attr('rel');
        openTagEditDialog(datafield_id);
    });

    $("a.ODRFileDownload").unbind('click').click(function(event) {
        // Grab necessary attributes
        var file_id = $(this).attr('rel');

        handleFileDownload(event, file_id);    {# defined in Default::file_handling.html.twig #}
    });

    $(".ODRDownloadAllFiles").unbind('click').click(function() {
        if ( $(this).hasClass('fa-muted') )
            return;

        // Locate necessary attributes
        var id_data = $(this).closest(".ODRDataField").first().attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        {# defined in ODRAdminBundle:Default:file_download_dialog.html.twig #}
        openFileDownloadDialog({{ initial_datarecord_id }}, datarecord_id, datafield_id);
    });

{% if is_datatype_admin %}
    $(".ODRDatafieldHistory").unbind('click').click(function(event) {
        // Don't trigger whatever the click normally would have done (mostly for boolean fields)
        event.preventDefault();
        event.stopImmediatePropagation();

        // Grab relevant entity ids
        var id_data = $(this).parents('.ODRDataField').attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        openFieldHistoryDialog(datarecord_id, datafield_id);
    });
    $(".ODRXYZDatafieldHistory").unbind('click').click(function(event) {
        // Don't trigger whatever the click normally would have done
        event.preventDefault();
        event.stopImmediatePropagation();

        // Grab relevant entity ids
        var id_data = $(this).parents('.ODRDataField').attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        // Need a different database query for this fieldtype...
        openXYZFieldHistoryDialog(datarecord_id, datafield_id);
    });
{% endif %}

    $(".ODRFileRenameTrigger").unbind('click').click(function() {
        var icon_div = $(this);
        var input_div = $(this).next();
        var rename_save_button = $(this).next().next();
        var download_div = $(this).next().next().next();

        if ( $(input_div).hasClass('ODRHidden') ) {
            // If the input for renaming the file is currently hidden, then show it
            $(icon_div).attr('title', "Stop renaming File");
            $(input_div).removeClass('ODRHidden');
            $(rename_save_button).removeClass('ODRHidden');

            // Hide the html that lets the user download the file
            $(download_div).addClass('ODRHidden');
        }
        else {
            // If the input for renaming the file is currently visible, then hide it
            $(icon_div).attr('title', "Rename File");
            $(input_div).addClass('ODRHidden');
            $(rename_save_button).addClass('ODRHidden');

            // Reset the contents of the input back to the file's current name
            $(input_div).val( $(download_div).text() );

            // Re-show the html that lets the user download the file
            $(download_div).removeClass('ODRHidden');
        }
    });

    $(".ODRFileRenameButton").unbind('click').click(function() {
        var icon_div = $(this).prev().prev();
        var input_div = $(this).prev();
        var rename_save_button = $(this);
        var download_div = $(this).next();

        var id_data = $(input_div).attr('id').split(/_/);
        var file_id = id_data[1];

        var url  = '{{ path('odr_record_rename_file', {'file_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += file_id;

        var filename = $(input_div).val();

        var form = $("<form>", {});
        var element = $("<input>", {"value": filename, "name": "filename"});
        $(form).append(element);
        var form_data = $(form).serialize();

        $.ajax({
            cache: false,
            type: 'POST',
            url: url,
            dataType: "json",
            data: form_data,
            success: function(data, textStatus, jqXHR) {
                // Update the displayed name of the file
                $(download_div).attr('title', filename);
                $(download_div).text(filename);
                $(input_div).val(filename);

                // Reset visibility
                $(input_div).addClass('ODRHidden');
                $(rename_save_button).addClass('ODRHidden');
                $(download_div).removeClass('ODRHidden');
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRPublicFile").parent().unbind('click').click(function(event) {
        // Grab necessary attributes
        var popup_icon_div = $(this).children(".ODRPublicFile");
        var file_id = $(popup_icon_div).attr('rel');

        var info_icon_div = $(this).parent().prev();

        // Don't change public status of file if it's currently being decrypted
        if ( pending_file_decryptions[file_id] != null || pending_file_decryptions[file_id] != undefined || file_decrypt_timeouts[file_id] != null || file_decrypt_timeouts[file_id] != undefined) {
            return false;
        }

        var download_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
        var decrypt_progress = $("#ODRFileDecrypt_" + file_id + "_progress");

        if ( $(info_icon_div).hasClass('ODRNotPublic') ) {
            // Show div for decryption progress
            $(download_div).css('visibility', 'visible');
            $(decrypt_progress).css('width', '100%');

            createFileDecryptProgressCheck(file_id, 0);     // do not download file after it finishes decrypting
        }

        var url  = '{{ path('odr_record_public_file', {'file_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += file_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if ( data.d.is_public ) {
                    // File is now public
                    $(info_icon_div).removeClass('ODRNotPublic').addClass('ODRPublic');
                    $(popup_icon_div).removeClass('ODRNotPublic').addClass('ODRPublic');

                    $(popup_icon_div).next().html('File was made public on ' + data.d.public_date);
                }
                else {
                    // File is now non-public
                    $(info_icon_div).removeClass('ODRPublic').addClass('ODRNotPublic');
                    $(popup_icon_div).removeClass('ODRPublic').addClass('ODRNotPublic');

                    $(popup_icon_div).next().html('File is not public');
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Stop checking decrypt progress when an error occurs
                file_decrypt_timeouts[ file_id ] = null;

                // Hide the css for the progressbar
                $(download_div).css('visibility', 'hidden');
                $(decrypt_progress).css('width', 0);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRDeleteImage").unbind('click').click(function() {

        if (confirm("Are you certain that you want to delete this Image?")) {
            var image_id = $(this).attr('rel');

            var url = '{{ path('odr_record_delete_image', { 'image_id': 0 } ) }}';
            url = url.substring(0, (url.length - 1));
            url += image_id;

            var tmp = $(this).parents(".ODRDataField").first().attr('id');
            tmp = tmp.split('_');
            var datarecord_id = tmp[1];
            var datafield_id = tmp[2];

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    // Will Cause removal from view
                    if (data.d.need_reload == true)
                        ReloadEditDatafield(datarecord_id, datafield_id);
                    else
                        $("#Image_" + image_id).remove();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".ODRPublicImage").unbind('click').click(function() {
        var image_id = $(this).attr('rel');

        var icon_div = $(this);

        var url  = '{{ path('odr_record_public_image', {'image_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += image_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if ( data.d.is_public ) {
                    // Image is now public
                    $(icon_div).addClass('ODRPublic').removeClass('ODRNotPublic');
                    $(icon_div).attr('title', 'Public since ' + data.d.public_date);
                }
                else {
                    // Image is now non-public
                    $(icon_div).addClass('ODRNotPublic').removeClass('ODRPublic');
                    $(icon_div).parent().next().attr('title', 'Image is not public');
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRRotateImage").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        var image_id = $(this).attr('rel');

        var direction = 1;
        if ( $(this).hasClass('fa-rotate-left') )
            direction = -1;

        var url  = '{{ path('odr_record_rotate_image', {'image_id': 0, 'direction': 1} ) }}';
        url = url.substring(0,(url.length-3));
        url += image_id + '/' + direction;

        // Allow only one 90 degree rotation of this image at a time
        $("#Image_" + image_id).find(".ODRRotateImage").addClass('fa-muted');

        var tmp = $(this).parents(".ODRDataField").first().attr('id');
        tmp = tmp.split('_');
        var datarecord_id = tmp[1];
        var datafield_id = tmp[2];

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Reload the image datafield
                ReloadEditDatafield(datarecord_id, datafield_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRImageRenameTrigger").unbind('click').click(function() {
        var icon_div = $(this);
        var input_div = $(this).parent().next();
        var input_elem = $(input_div).find('input.ODRImageRenameInput');
        var img_elem = $(this).parent().parent().find('img.pure-img');

        if ( $(input_div).hasClass('ODRHidden') ) {
            // If the input for renaming the file is currently hidden, then show it
            $(icon_div).attr('title', "Stop renaming Image");
            $(input_div).removeClass('ODRHidden');
        }
        else {
            // If the input for renaming the file is currently visible, then hide it
            $(icon_div).attr('title', "Rename Image");
            $(input_div).addClass('ODRHidden');

            // Reset the contents of the input back to the image's current name
            $(input_elem).val( $(img_elem).attr('title') );
        }
    });

    $(".ODRImageRenameButton").unbind('click').click(function() {
        var image_div = $(this).parent().parent();
        var icon_div = $(image_div).find('.ODRImageRenameTrigger');

        var input_elem = $(image_div).find('input.ODRImageRenameInput');
        var input_div = $(input_elem).parent();
        var img_elem = $(image_div).find('img.pure-img');

        var id_data = $(image_div).attr('id').split(/_/);
        var image_id = id_data[1];

        var url  = '{{ path('odr_record_rename_image', {'image_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += image_id;

        var filename = $(input_elem).val();

        var form = $("<form>", {});
        var element = $("<input>", {"value": filename, "name": "filename"});
        $(form).append(element);
        var form_data = $(form).serialize();

        $.ajax({
            cache: false,
            type: 'POST',
            url: url,
            dataType: "json",
            data: form_data,
            success: function(data, textStatus, jqXHR) {
                // Update the displayed name of the image
                $(img_elem).attr('title', filename);

                // Reset visibility
                $(input_div).addClass('ODRHidden');
                $(icon_div).attr('title', "Rename Image");
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    {# These two are to handle the FileRenamer and FileHeaderInserter plugins #}
    {# While theoretically they shouldn't be in edit_ajax, the way those plugins are currently implemented makes that impossible... #}
    $(".ODRFileRenamer_rebuild").unbind('click').click(function() {
        var id_data = $(this).parents('form').first().attr('id').split('_');
        var dr_id = id_data[1];
        var df_id = id_data[2];

        var url = "{{ path('odr_plugin_file_renamer_rebuild', {'dr_id': 0, 'df_id': 0}) }}";
        url = url.substr(0, url.length-3);
        url += dr_id + '/' + df_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data) {
                // Reload the datafield so the new filenames show up
                ReloadEditDatafield(dr_id, df_id);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function (jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    });

    $(".ODRFileHeaderInserter_rebuild").unbind('click').click(function() {
        var id_data = $(this).parents('form').first().attr('id').split('_');
        var dr_id = id_data[1];
        var df_id = id_data[2];

        var url = "{{ path('odr_plugin_file_header_inserter_rebuild', {'dr_id': 0, 'df_id': 0}) }}";
        url = url.substr(0, url.length-3);
        url += dr_id + '/' + df_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data) {
                // Reload the datafield so the new filenames show up
                ReloadEditDatafield(dr_id, df_id);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function (jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    });

    $("select.ODRFileQuality_selector, input.ODRFileQuality_selector").unbind('change').change(function() {
        handleQualityChange( $(this) );
    });
    $("i.ODRFileQuality_selector").unbind('click').click(function() {
        handleQualityChange( $(this) );
    });

    $(".ODRAddChildRecord").unbind('click').click(function() {
        var rel = $(this).attr('rel').split(/_/);
        var datatype_id = rel[0];
        var parent_datarecord_id = rel[1];

        AddChildRecord(datatype_id, parent_datarecord_id);
    });

    $(".ODRAddLinkedRecord").unbind('click').click(function() {
        var rel = $(this).attr('rel').split(/_/);
        var datatype_id = rel[0];
        var parent_datarecord_id = rel[1];

        AddLinkedRecord(datatype_id, parent_datarecord_id);
    });
    $(".ODROpenLinkSearch").unbind('click').click(function() {
        var rel = $(this).attr('rel').split(/_/);
        var ancestor_datatype_id = rel[0];
        var descendant_datatype_id = rel[1];
        var parent_datarecord_id = rel[2];

        OpenLinkSearchPage(ancestor_datatype_id, descendant_datatype_id, parent_datarecord_id);
    });

    $(".ODRPublicChildRecord").unbind('click').click(function() {
        var datarecord_id = $(this).attr('rel');
        ChangeRecordPublicStatus(datarecord_id);
    });

    $(".ODRPublicLinkedRecord").unbind('click').click(function() {
        var datarecord_id = $(this).attr('rel');
        ChangeRecordPublicStatus(datarecord_id);
    });

    $(".ODRUnlinkRecord").unbind('click').click(function() {
        if ( confirm('Are you sure you want to remove the link to this record?') ) {
            var url = '{{ path('odr_unlink_record') }}';

            // Store true parent record so we can reload parent
            var parent_data = $(this).closest(".ODRChildDatatype").attr('id').split(/_/);
            // console.log('Parent data: ', parent_data);

            var datatype_id = parent_data[1];
            var parent_id = parent_data[2];

            var container_data = $(this).closest(".ODRChildDatatype").closest(".ODRDataType").attr('id').split(/_/);

            var record_id = $(this).attr("rel");

            var post_data = {};
            post_data.ancestor_datatype_id = container_data[1];
            post_data.descendant_datatype_id = datatype_id;
            post_data.local_datarecord_id = parent_id;
            post_data.post_type = 'JSON';
            post_data.datarecords = [
                record_id
            ];

            // console.log("Unlink post data: ", post_data);

            $.ajax({
                cache: false,
                type: 'POST',
                url: url,
                dataType: "json",
                data: post_data,
                success: function(data, textStatus, jqXHR) {
                    // Refresh child wrapper area
                    // console.log('Unlink Record: ', data);
                    ReloadEditChild(datatype_id, parent_id);
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".ODRInlineLinkRecord.ODRFieldArea").each(function() {
        // Going to attach an jQuery UI autocomplete handler to every text/number datafield in this
        //  fieldarea belonging to an "InlineLink" record...
        $(this).find('.ODRLinkLookupInput'){#.effect("highlight", {}, 3000)#}.each(function() {
            if ( !$(this).hasClass('.ui-autocomplete-input') ) {
                // Create search parameters
                var input_elem = $(this);
                var local_record_id = $(this).closest('.ODRChildDatatype').closest('.ODRFieldArea').attr('id').split(/_/)[1];

                var ancestor_datatype_id = $(this).closest('.ODRChildDatatype').closest('.ODRDataType').attr('id').split(/_/)[1];
                var descendant_datatype_id = $(this).closest('.ODRDataType').attr('id').split(/_/)[1];
                var current_linked_record = $(this).closest('.ODRFieldArea').attr('id').split(/_/)[1];

                var inst = $(this).autocomplete({
                    minLength: 1,
                    source: function(request, response) {
                        // Determine parameters for post...
                        var datatype_id = $(input_elem).closest('.ODRDataType').attr('id').split(/_/)[1];
                        // console.log('Datatype to autocomplete:', datatype_id);

                        // Determine fields that have values...
                        var form_obj = {};
                        form_obj.dt_id = datatype_id;

                        $(input_elem).closest('.ODRFieldArea').find('.ODRLinkLookupInput').each(function() {
                            if ( $(this).hasClass('ODRInputError') )
                                form_obj.input_error = true;

                            var field_value = $(this).val().trim();
                            if ( $(this).is(':checkbox') ) {
                                if ( $(this).is(':checked') ) {
                                    // console.log('Checkbox Field: ', $(this).attr('id'));
                                    var field_id = $(this).attr('id').split(/_/)[2];
                                    form_obj[field_id] = field_value;

                                    // Set this here so that we can be sure a non-empty search value exists
                                    form_obj.ajax_request = true;
                                }
                            }
                            else {
                                if ( field_value !== "" ) {
                                    // console.log('Field: ', $(this).attr('id'));
                                    var field_id = $(this).attr('id').split(/_/)[2];
                                    form_obj[field_id] = field_value;

                                    // Set this here so that we can be sure a non-empty search value exists
                                    form_obj.ajax_request = true;
                                }
                            }

                            // TODO - modify so the search also submits radio options and tags?
                        });

                        // console.log('form obj: ', form_obj);
                        if ( form_obj.ajax_request === undefined ) {
                            // console.log('aborting, all input fields are blank');
                            $(".ODRAutocompleteSelect").parent().parent().hide();
                            return;
                        }
                        if ( form_obj.input_error !== undefined ) {
                            // console.log('aborting, validation error in input field');
                            $(".ODRAutocompleteSelect").parent().parent().hide();
                            return;
                        }

                        var url  = '{{ path('odr_inline_link_search') }}';
                        $.ajax({
                            cache: false,
                            type: 'POST',
                            data: form_obj,
                            url: url,
                            dataType: "json",
                            success: function(data, textStatus, jqXHR) {
                                // Let the autocomplete widget do things with the returned data
                                // console.log('Search post: ', data);
                                response( data.d );
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                // Don't need to do anything specific on an error
                            },
                            complete: function(jqXHR, textStatus) {
                                // Get the xdebugToken from response headers
                                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                                // If the Sfjs object exists
                                if (typeof Sfjs !== "undefined") {
                                    // Grab the toolbar element
                                    var currentElement = $('.sf-toolbar')[0];

                                    // Load the data of the given xdebug token into the current toolbar wrapper
                                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                                }
                            }
                        });
                    },
                    select: function (event, ui) {
                        // On Select - either save current data in a new record, or create a link
                        //  to the selected record
                        // console.log("Linking record: " + ui.item.record_id +
                        //     " to ancestor: " + ancestor_datatype_id +
                        //     ", descendant: " + descendant_datatype_id +
                        //     ", local_record_id: " + local_record_id
                        // );

                        if (ui.item.record_id === -2) {
                            // User can't create new datarecords in this linked datatype
                            // Do nothing
                        }
                        else if (ui.item.record_id === -1) {
                            // User wants to create a new record in this linked datatype
                            saveFakeRecordData(current_linked_record, true);
                        }
                        else {    // ui.item.record_id is greater than 0
                            // User selected an existing datarecord to link to
                            LinkRecordOnly(
                                ancestor_datatype_id,
                                descendant_datatype_id,
                                local_record_id,
                                ui.item.record_id,
                                function() {
                                    // Select the newly linked datarecord after ReloadEditChild()
                                    //  gets called
                                    selectRecordFieldArea(ui.item.record_id);
                                }
                            );
                        }

                        return false;
                    }
                });

                $(inst).autocomplete( "instance" )._renderItem = function( ul, item ) {
                    var html = '';
                    if (item.record_id < 0) {
                        html = $('<div id="Datarecord_Select_' + item.record_id + '" class="ODRAutocompleteSelect">');

                        if ( item.record_id == -1 )    // user allowed to add record
                            $(html).append('<span>Click here to create a new record.</span>');
                        else    // user not allowed to add record
                            $(html).append('<span>No Results Found.</span>');
                    }
                    else {
                        html = $('<div id="Datarecord_Select_' + item.record_id + '" class="ODRAutocompleteSelect">');
                        for (var x in item.fields) {
                            if (item.fields[x].field_value.toString().length > 30) {
                                $(html).append('<span class="ODRLinkingSearchTruncate">' + item.fields[x].field_value.toString().substring(0,30) + "...,</span> ");
                            }
                            else {
                                $(html).append('<span>' + item.fields[x].field_value + ",</span> ");
                            }
                        }
                    }

                    return $( "<li>" ).append(html).appendTo( ul );
                };

                $(inst).autocomplete( "instance" )._renderMenu = function( ul, items ) {
                    var has_results = false;
                    var that = this;
                    $.each( items, function( index, item ) {
                        that._renderItemData( ul, item );

                        if ( item.record_id > 0 )
                            has_results = true;
                    });

                    if ( has_results )
                        $(ul).addClass('ODRAutocomplete_blurb');
                    else
                        $(ul).removeClass('ODRAutocomplete_blurb');
                };

            }    /* END  if ( !$(this).hasClass('.ui-autocomplete-input') ) */
        });
    });

    $(".ODRDeleteLinkedRecord").unbind('click').click(function() {
        if ( confirm('This linked record may be used by other databases.  Are you absolutely certain you want to delete it?') ) {
            var datarecord_id = $(this).attr('rel');   // which data record to delete
            DeleteLinkedRecord(datarecord_id);
        }
    });

    $(".ODRDeleteChildRecord").unbind('click').click(function() {
        if ( confirm('Are you sure you want to delete this child record?') ) {
            var datarecord_id = $(this).attr('rel');   // which data record to delete
            DeleteChildRecord(datarecord_id);
        }
    });

    $(".SingleRadioGroup").unbind('click').click(function() {

        // Want to prevent sending unecessary ajax events...can't detect if option is already selected with is("checked")

        // If this belongs to a "fake" record, don't attempt to save
        if ( $(this).closest(".ODRFieldArea").hasClass("ODRFakeRecord") )
            return;
        // If already checked, do nothing
        if ( $(this).hasClass('ODRRadioOptionChecked') )
            return;

        // Update classes to track which radio option is selected
        $(this).parent().parent().find('input').each(function() {
            $(this).removeClass('ODRRadioOptionChecked');
        });
        $(this).addClass('ODRRadioOptionChecked');

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];
        var radio_option_id = id_data[3];

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't need to do anything on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on error, since can't restore the old value
                ReloadEditDatafield(datarecord_id, datafield_id);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".MultipleRadioGroup").unbind('click').click(function() {

        // If this belongs to a "fake" record, don't attempt to save
        if ( $(this).closest(".ODRFieldArea").hasClass("ODRFakeRecord") )
            return;

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];
        var radio_option_id = id_data[3];

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't need to do anything on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on error, since can't restore the old value
                ReloadEditDatafield(datarecord_id, datafield_id);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".SingleSelectGroup").unbind('change').change(function() {

        // If this belongs to a "fake" record, don't attempt to save
        if ( $(this).closest(".ODRFieldArea").hasClass("ODRFakeRecord") )
            return;

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        var radio_option_id = $(this).val();

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't need to do anything on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on error, since can't restore the old value
                ReloadEditDatafield(datarecord_id, datafield_id);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    {# NOTE - the lack of .MultipleSelectGroup is intentional...it's handled exactly the same as .MultipleRadioGroup #}

    {# Tag selections work on the same theory that a MultipleRadioGroup does #}
    $(".ODRTagEdit").unbind('click').click(function() {

        // If this belongs to a "fake" record, don't attempt to save
        if ( $(this).closest(".ODRFieldArea").hasClass("ODRFakeRecord") )
            return;

        var tag_input = $(this);
        var tag_item = $(tag_input).parent().parent();
        // console.log( 'tag input', tag_input, 'tag item', tag_item );

        // If the tag is getting deselected and has descendants...
        var descendants = $(tag_item).children('ul.ODRTagGroup');
        if ( !$(tag_input).is(':checked') && $(descendants).length > 0 ) {
            // ...determine how many it actually has
            var num = $(descendants).find('input.ODRTagEdit:checked').length;
            if ( num > 0 ) {
                // ...if it has at least one descendant, then also find the tag's name
                var tag_name = $(tag_input).next().html();
                // ...so the user can confirm they want to deselect multiple tags
                var okay = confirm('Deselecting the "' + tag_name + '" tag will also deselect > ' + num + ' < of its descendants.  Are you sure?');
                if ( !okay ) {
                    // If they don't want to deselect a pile of tags, then reset the checked status
                    $(tag_input).prop('checked', 'checked');
                    return;
                }
            }
        }

        var id_data = $(tag_input).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];
        var tag_id = id_data[3];

        var url  = '{{ path('odr_tag_selection', {'datarecord_id': 0, 'datafield_id': 0, 'tag_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + tag_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if ( $(tag_input).is(':checked') ) {
                    // If this tag is now selected, then it needs to gain the "ODRTagSelected" class
                    $(tag_item).addClass('ODRTagSelected');
                }
                else {
                    // If this tag is now deselected, then it needs to lose the "ODRTagSelected" class
                    $(tag_item).removeClass('ODRTagSelected');

                    // If the tag has descendants, then deselecting it in the Edit context means all
                    //  of its descendants should also be deselected now
                    if ( $(tag_item).children('ul.ODRTagGroup').length > 0 ) {
                        $(tag_item).find('li.ODRTagItem').removeClass('ODRTagSelected');
                        $(tag_item).find('input.ODRTagEdit').prop('checked', '');
                    }
                }

                // Need to recursively update the status of this tag's parent
                Edit_UpdateParentTagClass( $(tag_item) );
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on error, since can't restore the old value
                ReloadEditDatafield(datarecord_id, datafield_id);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    var context = $(".ODRRecord");
    var tag_filter_interval = [];
    $(context).find(".ODRSearchDatafieldFilter").unbind('change').unbind('keyup').unbind('paste').on('keyup paste', function() {
        var df = $(this).parents('.ODRDataField');
        var id_data = $(df).attr('id').split(/_/);
        var dr_id = id_data[1];
        var df_id = id_data[2];

        if ( tag_filter_interval[df_id] !== undefined )
            clearTimeout( tag_filter_interval[df_id] );

        tag_filter_interval[df_id] = setTimeout(function() {
            filterEditTagField(context, dr_id, df_id);
        }, 750);
    });

    var starting_datafield = null;
    $(".ODRSortableImage").sortable({

//        items: "> .image",
        start: function( event, ui ) {
            // Store which datafield the image belongs to
            starting_datafield = $(ui.item).parent().parent().parent().parent().attr('id');

            // Style the placeholder to more closely match the image being drug around
            $(ui.placeholder).addClass( $(ui.helper).attr('class') );
            $(ui.placeholder).css( 'height', $(ui.helper).height() );
            $(ui.placeholder).css( 'width', $(ui.helper).width() * 0.95 );
        },
        stop: function( event, ui ) {
            // Determine which datafield the image ended up in
            var ending_datafield = $(ui.item).parent().parent().parent().parent().attr('id');

            // If the image ended up in a different datafield, don't save the change and revert the layout
            if (starting_datafield == ending_datafield) {
                SaveImageOrder( $(ui.item).parent() );
            }
            else {
                $(".ODRSortableImage").sortable('cancel');
            }

            // jQuery Sortable attaches a display: block style to these elements...get rid of it
            $(ui.item).removeAttr('style');

            // Reset for the next sortable call
            starting_imagearea = null;
            $(ui.placeholder).removeAttr('css');
        },
//        placeholder: "ui-state-highlight",
        connectWith: ".ODRSortableImage",
    });
    $(".ODRSortableImage").disableSelection();


    $(".ODRDatePicker").datepicker({
        dateFormat: 'yy-mm-dd',
        changeMonth: true,
        changeYear: true,
        yearRange: "1800:+10",
        onClose: function() {
            $(this).blur();

            var form_id = $(this).parent().parent().parent().attr('id');
            SaveRecordData('#' + form_id, '');
        }
    });
    $(".ODRDatePicker_clear").unbind('click').click(function() {
        $(this).parent().parent().find(".ODRDatePicker").datepicker('setDate', null);

        var form_id = $(this).parent().parent().parent().attr('id');
        SaveRecordData('#' + form_id, '');
    });

    $(".ODRDataField").children("form").submit(function(event) {
        event.preventDefault();
    });

    $(".ODRAncestorBlurb").each(function(index,elem) {
        var is_link = false;
        if ( $(elem).attr('rel') === 'link' )
            is_link = true;

        var ancestor_elem = null;
        var ancestor_datatype = '';
        var ancestor_name = '';

        var dt = $(elem).parents('.ODRDataType').first();
        var parent_dr = $(dt).parents('.ODRFieldArea').first();
        var parent_dr_id = $(parent_dr).attr('id').split(/_/)[1];
        // console.log( $(elem), $(dt), $(parent_dr) );

        // Accordion/List headers have the record name in an <h3> element, before the $(parent_dr) div
        // Tabbed headers have a single .ODRTabButtonHeader div immediately after the <h3> element
        // Dropdown headers have a <select> inside the <h3> element
        if ( $(parent_dr).prev().is('h3') ) {
            // The parent is not a top-level record, and is currently displayed as an accordion/list header
            ancestor_elem = $(parent_dr).prev().find('.ODRRecordName');
            // ...this will also trigger for the first record in a dropdown header
            // console.log('parent is accordion/list');
        }
        else if ( $(parent_dr).parent().first().children('h3').length > 0 ) {
            // The parent is not a top-level record, and is being displayed as a dropdown or a
            //  tabbed header
            ancestor_elem = $(parent_dr).parent().first().children('h3').first().find('.ODRRecordName');
            // console.log('parent is dropdown/tabbed');

            // NOTE: the selector WILL NOT find the correct element for a tabbed header...this is
            //  dealt with in the next if statement
        }
        else {
            // The parent is the top-level record
            ancestor_name = $("#ODRRecordName_top").val();
            ancestor_datatype = $("#ODRRecordName_top").data('parent-name')
            // console.log( 'found ' + ancestor_datatype + ': "' + ancestor_name + '" as top-level' );
        }
        // console.log( $(ancestor_elem) );

        if ( ancestor_name === '' ) {
            if ( $(ancestor_elem).is('select') ) {
                // Ancestor name is in a <select> element...find the <option> that matches the parent
                //  datarecord's id
                ancestor_name = $(ancestor_elem).children('option[value=' + parent_dr_id + ']').text().trim();
                ancestor_datatype = $(ancestor_elem).data('parent-name')
                // console.log( 'found ' + ancestor_datatype + ': "' + ancestor_name + '" inside a select' );
            }
            else if ( $(ancestor_elem).length === 0 ) {
                // Ancestor name is in a <button> element
                ancestor_elem = $(parent_dr).parent().first().children('div.ODRTabButtonHeader').first();
                ancestor_name = $(ancestor_elem).children('button[rel=' + parent_dr_id + ']').html().trim();
                ancestor_datatype = $(ancestor_elem).data('parent-name')

                // console.log( 'found ' + ancestor_datatype + ': "' + ancestor_name + '" inside a button' );
            }
            else {
                // Ancestor name is in an <a> or <span> element
                ancestor_name = $(ancestor_elem).html().trim();
                ancestor_datatype = $(ancestor_elem).data('parent-name');
                // console.log( 'found ' + ancestor_datatype + ': "' + ancestor_name + '" inside a span' );
            }
        }

        if ( !is_link )
            $(elem).attr('title', 'Child of ' + ancestor_datatype + ': "' + ancestor_name + '"');
        else
            $(elem).attr('title', 'Linked to by ' + ancestor_datatype + ': "' + ancestor_name + '"');
    });

    $(".ODREditOpen").unbind('click').click(function() {
        var datarecord_id = $(this).attr('rel');

        var url = '{{ path('odr_record_edit', {'datarecord_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += datarecord_id;

        OpenURL(url);
    });
    $(".ODRToggleLinkedEdit").unbind('click').click(function(event) {
        event.preventDefault();
        event.stopImmediatePropagation();

        var child_datatype = $(this).parents('.ODRChildDatatype').first();
        var pieces = $(child_datatype).attr('id').split(/_/);
        var child_datatype_id = pieces[1];
        var parent_datarecord_id = pieces[2];

        var pieces = $(child_datatype).parents('.ODRDataType').first().attr('id').split(/_/);
        var parent_datatype_id = pieces[1];

        var edit_behavior_override = 0;
        if ( EditBehaviorLookup[parent_datatype_id] !== undefined && EditBehaviorLookup[parent_datatype_id][child_datatype_id] !== undefined ) {
            var current_edit_behavior = EditBehaviorLookup[parent_datatype_id][child_datatype_id];
            if ( current_edit_behavior === {{ TOGGLE_EDIT_INACTIVE }} ) {
                // Want a confirmation that the user knows they're entering edit mode
                var str = "This is a linked record, and usually the only reason to edit it directly is to fix typos.\n\n" +
                    "To change the record displayed here instead, use the unlinking icon in the far right of this header first before linking to a different record.\n\n" +
                    "Are you sure you want to edit this record?";
                if ( confirm(str) ) {
                    edit_behavior_override = {{ TOGGLE_EDIT_ACTIVE }};
                    ReloadEditChild(child_datatype_id, parent_datarecord_id, undefined, edit_behavior_override);
                }
            }
            else {
                // Don't want a confirm box when changing back to inactive
                edit_behavior_override = {{ TOGGLE_EDIT_INACTIVE }};
                ReloadEditChild(child_datatype_id, parent_datarecord_id, undefined, edit_behavior_override);
            }
        }
    });

    {# NOTE - this is sometimes useful #}
{#
    $(".ODRAccordionWrapper").unbind('click').click(function(event) {
        event.preventDefault();
        event.stopImmediatePropagation();

        var child_datatype = $(this).parents('.ODRChildDatatype').first();
        var pieces = $(child_datatype).attr('id').split(/_/);
        var child_datatype_id = pieces[1];
        var parent_datarecord_id = pieces[2];

        var pieces = $(child_datatype).parents('.ODRDataType').first().attr('id').split(/_/);
        var parent_datatype_id = pieces[1];

        ReloadEditChild(child_datatype_id, parent_datarecord_id);
    });
#}

    console.log('Init page done.');
}

/**
 * Filters the displayed options/tags for a field in Edit mode.
 *
 * @param {HTMLElement} context
 * @param {number} dr_id
 * @param {number} df_id
 */
function filterEditTagField(context, dr_id, df_id) {
    var filter_element = $(context).find("#edit_df_" + df_id + "_filter").first();
    // var fieldtype = $(filter_element).attr('rel');
    var filter_text = $(filter_element).val().trim().toLowerCase();

    // Tag fields could have a hierarchy...
    var tags = $(context).find("#Field_" + dr_id + '_' + df_id).find(".ODRTagItem");

    if ( filter_text == '' ) {
        // If no text in the filter, revert back to "partially collapsed" status
        $(tags).each(function(index,elem) {
            // Tags with this class, or top-level tags, should be the only ones visible after the
            //  filter gets cleared
            if ( $(elem).hasClass('ODRTagSelected') || !$(elem).parent().parent().hasClass('ODRTagItem') ) {
                $(elem).removeClass('ODRHidden');
                $(elem).children('ul.ODRTagGroup').removeClass('ODRHidden');
            }
            else {
                $(elem).addClass('ODRHidden');
                $(elem).children('ul.ODRTagGroup').addClass('ODRHidden');
            }

            // The indicator icon should also be reset
            $(elem).children('.ODRTagParent').each(function(index,span) {
                $(span).removeClass('ODRTagCollapsed').addClass('ODRTagPartialCollapsed');
                $(span).children('i').removeClass('fa-caret-down fa-caret-right').addClass('fa-ellipsis-h');
            });
        });
    }
    else {
        $(tags).each(function(index,elem) {
            // If this tag has children, then the indicator icon should be forced into "fully visible" status
            $(elem).children('.ODRTagParent').each(function(index,span) {
                $(span).removeClass('ODRTagPartialCollapsed ODRTagCollapsed');
                $(span).children('i').removeClass('fa-ellipsis-h fa-caret-right').addClass('fa-caret-down');
                $(span).next().next().removeClass('ODRHidden');
            });

            // The tag's name needs to be converted to lower case...
            var tag_name = $(elem).children('label').text().toLowerCase();

            // ...so it can get compared against the provided filter text
            if ( tag_name.indexOf(filter_text) === -1 ) {
                $(elem).addClass('ODRHidden');
            }
            else {
                // Display the tag even if it was initially hidden
                $(elem).removeClass('ODRHidden');

                // Also need to ensure that all parents of this tag are visible
                $(elem).parents('.ODRTagItem').removeClass('ODRHidden');
            }
        });
    }
}

/**
 * Recursively checks whether every ancestor of the given tag still need the "ODRTagSelected" class.
 *
 * @param {HTMLElement} tag_item The relevant $("li.ODRTagItem") element
 */
function Edit_UpdateParentTagClass(tag_item) {
    // console.log('Edit_UpdateParentTagClass() called with', tag_item);
    // If this is a top-level tag, do nothing
    if ( !$(tag_item).parent().parent().hasClass('ODRTagItem') ) {
        // console.log('tag is top-level, exiting recursion');
        notifySaved();
        return;
    }

    // Need to determine whether any of the given tag's siblings are still selected
    var parent_tag = $(tag_item).parent().parent();
    var parent_tag_input = $(parent_tag).children('label.ODRTagLabel').children('input.ODRTagEdit');

    var sibling_tags = $(tag_item).parent().children('li.ODRTagItem');
    // console.log('sibling tags: ', sibling_tags);

    var has_selection = false;
    $.each(sibling_tags, function(index,elem) {
        if ( $(elem).hasClass('ODRTagSelected') ) {
            has_selection = true;
            return false;
        }
    });
    // console.log('has_selection', has_selection);

    if ( has_selection ) {
        // If this tag or its siblings is selected, then ensure the parent tag is also selected
        $(parent_tag).addClass('ODRTagSelected');
        $(parent_tag_input).prop('checked', 'checked');
    }
    else {
        // Otherwise, the parent tag should be unselected
        $(parent_tag).removeClass('ODRTagSelected');
        $(parent_tag_input).prop('checked', '');
    }

    // Should recursively continue checking parent tags
    Edit_UpdateParentTagClass( parent_tag );
}

/**
 * Deletes the given file, cleans up the page, and optionally executes the given callback
 *
 * @param {number} file_id
 * @param {function} [callback]
 */
function DeleteFile(file_id, callback) {
    if (callback === undefined)
        callback = function() {}

    var file_div = $("#File_" + file_id);
    var filename = $(file_div).find('.ODRFileDownload').text();

    var str = "Are you certain that you want to delete this File?" + "\n";
    str = str + '"' + filename + '"';

    if ( confirm(str) ) {
        var url  = '{{ path('odr_record_delete_file', {'file_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += file_id;

        var tmp = $(file_div).parents(".ODRDataField").first().attr('id');
        tmp = tmp.split('_');
        var datarecord_id = tmp[1];
        var datafield_id = tmp[2];

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Going to need this
                var anchor = $(file_div).parent();

                // Remove file data from table area
                $(file_div).remove();

                // If that was the last file uploaded to the field, re-add the "no files uploaded" div
                if ( $(anchor).children(".ODRFileDatafield_file").length === 0 ) {
                    var html =
                        '<div class="ODRFileDatafield_empty pure-u-1">\n' +
                        '    <span class="ODRFileSpacer_empty">&nbsp;</span>\n' +
                        '    <a class="Cursor">No Files Uploaded</a>\n' +
                        '</div>';
                    $(anchor).append(html);
                }

                {# NOTE - this doesn't actually "reload" anything, just shows the upload div again #}
                if (data.d.need_reload == true) {
                    $("#ODRFileUpload_drf_" + datarecord_id + "_" + datafield_id + " input").prop('disabled', false);
                    $("#ODRFileUpload_drf_" + datarecord_id + "_" + datafield_id).parent().removeClass('ODRHidden');
                }

                // Run the given callback
                callback();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }
}

/**
 * Called when the quality of a file/image is changed
 * @param {HTMLElement} elem
 */
function handleQualityChange(elem) {
    var image_selector = false;
    var selection = 0;
    if ( $(elem).is('select') ) {
        selection = $(elem).val();
    }
    else if ( $(elem).is('input') ) {
        if ( $(elem).is(':checked') )
            selection = 1;
    }
    else if ( $(elem).is('i') ) {
        image_selector = true;

        // Need the value of the selected star...
        selection = $(elem).attr('rel');
        // ...and the quality value from before the click...
        var original_selection = $(elem).parent().attr('rel');
        // ...because if the user clicked the current star...
        if ( selection == original_selection ) {
            // ...then this is interpreted as "quality should be 0"
            selection = 0;
        }

        // The image element doesn't have the id...need the parent
        elem = $(elem).parent();
    }

    selection = parseInt( selection );

    var id_data = $(elem).attr('id').split(/_/);
    var typeclass = id_data[0];
    var entity_id = id_data[1];

    if ( typeclass === 'File' )
        var url = '{{ path('odr_record_file_quality', {'file_id': 0, 'quality': 0} ) }}';
    else
        var url = '{{ path('odr_record_image_quality', {'image_id': 0, 'quality': 0} ) }}';

    url = url.substring(0,(url.length-3));
    url += entity_id + '/' + selection;

    // Need these in case of an error...
    var id_data = $(elem).closest('.ODRDataField').attr('id').split(/_/);
    var datarecord_id = id_data[1];
    var datafield_id = id_data[2];

    // alert(url);  return;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            notifySaved();

            if ( image_selector ) {
                // Update the "current selection" for the image
                $(elem).attr('rel', selection);
                $(elem).children('i').each(function() {
                    var rel = parseInt( $(this).attr('rel') );
                    if ( rel > selection ) {
                        $(this).removeClass('fa-star').addClass('fa-star-o');
                        // console.log( rel + ' > ' + selection + ', deactivating' );
                    }
                    else {
                        $(this).removeClass('fa-star-o').addClass('fa-star');
                        // console.log( rel + ' <= ' + selection + ', activating' );
                    }
                });
            }

            // The other two types don't need extra javascript
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Reload the field on an error
            ReloadEditDatafield(datarecord_id, datafield_id);
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Saves the current order of all images inside the given container element
 *
 * @param {HTMLElement} container
 */
function SaveImageOrder(container) {
    // Create a javascript object containing the image ids so ajax can directly post it
    var i = 0;
    var image_ids = {};
    $(container).children().each(function() {
        // Want full-size image ids, not thumbnails
        var id_data = $(this).attr('id').split('_');
        image_ids[i] = id_data[1];
        i++;
    });

    var url = '{{ path('odr_record_save_image_order') }}';

    $.ajax({
        cache: false,
        type: 'POST',
        data: image_ids,
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Don't need to do anything on success
            notifySaved();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Creates a new child record of the given child datatype, belonging to the given parent datarecord.
 *
 * @param {number} child_datatype_id
 * @param {number} parent_datarecord_id
 */
function AddChildRecord(child_datatype_id, parent_datarecord_id) {
    var url = '{{ path('odr_record_addchild', { 'datatype_id': 0, 'parent_id': 0 } ) }}';
    url = url.substring(0, (url.length - 3));
    url += child_datatype_id + '/' + parent_datarecord_id;

    // ReloadEditChild(child_datatype_id, parent_datarecord_id); return;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Refresh child wrapper area
            var child_datatype_id = data.d.datatype_id;
            var parent_datarecord_id = data.d.parent_id;
            var new_datarecord_id = data.d.new_datarecord_id;

            ReloadEditChild(child_datatype_id, parent_datarecord_id, function() {
                selectRecordFieldArea(new_datarecord_id);
            });
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Requests information on which remote datarecords link to or are linked to by this local datarecord
 */
function OpenLinkInfoDialog(local_datarecord_id) {
    var url  = '{{ path('odr_record_get_linked_datarecords', {'local_datarecord_id': 0} ) }}';
    url = url.substring(0, (url.length - 1));
    url += local_datarecord_id;
    // alert(url);  return;

    showSearchOverlay();

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            $("#ODRRecordLinkInfoWrapperDiv").html(data.d.html);
            hideSearchOverlay();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't do anything on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Opens the page that allows users to search for and link/unlink multiple remote datarecords at
 * the same time.
 *
 * @param {number} ancestor_datatype_id
 * @param {number} descendant_datatype_id
 * @param {number} local_datarecord_id
 */
function OpenLinkSearchPage(ancestor_datatype_id, descendant_datatype_id, local_datarecord_id) {
    var url = '{{ path('odr_record_get_linkable_datarecords', { 'ancestor_datatype_id': 0, 'descendant_datatype_id': 0, 'local_datarecord_id': 0 } ) }}';
    url = url.substring(0, (url.length - 5));
    url += ancestor_datatype_id + '/' + descendant_datatype_id + '/' + local_datarecord_id;
    {% if search_key != '' %}
        url += '/' + '{{ search_theme_id }}' + '/' + '{{ search_key }}';
    {% endif %}

    UpdateURL(url);
}

/**
 * Creates a link between the local_datarecord and the remote_datarecord, if one doesn't already
 * exist.
 *
 * @param {number} ancestor_datatype_id
 * @param {number} descendant_datatype_id
 * @param {number} local_datarecord_id
 * @param {number} remote_datarecord_id
 * @param {function} [callback]
 */
function LinkRecordOnly(ancestor_datatype_id, descendant_datatype_id, local_datarecord_id, remote_datarecord_id, callback) {
    if (callback === undefined)
        callback = function() {}

    var post_data = {};
    post_data.ancestor_datatype_id = ancestor_datatype_id;
    post_data.descendant_datatype_id = descendant_datatype_id;
    post_data.local_datarecord_id = local_datarecord_id;
    post_data.post_type = 'JSON';
    post_data.post_action = 'ADD_ONLY';
    post_data.datarecords = [
        remote_datarecord_id
    ];
    // console.log('POST Data Link Record Only: ', post_data);

    var url = '{{ path('odr_link_datarecords') }}';
    $.ajax({
        type: 'POST',
        url: url,
        dataType: "json",
        data: post_data,
        success: function(data, textStatus, xhr) {
            if ( data['d']['has_secondary_datatree'] !== undefined ) {
                // If a "secondary" datatree is involved, then the record probably needs to show up
                //  on multiple parts of the page...just reload everything
                reloadPage();
            }
            else {
                // Otherwise, there's only one place to reload
                ReloadEditChild(data.d.datatype_id, data.d.datarecord_id, callback);
            }
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Triggers a reload of the given remote linked datatype with an additional "fake" record inserted
 * at the front of the list of remote datarecords.
 *
 * @param {number} remote_datatype_id
 * @param {number} parent_datarecord_id
 */
function AddLinkedRecord(remote_datatype_id, parent_datarecord_id) {

    var wrapper_div = $("#ChildTypeWrapper_" + remote_datatype_id + "_" + parent_datarecord_id);
    var theme_element_id = $(wrapper_div).parent().parent().attr('rel');
    var top_level_datarecord_id = $("#ODRTopLevelDatarecordId").val();

    var url = '{{ path('odr_record_inline_link', { 'theme_element_id': 0, 'parent_datarecord_id': 0, 'top_level_datarecord_id': 0 }) }}';
    url = url.substring(0, (url.length-5));
    url += theme_element_id + '/' + parent_datarecord_id + '/' + top_level_datarecord_id;

    // Need top-level datatype/datarecord/theme to be able to load the correct cached arrays in the
    //  case the user is reloading a child/linked datatype of a datatype that is itself a child/link.
    // The top-level datatype/theme can be determined from the theme_element.
    // The parent/child datatype/theme (required to stack the cached arrays at the right spot) can
    //  also be determined from the theme_element.

    insertLoadingDiv( $(wrapper_div).attr('id') );

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            var fake_dr_html = data.d.html;
            var fake_dr_id = data.d.fake_dr_id;

            // The returned html includes #ChildTypeWrapper...completely overwrite the contents of its parent div
            $("#ChildTypeWrapper_" + remote_datatype_id + "_" + parent_datarecord_id).parent(".ODRInnerBox").html(fake_dr_html);

            onWindowResize();
            setupImageGalleries();
            setupAccordions();
            initPage();

            // Ensure the fake reord is visible
            selectRecordFieldArea(fake_dr_id);
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Changes public status of the requested record.
 *
 * @param {number} datarecord_id
 */
function ChangeRecordPublicStatus(datarecord_id) {
    var url = '{{ path('odr_record_public', { 'datarecord_id': 0 }) }}';
    url = url.substring(0, (url.length - 1));
    url += datarecord_id;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Don't want to reload everything just to change one little icon...
            var header = $("#datarecord_" + data.d.datarecord_id + "_public");
            var title = $(header).attr('title');
            var new_title = title;

            if (data.d.public == 1) {
                $(header).addClass('ODRPublic');
                new_title = title.replace('not ', '');
            }
            else {
                $(header).removeClass('ODRPublic');
                new_title = title.substring(0, title.indexOf('Public')) + 'not Public';
            }

            $(header).attr('title', new_title);
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Soft-deletes the specified child datarecord.
 *
 * @param {number} datarecord_id
 */
function DeleteChildRecord(datarecord_id) {
    // The controller action will realize this is a child datarecord, and return the info
    //  so ReloadEditChild() can be called
    var url  = '{{ path('odr_record_delete', {'datarecord_id': 0, 'is_link': 0} ) }}';
    url = url.substring(0,(url.length - 3));
    url += datarecord_id + '/0';

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Refresh child wrapper area
            var datatype_id = data.d.datatype_id;
            var parent_id = data.d.parent_id;

            ReloadEditChild(datatype_id, parent_id);
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Soft-deletes the specified linked record.  This is NOT the same as unlinking the record!
 *
 * @param {number} datarecord_id
 */
function DeleteLinkedRecord(datarecord_id) {
    // The controller action needs to know this datarecord is being displayed as a linked
    //  descendant, so it can return the correct info for ReloadEditChild() to be called if desired
    var url  = '{{ path('odr_record_delete', {'datarecord_id': 0, 'is_link': 0} ) }}';
    url = url.substring(0,(url.length - 3));
    url += datarecord_id + '/1';

    // Store true parent record so we can reload parent
    var parent_data = $("#FieldArea_" + datarecord_id).closest(".ODRChildDatatype").attr('id').split(/_/);
    // console.log('Parent data: ', parent_data);

    var datatype_id = parent_data[1];
    var parent_id = parent_data[2];

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Refresh child wrapper area
            ReloadEditChild(datatype_id, parent_id);
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Attempts to save the change made to a datafield's value.
 *
 * @param {string} form_id
 * @param {number} interval
 * @param {function} [callback]
 */
function SaveRecordData(form_id, interval, callback) {
    // Callback is optional
    if (callback === undefined)
        callback = function() {}

    // Clear the save timeout for this specific datafield
    clearTimeout(interval);

    // Determine datarecord/datafield id in case of error
    var pieces = form_id.split('_');
    var datarecord_id = pieces[1];
    var datafield_id = pieces[2];

    // If form is in "autocomplete" - do nothing
    // Only check DataFields that are part of this FieldArea and one level deep
    var autocomplete = $(form_id).find('.ui-autocomplete-input');
    if (autocomplete.length > 0) {
        // console.log('autocomplete active.');
        return;
    }

    // Determine save type
    var post_data = $(form_id).serialize();
    var url = $(form_id).attr('action');

    // console.log('Save Form: ', form_id);
    $(form_id).find('.ODRSaveIndicator').fadeIn('50');

    // May need these in case of errors
    var input_div = $(form_id).find('div.ODRFieldWrapper');
    var input_id = $(input_div).find('input').attr('id');

    // ReloadEditDatafield(datarecord_id, datafield_id); return;

    $.ajax({
        type: 'POST',
        url: url,
        dataType: "json",
        data: post_data,
        success: function(data, textStatus, xhr) {
            if ( data.d.change_made ) {
                // Should trigger the save icon fading out here, since the callback could have a
                //  timeout attached to it
                $(form_id).find('.ODRSaveIndicator').fadeOut('350');

                // Remove any warnings about uniqueness conflicts
                $(form_id).removeClass('ODRInputError');
                // Could potentially be a jquery validate error message in here too...since the save
                //  finished successfully, remove all warning labels
                $(input_div).children('label').remove();

                callback();
            }
        },
        error: function(jqXHR, textStatus, errorThrown) {
            if ( jqXHR.status !== 409 ) {
                // Just reload the datafield on most errors, since can't restore the old value
                ReloadEditDatafield(datarecord_id, datafield_id);
            }
            else {
                // Otherwise, conflict error...don't want to reload the field because that tends to
                //  completely disrupts users that are trying to enter correct values
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Parses an InlineLink or a FakeEdit childtype for the values in the associated datafields.
 *
 * @param {number} descendant_datatype_id
 * @param {number} fake_record_id
 * @param {boolean} is_inline_link If true, then don't submit radio/tag fields
 *
 * @returns {object}
 */
function getFakeRecordData(descendant_datatype_id, fake_record_id, is_inline_link) {
    // User may have entered data in multiple fields, save them all at once
    var form_data = {};
    form_data.inline_link = 1;
    form_data.datatype_id = descendant_datatype_id;
    form_data.datarecord_id = fake_record_id;
    form_data.datafields = {};
    form_data.tokens = {};
    form_data.special_tokens = {};

    $("#FieldArea_" + fake_record_id).find('.ODRDataField').each(function() {
        var id_data = $(this).attr('id').split(/_/);
        var df_id = id_data[2];

        var form = $(this).children("form").first();
        var token = $(form).children('input[type=hidden]').val();

        var fieldset = $(form).children('fieldset').first();    // should only be one

        // ...determine what kind of field this is...
        if ( $(fieldset).find("div.ODRRadioOptionsEdit").length > 0 ) {
            // This is a Single/Multiple Radio or a Multiple Select field...ignore when called for an inline link submission
            if ( !is_inline_link ) {
                $(fieldset).find("input:checked").each(function(index, ro) {
                    var ro_id_data = $(ro).attr('id').split(/_/);
                    var ro_id = ro_id_data[3];

                    if ( ro_id !== '0') {
                        if (form_data.datafields[df_id] === undefined)
                            form_data.datafields[df_id] = {};

                        form_data.datafields[df_id][ro_id] = 1;
                        form_data.tokens[df_id] = token;
                    }
                });
            }
        }
        else if ( $(fieldset).children("div.ODRTagWrapper").length > 0 ) {
            // This is a tag field...ignore when called for an inline link submission
            if ( !is_inline_link ) {
                $(fieldset).find("input:checked").each(function(index, tag) {
                    var tag_id_data = $(tag).attr('id').split(/_/);
                    var tag_id = tag_id_data[3];

                    if ( tag_id !== '0') {
                        if (form_data.datafields[df_id] === undefined)
                            form_data.datafields[df_id] = {};

                        form_data.datafields[df_id][tag_id] = 1;
                        form_data.tokens[df_id] = token;
                    }
                });
            }
        }
        else if ( $(fieldset).find("select").length > 0 ) {
            // This is a Single Select field...ignore when called for an inline link submission
            if ( !is_inline_link ) {
                var selected = $(fieldset).find("select").children("option:selected");
                if ( $(selected).length > 0 ) {
                    var ro_id_data = $(selected).attr('id').split(/_/);
                    var ro_id = ro_id_data[1];

                    if ( ro_id !== '0' ) {
                        form_data.datafields[df_id] = {};
                        form_data.datafields[df_id][ro_id] = 1;
                        form_data.tokens[df_id] = token;
                    }
                }
            }
        }
        else if ( $(fieldset).find("textarea").length > 0 ) {
            // Paragraph text
            var textarea = $(fieldset).find("textarea");

            var val = $(textarea).val().trim();
            if (val !== '') {
                form_data.datafields[df_id] = val;
                form_data.tokens[df_id] = token;
            }
        }
        else if ( $(fieldset).find("input").length > 0 ) {
            var input = $(fieldset).find("input");

            if ( $(input).is(":checkbox") ) {
                // Boolean field
                if ( $(input).is(":checked") ) {
                    form_data.datafields[df_id] = 1;
                    form_data.tokens[df_id] = token;
                }
            }
            else {
                // Text/number/datetime fields
                var val = $(input).val().trim();
                if (val !== '') {
                    form_data.datafields[df_id] = val;
                    form_data.tokens[df_id] = token;
                }
            }
        }
        else {
            // Image or File field, ignore
        }
    });

    // For each special datafield on the page...
    $(".ODRFakeEdit_autogenerate").each(function(index, df) {
        var df_id = $(df).attr('rel');
        var token = $(df).val();

        form_data.special_tokens[df_id] = token;
    });

    return form_data;
}

/**
 * Attempts to save the current contents of an InlineLink or resultant FakeEdit child as a new
 * record.
 *
 * @param {string} fake_record_id
 * @param {boolean} is_inline_link
 */
function saveFakeRecordData(fake_record_id, is_inline_link) {
    // Need to locate these for later
    var fieldarea = $("#FieldArea_" + fake_record_id);
    var descendant_datatype_id = $(fieldarea).closest(".ODRDataType").attr('id').split(/_/)[1];

    var wrapper =  $(fieldarea).closest(".ODRChildDatatype");
    var local_record_id = $(wrapper).attr('id').split(/_/)[2];

    var ancestor_datatype_id = $(wrapper).closest(".ODRDataType").attr('id').split(/_/)[1];

    // Get the data out of the InlineLink or FakeEdit form
    var form_data = getFakeRecordData(descendant_datatype_id, fake_record_id, is_inline_link);

    var url  = '{{ path('odr_save_fake_record') }}';
    $.ajax({
        cache: false,
        type: 'POST',
        data: form_data,
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Create a link to the newly created datarecord
            var new_record_id = data.d.new_datarecord_id;

            LinkRecordOnly(
                ancestor_datatype_id,
                descendant_datatype_id,
                local_record_id,
                new_record_id,
                function() {
                    // Select the newly created datarecord after
                    //  ReloadEditChild() gets called
                    selectRecordFieldArea(new_record_id);
                }
            );
        },
        error: function(jqXHR, textStatus, errorThrown) {
            if ( is_inline_link ) {
                // Handling exceptions in the current context is difficult...users are using what
                //  looks like an Edit interface, but it's behaving like a search interface, except
                //  it also needs to have the ability to create a new linked datarecord

                // The Inline Link interface intentionally didn't display FakeEdit restrictions
                //  because they would've likely interfered with the search interface aspect...but
                //  if an error is thrown while attempting to save a new record, then the user no
                //  longer wants the search interface, so the FakeEdit interface can be loaded
                //  instead
                ReloadFakeEditChild(descendant_datatype_id, local_record_id, form_data);
            }
            else {
                // Otherwise, do nothing
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Covers the requested HTML element with an overlay div so click events don't work on it.
 *
 * @param {HTMLElement} parent_div_id
 */
function insertLoadingDiv(parent_div_id) {
    // Need dimensions of parent div...
    var element = $("#" + parent_div_id);
    var height = $(element).css('height');
    var width = $(element).css('width');

    // Create a loading div
    $(element).prepend("<div id=\"" + parent_div_id + "_loading_div\" class=\"ODROverlayDiv ODRReloadDiv\"><strong>Loading...</strong></div>");

    // Apply dimensions of parent div to loading div
    $("#" + parent_div_id + "_loading_div").css({"height": height, "line-height": height, "width": width});
}

/**
 * Triggers a reload of the child/linked datatype descended from the given parent_datarecord_id.
 *
 * @param {number} child_datatype_id
 * @param {number} parent_datarecord_id
 * @param {function} [callback]
 * @param {number} edit_behavior_override
 */
function ReloadEditChild(child_datatype_id, parent_datarecord_id, callback, edit_behavior_override) {
    // Callback is optional
    if (callback === undefined)
        callback = function() {}

    var wrapper_div = $("#ChildTypeWrapper_" + child_datatype_id + "_" + parent_datarecord_id);
    insertLoadingDiv( $(wrapper_div).attr('id') );

    var theme_element_id = $(wrapper_div).parent().parent().attr('rel');
    var top_level_datarecord_id = $("#ODRTopLevelDatarecordId").val();

    var url = '{{ path('odr_record_reload_child', { 'theme_element_id': 0, 'parent_datarecord_id': 0, 'top_level_datarecord_id': 0 }) }}';
    url = url.substring(0, (url.length-5));
    url += theme_element_id + '/' + parent_datarecord_id + '/' + top_level_datarecord_id;
    if ( edit_behavior_override !== undefined && (edit_behavior_override === {{ TOGGLE_EDIT_INACTIVE }} || edit_behavior_override === {{ TOGGLE_EDIT_ACTIVE }}) )
        url += '/' + edit_behavior_override;

    // alert(url);  return;

    // Need top-level datatype/datarecord/theme to be able to load the correct cached arrays in the
    //  case the user is reloading a child/linked datatype of a datatype that is itself a child/link.
    // The top-level datatype/theme can be determined from the theme_element.
    // The parent/child datatype/theme (required to stack the cached arrays at the right spot) can
    //  also be determined from the theme_element.

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // The returned html includes #ChildTypeWrapper...completely overwrite the contents of its parent div
            $(wrapper_div).parent(".ODRInnerBox").html(data.d.html);

            onWindowResize();
            setupImageGalleries();
            setupAccordions();
            initPage();
            callback();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * When the InlineLink system fails to save a new record, it's most likely due to not filling out
 * certain datafields in the datatype...the user can't be notified of these constraints in the
 * InlineLink interface because they would completely interfere with searching.
 *
 * However, once the user decides they want to add a new record, then searching no longer matters,
 * so any existing values in the InlineLink interface can get transferred over to a FakeEdit
 * interface so the user can set it up properly.
 *
 * @param {number} child_datatype_id
 * @param {number} parent_datarecord_id
 * @param {object} form_data
 */
function ReloadFakeEditChild(child_datatype_id, parent_datarecord_id, form_data) {

    var wrapper_div = $("#ChildTypeWrapper_" + child_datatype_id + "_" + parent_datarecord_id);
    insertLoadingDiv( $(wrapper_div).attr('id') );

    var theme_element_id = $(wrapper_div).parent().parent().attr('rel');
    var top_level_datarecord_id = $("#ODRTopLevelDatarecordId").val();

    var url = '{{ path('odr_fake_record_reload_child', { 'theme_element_id': 0, 'parent_datarecord_id': 0, 'top_level_datarecord_id': 0 }) }}';
    url = url.substring(0, (url.length-5));
    url += theme_element_id + '/' + parent_datarecord_id + '/' + top_level_datarecord_id;

    // Need top-level datatype/datarecord/theme to be able to load the correct cached arrays in the
    //  case the user is reloading a child/linked datatype of a datatype that is itself a child/link.
    // The top-level datatype/theme can be determined from the theme_element.
    // The parent/child datatype/theme (required to stack the cached arrays at the right spot) can
    //  also be determined from the theme_element.

    $.ajax({
        type: 'POST',
        url: url,
        dataType: "json",
        data: form_data,
        success: function(data, textStatus, jqXHR) {
            // The returned html includes #ChildTypeWrapper...completely overwrite the contents of its parent div
            $(wrapper_div).parent(".ODRInnerBox").html(data.d.html);

            onWindowResize();
            setupImageGalleries();
            setupAccordions();
            initPage();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Triggers a reload of the given datafield in the given datarecord.
 *
 * @param {number} datarecord_id
 * @param {number} datafield_id
 */
function ReloadEditDatafield(datarecord_id, datafield_id) {

    var datafield_div = $("#Field_" + datarecord_id + "_" + datafield_id);

    var url = '{{ path('odr_record_reload_datafield', { 'source_datarecord_id': initial_datarecord_id, 'datarecord_id': 0, 'datafield_id': 0 }) }}';
    url = url.substring(0, (url.length - 3));
    url += datarecord_id + '/' + datafield_id;

    $(datafield_div).children('form').each(function() {
        $(this).fadeOut();
        $(this).remove();
    });

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Insert the returned HTML back onto the page
            $(datafield_div).append(data.d.html);
            initPage();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Triggers a reload of the uploaded files in the given datarecord/datafield pair.
 *
 * @param {number|string} datarecord_id
 * @param {number|string} datafield_id
 */
function ReloadFileDatafield(datarecord_id, datafield_id) {
    var url = '{{ path('odr_record_reload_file_datafield', { 'datarecord_id': 0, 'datafield_id': 0 }) }}';
    url = url.substring(0, (url.length - 3));
    url += datarecord_id + '/' + datafield_id;

    var file_datafield_div = $("#Field_" + datarecord_id + "_" + datafield_id + " .ODRFileDatafield .ODRFileDatafield_content");

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Insert the HTML for the datafield back into the page
            $(file_datafield_div).html(data.d.html);
            initPage();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

</script>
