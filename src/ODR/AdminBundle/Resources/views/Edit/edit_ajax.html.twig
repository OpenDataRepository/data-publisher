{% spaceless %}

{% set datatype = datatype_array[initial_datatype_id] %}
{% set datarecord = datarecord_array[initial_datarecord_id] %}
{% set theme = theme_array[initial_theme_id] %}

{% set is_datatype_admin = false %}
{% if datatype_permissions[ datatype.id ] is defined and datatype_permissions[ datatype.id ][ 'dt_admin' ] is defined %}
    {% set is_datatype_admin = true %}
{% endif %}


{% include 'ODRAdminBundle:Default:view_manager.html.twig' with {
    'datatype': datatype,
    'theme': theme,
    'page_type': 'edit',
    'search_key': search_key,
} %}

{% include 'ODRAdminBundle:Edit:edit_area.html.twig' with {
    'datatype_array': datatype_array,
    'datarecord_array': datarecord_array,
    'theme_array': theme_array,

    'initial_datatype_id': initial_datatype_id,
    'initial_datarecord_id': initial_datarecord_id,
    'initial_theme_id': initial_theme_id,

    'datatype_permissions': datatype_permissions,
    'datafield_permissions': datafield_permissions,

    'is_top_level': is_top_level,
    'token_list': token_list,
} %}


{% if is_datatype_admin %}
<div id="field_history_dialog_wrapper">
    {% include 'ODRAdminBundle:Edit:field_history_dialog.html.twig' %}
</div>
{% endif %}

<div id="download_files_dialog_wrapper">
    {% include 'ODRAdminBundle:Default:file_download_dialog.html.twig' %}
</div>
<div id="tag_edit_dialog_wrapper">
    {% include 'ODRAdminBundle:Edit:tag_wrapper_dialog.html.twig' with {
        'datarecord': datarecord
    } %}
</div>
{% endspaceless %}

<script>

$(function() {

    // --------------------
    // Only need to do this stuff once?

    // Resize all elements dependent on window size
    $(window).unbind('resize').resize(function() {
        WindowResizeInterval = window.clearInterval(WindowResizeInterval);    // variable WindowResizeInterval defined in common.js
        WindowResizeInterval = window.setInterval("onWindowResize()", 500);
    });

    // Resize everything prior to divs being hidden
    onWindowResize();

    // Setup any image galleries in linked datarecords
    setupImageGalleries();

    // Hide divs for accordion purposes
    setupAccordions();
    setupAccordionHighlights();

{% if search_key == '' %}
    disableSearchSidebar();    {# defined in ODRAdminBundle:Default:common_js.html.twig #}
{% else %}
    enableSearchSidebar('{{ search_key }}');    {# defined in ODRAdminBundle:Default:common_js.html.twig #}
{% endif %}

    // --------------------
    initPage();
    $(".MenuDesignArea").remove();
    window.scrollTo(0,0);

    {% if notify_of_sync is defined and notify_of_sync == true %}
    {% include 'ODRAdminBundle:Theme:theme_sync_warning.js.twig' with {
        'datatype_id': datatype.id,
        'theme_id': theme.id,
        'search_key': search_key,
    }%}
    {% endif %}
});


var SaveTimeout = 1000;
function initPage() {

    // Attach click handlers to tags
    setupTagTree();

    $(".ODRTagsEdit").unbind('click').click(function() {
        {# defined in ODRAdminBundle:Edit:tag_wrapper_dialog.html.twig #}
        var datafield_id = $(this).attr('rel');
        openTagEditDialog(datafield_id);
    });


    $(".ODRFileDownloadProgress").hide();

    $("a.ODRFileDownload").unbind('click').click(function(event) {
        // Grab necessary attributes
        var file_id = $(this).attr('rel');

        handleFileDownload(event, file_id);    // defined in Default::file_handling.html.twig
    });

    $(".ODRDownloadAllFiles").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        // Grab necessary attributes
        var element = $(this);

        var id_data = $(this).closest(".ODRDataField").first().attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        $("#dialog_file_downloads").dialog( "open" );
        locateFileIds({{ initial_datarecord_id }}, datarecord_id, datafield_id);      // defined in ODRAdminBundle:Default:file_download_dialog.html.twig
    });

{% if is_datatype_admin %}
    $(".ODRDatafieldHistory").unbind('click').click(function(event) {
        // Don't trigger whatever the click normally would have done (mostly for boolean fields)
        event.preventDefault();
        event.stopImmediatePropagation();

        // Grab relevant entity ids
        var id_data = $(this).parents('.ODRDataField').attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        openFieldHistoryDialog(datarecord_id, datafield_id);
    });
{% endif %}

    $(".ODRDeleteFile").unbind('click').click(function() {
        if ( confirm("Are you certain that you want to delete this File?") ) {
            var file_id = $(this).attr('rel');

            var url  = '{{ path('odr_record_delete_file', {'file_id': 0} ) }}';
            url = url.substring(0,(url.length-1));
            url += file_id;

            var tmp = $(this).parents(".ODRDataField").first().attr('id');
            tmp = tmp.split('_');
            var datarecord_id = tmp[1];
            var datafield_id = tmp[2];

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    // Remove file data from table area
                    $("#File_" + file_id).remove();

                    if (data.d.need_reload == true)
                        $("#ODRFileUpload_drf_" + datarecord_id + "_" + datafield_id).parent().show();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });


    $(".ODRPublicFile").parent().unbind('click').click(function(event) {
        // Grab necessary attributes
        var icon_div = $(this).children(".ODRPublicFile");
        var file_id = $(icon_div).attr('rel');
        var href = $(icon_div).closest('.ODRTruncateFilename').children('a.ODRFileDownload').first().attr('href');

        var public_div = $(icon_div).closest('.ODRFileDatafield_file').children('.ODRFileSpacer').first();

        // Don't change public status of file if it's currently being decrypted
        if ( pending_file_decryptions[file_id] != null || pending_file_decryptions[file_id] != undefined || file_decrypt_timeouts[file_id] != null || file_decrypt_timeouts[file_id] != undefined) {
            return false;
        }

        var download_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
        var decrypt_progress = $("#ODRFileDecrypt_" + file_id + "_progress");

        if ( $(public_div).hasClass('ODRFileSpacer_nonpublic') ) {
            // Show div for decryption progress
            $(download_div).css('visibility', 'visible');
            $(decrypt_progress).css('width', '100%');

            createFileDecryptProgressCheck(file_id, 0);     // do not download file after it finishes decrypting
        }

        var url  = '{{ path('odr_record_public_file', {'file_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += file_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if ( data.d.is_public ) {
                    // File is now public
                    $(public_div).removeClass('ODRFileSpacer_nonpublic').addClass('ODRFileSpacer_public');
                    $(icon_div).parent().children('span').first().html('File was made public on ' + data.d.public_date);
                }
                else {
                    // File is now non-public
                    $(public_div).removeClass('ODRFileSpacer_public').addClass('ODRFileSpacer_nonpublic');
                    $(icon_div).parent().children('span').first().html('File is not public');
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Stop checking decrypt progress when an error occurs
                file_decrypt_timeouts[ file_id ] = null;

                // Hide the css for the progressbar
                $(download_div).css('visibility', 'hidden');
                $(decrypt_progress).css('width', 0);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRDeleteImage").unbind('click').click(function() {

        if (confirm("Are you certain that you want to delete this Image?")) {
            var image_id = $(this).attr('rel');

            var url = '{{ path('odr_record_delete_image', { 'image_id': 0 } ) }}';
            url = url.substring(0, (url.length - 1));
            url += image_id;

            var tmp = $(this).parents(".ODRDataField").first().attr('id');
            tmp = tmp.split('_');
            var datarecord_id = tmp[1];
            var datafield_id = tmp[2];

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    // Will Cause removal from view
                    if (data.d.need_reload == true)
                        ReloadDatafield(datarecord_id, datafield_id);
                    else
                        $("#Image_" + image_id).remove();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".ODRPublicImage").unbind('click').click(function() {
        var image_id = $(this).attr('rel');

        var public_div = $(this);

        var url  = '{{ path('odr_record_public_image', {'image_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += image_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if ( data.d.is_public ) {
                    // Image is now public
                    $(public_div).addClass('ODRActiveIcon');
                    $(public_div).attr('title', 'Public since ' + data.d.public_date);
                }
                else {
                    // Image is now non-public
                    $(public_div).removeClass('ODRActiveIcon');
                    $(public_div).parent().next().attr('title', 'Image is not public');
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRRotateImage").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        var image_id = $(this).attr('rel');

        var direction = 1;
        if ( $(this).hasClass('fa-rotate-left') )
            direction = -1;

        var url  = '{{ path('odr_record_rotate_image', {'image_id': 0, 'direction': 1} ) }}';
        url = url.substring(0,(url.length-3));
        url += image_id + '/' + direction;

        // Allow only one 90 degree rotation of this image at a time
        $("#Image_" + image_id).find(".ODRRotateImage").addClass('fa-muted');

        var tmp = $(this).parents(".ODRDataField").first().attr('id');
        tmp = tmp.split('_');
        var datarecord_id = tmp[1];
        var datafield_id = tmp[2];

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Reload the image datafield
                ReloadDatafield(datarecord_id, datafield_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRPublicChildRecord").unbind('click').click(function() {
        var datarecord_id = $(this).attr('rel');

        var url = '{{ path('odr_record_public', { 'datarecord_id': 0 }) }}';
        url = url.substring(0, (url.length - 1));
        url += datarecord_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't want to reload everything just to change one little icon...
                var header = $("#datarecord_" + data.d.datarecord_id + "_public");
                var title = $(header).attr('title');
                var new_title = title;

                if (data.d.public == 1) {
                    $(header).addClass('ODRActiveIcon');
                    new_title = title.replace('not ', '');
                }
                else {
                    $(header).removeClass('ODRActiveIcon');
                    new_title = title.substring(0, title.indexOf('Public')) + 'not Public';
                }

                $(header).attr('title', new_title);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRUnlinkRecord").unbind('click').click(function() {
        if ( confirm('Are you sure you want to remove the link to this record?') ) {
            var datarecord_id = $(this).attr('rel');   // which data record to delete

            // Load display template menu
            var url = '{{ path('odr_unlink_record') }}';

            // Store true parent record so we can reload parent
            var parent_data = $(this).closest(".ODRChildDatatype").attr('id').split(/_/);
            console.log('Parent data: ', parent_data);

            var datatype_id = parent_data[1];
            var parent_id = parent_data[2];

            var container_data = $(this).closest(".ODRChildDatatype").closest(".ODRDataType").attr('id').split(/_/);

            var record_id = $(this).attr("rel");

            var post_data = {}
            post_data.ancestor_datatype_id = container_data[1];
            post_data.descendant_datatype_id = datatype_id;
            post_data.local_datarecord_id = parent_id;
            post_data.post_type = 'JSON';
            post_data.datarecords = [
                record_id
            ];

            console.log("Unlink post data: ", post_data);

            $.ajax({
                cache: false,
                type: 'POST',
                url: url,
                dataType: "json",
                data: post_data,
                success: function(data, textStatus, jqXHR) {
                    // Refresh child wrapper area
                    console.log('Unlink Record: ', data)

                    // var datatype_id = data.d.datatype_id;
                    // var parent_id = data.d.parent_id;

                    ReloadChild(datatype_id, parent_id);
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    var availableTags = [
        "ActionScript. Test of multi-line. What do we do = will the line expand?",
        "AppleScript",
        "Asp",
        "BASIC",
        "C",
        "C++",
        "Clojure",
        "COBOL",
        "ColdFusion",
        "Erlang",
        "Fortran",
        "Groovy",
        "Haskell",
        "Java",
        "JavaScript",
        "Lisp",
        "Perl",
        "PHP",
        "Python",
        "Ruby",
        "Scala",
        "Scheme"
    ];

    $(".ODRLinkLookupForm")
        .find('input[type="text"]').effect("highlight", {}, 3000)
        .closest('.ODRFieldArea')
        .each(function() {
            // Only auto-complete newly added children
            // console.log('preparing link system: ', $(this).attr('id'));
            var is_empty = true;
            // Only check DataFields that are part of this FieldArea and one level deep
            $(this)
                .find('.ODRThemeElement > .ODRInnerBox > .ODRDataField')
                .find('input[type="text"]')
                .each(
                    function() {
                        var elem = $(this);
                        if($(elem).val() !== "") {
                            is_empty = false;
                        }
                    }
                );

            // Need to check parent form...
            // Get Field ID - use to determine what to search
            if(!is_empty) {
                // console.log('not empty');

                $(this).prev().find('.fa-magic').remove();
            }

            if(is_empty) {
                // Add auto-suggest icon to header...
                if ($(this).prev().find('.DatatypeTools').find(".fa-magic").length < 1) {
                    $(this).prev().find('.DatatypeTools')
                        .append(
                            '<i ' +
                            'class="fa fa-magic Pointer tooltip" ' +
                            'title="Type in a field to search for an available record to link." ' +
                            '></i>'
                        );
                }





                $(this)
                    .find('.ODRThemeElement > .ODRInnerBox > .ODRDataField')
                    .find('input[type="text"]')
                    .each(function() {
                        if(!$(this).hasClass('.ui-autocomplete-input')) {
                            // Create search parameters
                            var input_elem = $(this);
                            var record_data = $(this).closest('.ODRChildDatatype').closest('.ODRFieldArea').attr('id').split(/_/);
                            var local_record_id = record_data[1];

                            record_data = $(this).closest('.ODRChildDatatype').closest('.ODRDataType').attr('id').split(/_/);
                            var ancestor_datatype_id = record_data[1];


                            var descendant_datatype_id = $(this).closest('.ODRDataType').attr('id').split(/_/)[1];
                            var current_linked_record = $(this).closest('.ODRFieldArea').attr('id').split(/_/)[1];
                            $(this).autocomplete({
                                // source: "search.php",
                                source: function(request, response) {
                                    // Determine search url and parameters
                                    // Can we do this without a search key? Please?

                                    // Build Post data...
                                    // Determine data type
                                    var datatype_id = $(input_elem).closest('.ODRDataType').attr('id').split(/_/)[1];
                                    console.log('Datatype to autocomplete:', datatype_id)

                                    // Determine fields that have values...
                                    var form_obj = {}
                                    form_obj.ajax_request = true;
                                    form_obj.dt_id = datatype_id;

                                    $(input_elem)
                                        .closest('.ODRFieldArea')
                                        .find('.ODRThemeElement > .ODRInnerBox > .ODRDataField')
                                        .find('input[type="text"]')
                                        .each(function() {
                                            if(($(this).val() !== "")) {
                                                console.log('Field: ', $(this).attr('id'))
                                                var field_id = $(this).attr('id').split(/_/)[2];
                                                form_obj[field_id] = $(this).val();
                                            }
                                        });

                                    console.log('form obj: ', form_obj);

                                    var url  = '{{ path('odr_search_results') }}';
                                    $.ajax({
                                        cache: false,
                                        type: 'POST',
                                        data: form_obj,
                                        url: url,
                                        dataType: "json",
                                        success: function(data, textStatus, jqXHR) {
                                            console.log('Search post: ', data)
                                            searchResultsAjax(data.d.search_key, response)
                                        },
                                        error: function(jqXHR, textStatus, errorThrown) {
                                            // Don't need to do anything specific on an error
                                        },
                                        complete: function(jqXHR, textStatus) {
                                            // Get the xdebugToken from response headers
                                            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                                            // If the Sfjs object exists
                                            if (typeof Sfjs !== "undefined") {
                                                // Grab the toolbar element
                                                var currentElement = $('.sf-toolbar')[0];

                                                // Load the data of the given xdebug token into the current toolbar wrapper
                                                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                                            }
                                        }
                                    });

                                },
                                minLength: 1,
                                select: function (event, ui) {
                                    // On Select - delete current record and link new one....
                                    console.log('Deleting empty record: ', current_linked_record);
                                    /*
                                    function LinkRecordOnly(
                                        ancestor_datatype_id,
                                        descendant_datatype_id,
                                        local_datarecord_id,
                                        record_id,
                                        */
                                    console.log("Linking record: " + ui.item.record_id +
                                        " to ancestor: " + ancestor_datatype_id +
                                        " , descendant: " + descendant_datatype_id +
                                        " , local_record_id: " + local_record_id
                                    );
                                    if(ui.item.record_id === -1) {
                                        // Remove autocomplete should allow save to go through
                                        console.log('removing: ', current_linked_record)
                                        var header = $("#FieldArea_" + current_linked_record).prev();
                                        header.find('.fa-magic').remove();

                                        console.log('val: ', $(input_elem).val());
                                        var form_id = $(input_elem).closest("form").attr('id');


                                        $("#FieldArea_" + current_linked_record)
                                            .find('.ODRThemeElement > .ODRInnerBox > .ODRDataField')
                                            .find('input[type="text"]')
                                            .each(function() {
                                                if (!$(this).hasClass('.ui-autocomplete-input')) {
                                                    $(this).autocomplete("destroy");
                                                    $(this).removeData('autocomplete');
                                                }
                                                console.log('id: ', form_id);
                                                SaveRecordData('#' + form_id, '');
                                            });
                                    }
                                    else {
                                        DeleteLinkedRecord(current_linked_record, false);
                                        LinkRecordOnly(
                                            ancestor_datatype_id,
                                            descendant_datatype_id,
                                            local_record_id,
                                            ui.item.record_id,
                                            function() {
                                                var field_area = $("#FieldArea_" + ui.item.record_id)
                                                if(field_area.parent().hasClass("ODRDropdownAccordion")) {
                                                    field_area.parent().find(".ODRSelect").val(ui.item.record_id).change();
                                                }
                                                else if(field_area.parent().hasClass("ODRTabAccordion")) {
                                                    field_area.parent().find(".ODRTabButton").each(function() {
                                                        if($(this).attr('rel').toString() === ui.item.record_id.toString()) {
                                                            $(this).click();
                                                        }
                                                    });
                                                }
                                                else {
                                                    field_area.prev().click();
                                                }
                                            }
                                        )
                                    }
                                    return false
                                }
                            })
                            .autocomplete( "instance" )._renderItem = function( ul, item ) {
                                if(item.record_id === -1) {
                                    var html = $('<div id="Datarecord_Select_' + item.record_id + '">');
                                    $(html).append('<span>No Results Found - Click to save record.</span>');
                                    return $( "<li>" )
                                        .append(html)
                                        .appendTo( ul );

                                }
                                else {
                                    var html = $('<div id="Datarecord_Select_' + item.record_id + '">');
                                    for(var x in item.fields) {
                                        if(item.fields[x].field_value.toString().length > 30) {
                                            $(html).append('<span class="ODRLinkingSearchTruncate">' + item.fields[x].field_value.toString().substring(0,30) + "...,</span> ");
                                        }
                                        else {
                                            $(html).append('<span>' + item.fields[x].field_value + ",</span> ");
                                        }
                                    }
                                    return $( "<li>" )
                                        .append(html)
                                        .appendTo( ul );
                                }
                            };

                        }
                    });
            }
        });

    function searchResultsAjax(search_key, response) {

        var url  = '{{ path('odr_search_render', {'search_theme_id': 0, 'search_key': ''} ) }}';
        // url = url.substring(0,(url.length - 1));
        url += search_key + "/0/linking_ajax";

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                console.log('Search Render: ', data)
                // Sort ant prepare data
                var output = []
                for(var x in data.d.html) {
                    var output_record = {};
                    var datarecord = data.d.html[x];

                    output_record = {};
                    output_record.record_id = datarecord.id
                    output_record.fields = []

                    if(
                        datarecord.dataRecordFields !== undefined
                        && Object.keys(datarecord.dataRecordFields).length > 0
                    ) {
                        var counter = 0;
                        for(var y in datarecord.dataRecordFields) {
                            let field = datarecord.dataRecordFields[y];
                            var field_data = {}
                            if(field.shortVarchar !== undefined) {
                                field_data.field_id = field.shortVarchar[0].id;
                                field_data.field_value = field.shortVarchar[0].value;
                                output_record.fields.push(field_data);
                            }
                            if(field.mediumVarchar !== undefined) {
                                field_data.field_id = field.mediumVarchar[0].id;
                                field_data.field_value = field.mediumVarchar[0].value;
                                output_record.fields.push(field_data);
                            }
                            if(field.longVarchar !== undefined) {
                                field_data.field_id = field.longVarchar[0].id;
                                field_data.field_value = field.longVarchar[0].value;
                                output_record.fields.push(field_data);
                            }
                            counter++;
                            if(counter > 7) {
                                break
                            }
                        }
                        output.push(output_record)
                    }
                }
                if(output.length === 0) {
                    output_record = {};
                    output_record.record_id = -1;
                    output_record.fields = []
                    output.push(output_record)

                }
                response( output )

            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function DeleteLinkedRecord(datarecord_id, reload) {
        if(reload === undefined) {
            reload = false;
        }

        // The controller action needs to know this datarecord is being displayed as a linked
        //  descendant, so it can return the correct info for ReloadChild() to be called if desired
        var url  = '{{ path('odr_record_delete', {'datarecord_id': 0, 'is_link': 0} ) }}';
        url = url.substring(0,(url.length - 3));
        url += datarecord_id + '/1';


        // Store true parent record so we can reload parent
        var parent_data = $("#FieldArea_" + datarecord_id).closest(".ODRChildDatatype").attr('id').split(/_/);
        console.log('Parent data: ', parent_data);

        var datatype_id = parent_data[1];
        var parent_id = parent_data[2];

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Refresh child wrapper area
                console.log('Delete Unlink Record: ', data);
                if (reload) {
                    ReloadChild(datatype_id, parent_id);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    $(".ODRDeleteLinkedRecord").unbind('click').click(function() {
        if ( confirm('This is a linked record that may be used by other databases.  Are you sure you want to delete this record?') ) {
            var datarecord_id = $(this).attr('rel');   // which data record to delete
            DeleteLinkedRecord(datarecord_id, true);
        }
    });

    $(".ODRDeleteChildRecord").unbind('click').click(function() {
        if ( confirm('Are you sure you want to delete this record?') ) {
            var datarecord_id = $(this).attr('rel');   // which data record to delete

            // The controller action will realize this is a child datarecord, and return the info
            //  so ReloadChild() can be called
            var url  = '{{ path('odr_record_delete', {'datarecord_id': 0, 'is_link': 0} ) }}';
            url = url.substring(0,(url.length - 3));
            url += datarecord_id + '/0';

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    // Refresh child wrapper area
                    var datatype_id = data.d.datatype_id;
                    var parent_id = data.d.parent_id;

                    ReloadChild(datatype_id, parent_id);
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".SingleRadioGroup").unbind('click').click(function() {

        // Want to prevent sending unecessary ajax events...can't detect if option is already selected with is("checked")

        // If already checked, do nothing
        if ( $(this).hasClass('ODRRadioOptionChecked') )
            return;

        // Update classes to track which radio option is selected
        $(this).parent().parent().find('input').each(function() {
            $(this).removeClass('ODRRadioOptionChecked');
        });
        $(this).addClass('ODRRadioOptionChecked');

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];
        var radio_option_id = id_data[3];

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't need to do anything on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on error, since can't restore the old value
                ReloadDatafield(datarecord_id, datafield_id);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".MultipleRadioGroup").unbind('click').click(function() {

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];
        var radio_option_id = id_data[3];

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't need to do anything on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on error, since can't restore the old value
                ReloadDatafield(datarecord_id, datafield_id);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".SingleSelectGroup").unbind('change').change(function() {

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        var radio_option_id = $(this).val();

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't need to do anything on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on error, since can't restore the old value
                ReloadDatafield(datarecord_id, datafield_id);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    {# NOTE - the lack of .MultipleSelectGroup is intentional...it's handled exactly the same as .MultipleRadioGroup #}

    {# Tag selections work on the same theory that a MultipleRadioGroup does #}
    $(".ODRTagEdit").unbind('click').click(function() {

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];
        var tag_id = id_data[3];

        var url  = '{{ path('odr_tag_selection', {'datarecord_id': 0, 'datafield_id': 0, 'tag_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + tag_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't need to do anything on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on error, since can't restore the old value
                ReloadDatafield(datarecord_id, datafield_id);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    var starting_datafield = null;
    $(".ODRSortableImage").sortable({

//        items: "> .image",
        start: function( event, ui ) {
            // Store which datafield the image belongs to
            starting_datafield = $(ui.item).parent().parent().parent().parent().attr('id');

            // Hide the image that is being dragged around
//            $(ui.helper).hide();
            // Style the placeholder to more closely match the image being drug around
            $(ui.placeholder).addClass( $(ui.helper).attr('class') );
            $(ui.placeholder).css( 'height', $(ui.helper).height() );
            $(ui.placeholder).css( 'width', $(ui.helper).width() * 0.95 );
        },
        stop: function( event, ui ) {
            // Determine which datafield the image ended up in
            var ending_datafield = $(ui.item).parent().parent().parent().parent().attr('id');

            // If the image ended up in a different datafield, don't save the change and revert the layout
            if (starting_datafield == ending_datafield) {
                SaveImageOrder( $(ui.item).parent() );
            }
            else {
                $(".ODRSortableImage").sortable('cancel');
            }

            // Unhide the object that was being dragged around
//            $(ui.item).show();

            // jQuery Sortable attaches a display: block style to these elements...get rid of it
            $(ui.item).removeAttr('style');

            // Reset for the next sortable call
            starting_imagearea = null;
            $(ui.placeholder).removeAttr('css');
        },
//        placeholder: "ui-state-highlight",
        connectWith: ".ODRSortableImage",
    });
    $( ".ODRSortableImage" ).disableSelection();


    $(".ODRDatePicker").datepicker({
        dateFormat: 'yy-mm-dd',
        changeMonth: true,
        changeYear: true,
        yearRange: "1800:+10",
        onClose: function() {
            $(this).blur();

            var form_id = $(this).parent().parent().parent().attr('id');
            SaveRecordData('#' + form_id, '');
        }
    });

    $(".ODRDatePicker_clear").unbind('click').click(function() {
        $(this).parent().parent().find(".ODRDatePicker").datepicker('setDate', null);

        var form_id = $(this).parent().parent().parent().attr('id');
        SaveRecordData('#' + form_id, '');
    });

    $(".ODRDataField").children("form").submit(function(event) {
        event.preventDefault();
    });

    console.log('Init page done.');
}


function SaveImageOrder(container) {

    // Create a javascript object containing the image ids so ajax can directly post it
    var i = 0;
    var image_ids = {};
    $(container).children().each(function() {
        // Want full-size image ids, not thumbnails
        var id_data = $(this).attr('id').split('_');
        image_ids[i] = id_data[1];
        i++;
    });

    var url = '{{ path('odr_record_save_image_order') }}';

    $.ajax({
        cache: false,
        type: 'POST',
        data: image_ids,
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Don't need to do anything on success
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function AddChildRecord(datatype_id, parent_id) {
    var url = '{{ path('odr_record_addchild', { 'datatype_id': 0, 'parent_id': 0 } ) }}';
    url = url.substring(0, (url.length - 3));
    url += datatype_id + '/' + parent_id;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Refresh child wrapper area
            var datatype_id = data.d.datatype_id;
            var parent_id = data.d.parent_id;

            ReloadChild(datatype_id, parent_id);
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function LinkRecord(ancestor_datatype_id, descendant_datatype_id, local_datarecord_id) {
    var url = '{{ path('odr_record_get_linkable_datarecords', { 'ancestor_datatype_id': 0, 'descendant_datatype_id': 0, 'local_datarecord_id': 0 } ) }}';
    url = url.substring(0, (url.length - 5));
    url += ancestor_datatype_id + '/' + descendant_datatype_id + '/' + local_datarecord_id;
    {% if search_key != '' %}
        url += '/' + '{{ search_theme_id }}' + '/' + '{{ search_key }}';
    {% endif %}

    UpdateURL(url);
}

function LinkRecordOnly(
    ancestor_datatype_id,
    descendant_datatype_id,
    local_datarecord_id,
    record_id,
    callback
) {
    if(callback === undefined) {
        callback = function() {}
    }

    var post_data = {}
    post_data.ancestor_datatype_id = ancestor_datatype_id;
    post_data.descendant_datatype_id = descendant_datatype_id;
    post_data.local_datarecord_id = local_datarecord_id;
    post_data.post_type = 'JSON';
    post_data.post_action = 'ADD_ONLY';
    post_data.datarecords = [
        record_id
    ];

    console.log('POST Data Link Record Only: ', post_data)

    // odr_link_datarecords
    var url = '{{ path('odr_link_datarecords') }}';
    $.ajax({
        type: 'POST',
        url: url,
        dataType: "json",
        data: post_data,
        success: function(data, textStatus, xhr) {
            // Don't need to do anything special on success
            console.log('LINK Response: ', data);

            // Insert the form into the page....
            ReloadChild(data.d.datatype_id, data.d.datarecord_id, callback);
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Just reload the datafield on error, since can't restore the old value
            console.log('LinkRecordOnly: Error:', errorThrown)
            // ReloadDatafield(datarecord_id, datafield_id);
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function AddLinkedRecord(ancestor_datatype_id, descendant_datatype_id, local_datarecord_id) {
    console.log("Ancestor: ", ancestor_datatype_id)
    console.log("Descendant: ", descendant_datatype_id)
    console.log('Local record: ', local_datarecord_id)

    // Add data record
    var url = '{{ path('odr_record_add', { 'datatype_id': 0 }) }}';
    url = url.substring(0, (url.length - 1));
    url += descendant_datatype_id;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Reload this area of the page
            var datarecord_id = data.d.datarecord_id;

            console.log('Record Created: ', datarecord_id);

            // Need to reload the child record after this...
            LinkRecordOnly(
                ancestor_datatype_id,
                descendant_datatype_id,
                local_datarecord_id,
                datarecord_id,
                function() {
                    var field_area = $("#FieldArea_" + datarecord_id)
                    if(field_area.parent().hasClass("ODRDropdownAccordion")) {
                        field_area.parent().find(".ODRSelect").val(datarecord_id).change();
                    }
                    else if(field_area.parent().hasClass("ODRTabAccordion")) {
                        field_area.parent().find(".ODRTabButton").each(function() {
                            if($(this).attr('rel') == datarecord_id) {
                                $(this).click();
                            }
                        });
                    }
                    else {
                        field_area.prev().click();
                    }
                }
            );
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function SaveRecordData(form_id, interval) {
    // Clear the save timeout for this specific datafield
    clearTimeout(interval);

    // Determine datarecord/datafield id in case of error
    var pieces = form_id.split('_');
    var datarecord_id = pieces[1];
    var datafield_id = pieces[2];

    // If form is in "autocomplete" - do nothing
    // Only check DataFields that are part of this FieldArea and one level deep
    var autocomplete = $(form_id).find('.ui-autocomplete-input');

    if (autocomplete.length > 0) {
        console.log('autocomplete active.');
        return;
    }

    // Determine save type
    var post_data = $(form_id).serialize();
    var url = $(form_id).attr('action');

    console.log('Save Form: ', form_id);
    $(form_id).find('.ODRSaveIndicator').fadeIn('50');

    $.ajax({
        type: 'POST',
        url: url,
        dataType: "json",
        data: post_data,
        success: function(data, textStatus, xhr) {
            // Don't need to do anything special on success
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Just reload the datafield on error, since can't restore the old value
            ReloadDatafield(datarecord_id, datafield_id);
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
            $(form_id).find('.ODRSaveIndicator').fadeOut('350');
        }
    });
}

function insertLoadingDiv(parent_div_id) {

    // Need dimensions of parent div...
    var element = $("#" + parent_div_id);
    var height = $(element).css('height');
    var width = $(element).css('width');

    // Create a loading div
    $(element).prepend("<div id=\"" + parent_div_id + "_loading_div\" class=\"ODROverlayDiv ODRReloadDiv\"><strong>Loading...</strong></div>");

    // Apply dimensions of parent div to loading div
    $("#" + parent_div_id + "_loading_div").css({"height": height, "line-height": height, "width": width});
}


function ReloadChild(child_datatype_id, parent_datarecord_id, callback) {
    if(callback === undefined) {
        callback = function() {}
    }
    var url = '{{ path('odr_record_reload_child', { 'child_datatype_id': 0, 'parent_datarecord_id': 0 }) }}';
    url = url.substring(0, (url.length-3));
    url += child_datatype_id + '/' + parent_datarecord_id;

    insertLoadingDiv("ChildTypeWrapper_" + child_datatype_id + "_" + parent_datarecord_id);

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // The returned html includes #ChildTypeWrapper...completely overwrite the contents of its parent div
            $("#ChildTypeWrapper_" + child_datatype_id + "_" + parent_datarecord_id).parent(".ODRInnerBox").html(data.d.html);

            console.log('onwindowresize')
            onWindowResize();
            console.log('setupimage galleries')
            setupImageGalleries();
            console.log('setup accordion')
            setupAccordions();
            console.log('init page')
            initPage();
            console.log('callback')
            // Open Record
            $("#ChildTypeWrapper_" + child_datatype_id + "_" + parent_datarecord_id).find("h3.ui-accordion-header").click();
            // Need to determine view style
            // Need to click appropriate selection....
            callback();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function ReloadDatafield(datarecord_id, datafield_id) {

    var datafield_div = $("#Field_" + datarecord_id + "_" + datafield_id);
    var theme_id = $(datafield_div).attr('rel');

    var url = '{{ path('odr_record_reload_datafield', { 'source_datarecord_id': initial_datarecord_id, 'datarecord_id': 0, 'datafield_id': 0 }) }}';
    url = url.substring(0, (url.length - 3));
    url += datarecord_id + '/' + datafield_id;

    $(datafield_div).children('form').each(function() {
        $(this).fadeOut();
        $(this).remove();
    });

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            $(datafield_div).append(data.d.html);
            initPage();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function ReloadFileDatafield(datarecord_id, datafield_id) {
    var url = '{{ path('odr_record_reload_file_datafield', { 'datarecord_id': 0, 'datafield_id': 0 }) }}';
    url = url.substring(0, (url.length - 3));
    url += datarecord_id + '/' + datafield_id;

    var file_datafield_div = $("#Field_" + datarecord_id + "_" + datafield_id + " .ODRFileDatafield");

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            $(file_datafield_div).html(data.d.html);
            initPage();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

</script>
