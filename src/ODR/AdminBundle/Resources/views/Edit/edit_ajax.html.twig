{% spaceless %}

{% set datatype = datatype_array[initial_datatype_id] %}
{% set datarecord = datarecord_array[initial_datarecord_id] %}

<div class="ODRFormHeader clearfix">
    {% for ancestor_id, ancestor_name in linked_datatype_ancestors %}
        {% if datatype_permissions[ ancestor_id ] is defined and datatype_permissions[ ancestor_id ][ 'dr_edit' ] is defined %}
            <button type="button" class="pure-button" onclick="LinkRecord({{ ancestor_id }},{{ datatype.id }},{{ datarecord.id }});">Link to {{ ancestor_name }}.</button>
        {% endif %}
    {% endfor %}

    {% for descendant_id, descendant_name in linked_datatype_descendants %}
        {% if datatype_permissions[ descendant_id ] is defined and datatype_permissions[ descendant_id ][ 'dr_edit' ] is defined %}
            <button type="button" class="pure-button" onclick="LinkRecord({{ datatype.id }},{{ descendant_id }},{{ datarecord.id }});">Link to {{ descendant_name }}.</button>
        {% endif %}
    {% endfor %}

    {% for dt_id, dt_name in disabled_datatype_links %}
        {% if datatype_permissions[ dt_id ] is defined and datatype_permissions[ dt_id ][ 'dr_edit' ] is defined %}
            <button type="button" class="pure-button pure-button-disabled" title="Unable to link to Datarecords of this Datatype because it does not have a Table Theme.">Link to {{ dt_name }}.</button>
        {% endif %}
    {% endfor %}
</div>


<h1 class="no-margin-top-phone">
    <span>Edit Record &raquo; {{ datatype.dataTypeMeta.shortName }}</span>
</h1>

{% include 'ODRAdminBundle:Edit:edit_area.html.twig' with {
    'datatype_array': datatype_array,
    'datarecord_array': datarecord_array,
    'theme_id': theme_id,

    'initial_datatype_id': initial_datatype_id,
    'initial_datarecord_id': initial_datarecord_id,

    'datatype_permissions': datatype_permissions,
    'datafield_permissions': datafield_permissions,

    'is_top_level': is_top_level,
    'token_list': token_list,
} %}

<div id="field_history_dialog_wrapper">
    {% include 'ODRAdminBundle:Edit:field_history_dialog.html.twig' %}
</div>

<div id="download_files_dialog_wrapper">
    {% include 'ODRAdminBundle:Default:file_download_dialog.html.twig' %}
</div>
{% endspaceless %}

<script>

$(function() {

    // --------------------
    // Only need to do this stuff once?

    // Resize all elements dependent on window size
    $(window).unbind('resize');
    $(window).resize(function() {
        WindowResizeInterval = window.clearInterval(WindowResizeInterval);      // variable WindowResizeInterval defined in common.js
        WindowResizeInterval = window.setInterval("onWindowResize()", 500);
    });

    // Resize everything prior to divs being hidden
    onWindowResize();

    // Setup any image galleries in linked datarecords
    setupImageGalleries();

    // Hide divs for accordion purposes
    setupAccordions();

    // Hide empty theme element divs
    $(".ODRThemeElement").each(function() {
        var has_children = false;
        $(this).find(".ODRDataField").each(function() {
            // Don't hide this theme element if it has datafields
            has_children = true;
        });

        $(this).find("button.pure-button").each(function() {
            // Also don't hide this theme element if child datatypes can be added
            has_children = true;
        });

        $(this).find(".ODRRenderPluginContent").each(function() {
            // Also don't hide the theme element if a render plugin exists
            has_children = true;
        });

        if (!has_children)
            $(this).css( "display", "none" );
    });

    // --------------------
    initPage();
    $(".MenuDesignArea").remove();
    window.scrollTo(0,0);

});


var SaveTimeout = 700;
function initPage() {

    $(".ODRFileDownloadProgress").hide();

    $("a.ODRFileDownload").unbind('click').click(function(event) {
        // Grab necessary attributes
        var file_id = $(this).attr('rel');
        var href = $(this).attr('href');

        var short_form = false;
//        var can_cancel = true;
        var can_cancel = false;
        handleFileDownload(event, file_id, href, short_form, can_cancel);    // defined in Default::file_handling.html.twig
    });

    $(".ODRDownloadAllFiles").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        // Grab necessary attributes
        var element = $(this);

        var id_data = $(this).closest(".ODRDataField").first().attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        $("#dialog_file_downloads").dialog( "open" );
        locateFileIds({{ initial_datarecord_id }}, datarecord_id, datafield_id);      // defined in ODRAdminBundle:Default:file_download_dialog.html.twig
    });

    $(".ODRDataField").find('.ODRDatafieldHistory').unbind('click').click(function(event) {

        // Don't trigger whatever the click normally would have done (mostly for boolean fields)
        event.preventDefault();
        event.stopImmediatePropagation();

        // Grab relevant entity ids
        var id_data = $(this).parents('.ODRDataField').attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        var url = '{{ path('odr_record_get_field_history', { 'datarecord_id': 0, 'datafield_id': 0 } ) }}';
        url = url.substring(0, (url.length - 3));
        url += datarecord_id + '/' + datafield_id;

        // TODO - File/Image/Radio fieldtypes?

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    $("#dialog_field_history .form_contents").html(data.d.html);
                    $("#dialog_field_history").dialog( "open" );
                }
                else if (data.r == 1) {
                    // Error occurred
                    alert( data.d );
                }
                else {
                    // not allowed
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
        
    });

    $(".ODRDeleteFile").unbind('click').click(function() {
        if ( confirm("Are you certain that you want to delete this File?") ) {
            var file_id = $(this).attr('rel');

            var url  = '{{ path('odr_record_delete_file', {'file_id': 0} ) }}';
            url = url.substring(0,(url.length-1));
            url += file_id;

            var tmp = $(this).parents(".ODRDataField").first().attr('id');
            tmp = tmp.split('_');
            var datarecord_id = tmp[1];
            var datafield_id = tmp[2];

//alert('datarecord: ' + datarecord_id + ', datafield: ' + datafield_id);
//return;

//alert( url );
//return;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    if(data.r == 0) {
                        // Remove file data from table area
                        $("#File_" + file_id).remove();

                        if (data.d.need_reload == true) {
                            //ReloadDatafield(datarecord_id, datafield_id);
                            $("#ODRFileUpload_drf_" + datarecord_id + "_" + datafield_id).parent().show();
                        }
                    }
                    else {
                        // An error has occurred.
                        // Show Error message dialog
                        alert(data.d);
                    }
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });


    $(".ODRPublicFile").unbind('click').click(function(event) {
        // Grab necessary attributes
        var icon_div = $(this);
        var file_id = $(icon_div).attr('rel');
        var href = $(icon_div).closest('.ODRTruncateFilename').children('a.ODRFileDownload').first().attr('href');

        var public_div = $(icon_div).closest('.ODRFileDatafield_file').children('.ODRFileSpacer').first();

        // Don't change public status of file if it's currently being decrypted
        if ( pending_file_decryptions[file_id] != null || pending_file_decryptions[file_id] != undefined || file_decrypt_timeouts[file_id] != null || file_decrypt_timeouts[file_id] != undefined) {
//            alert('in progress');
            return false;
        }

        if ( $(public_div).hasClass('ODRFileSpacer_nonpublic') ) {
            // Show div for decryption progress
            var download_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
            var decrypt_progress = $("#ODRFileDecrypt_" + file_id + "_progress");

            $(download_div).css('visibility', 'visible');
            $(decrypt_progress).css('width', '100%');

            createFileDecryptProgressCheck(file_id, 0);     // do not download file after it finishes decrypting
        }

        var url  = '{{ path('odr_record_public_file', {'file_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += file_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    if ( data.d.is_public ) {
                        // File is now public
                        $(public_div).removeClass('ODRFileSpacer_nonpublic').addClass('ODRFileSpacer_public');
                        $(icon_div).parent().children('span').first().html('File was made public on ' + data.d.public_date);
                    }
                    else {
                        // File is now non-public
                        $(public_div).removeClass('ODRFileSpacer_public').addClass('ODRFileSpacer_nonpublic');
                        $(icon_div).parent().children('span').first().html('File is not public');
                    }
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRDeleteImage").unbind('click').click(function() {

        if(confirm("Are you certain that you want to delete this Image?")) {
            var image_id = $(this).attr('rel');

            var url = '{{ path('odr_record_delete_image', { 'image_id': 0 } ) }}';
            url = url.substring(0, (url.length - 1));
            url += image_id;

            var tmp = $(this).parents(".ODRDataField").first().attr('id');
            tmp = tmp.split('_');
            var datarecord_id = tmp[1];
            var datafield_id = tmp[2];

//alert('datarecord: ' + datarecord_id + ', datafield: ' + datafield_id);
//return;

//alert( url );
//return;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    if(data.r == 0) {
                        // Will Cause removal from view
                        if (data.d.need_reload == true)
                            ReloadDatafield(datarecord_id, datafield_id);
                        else
                            $("#Image_" + image_id).remove();
                    }
                    else {
                        // An error has occurred.
                        // Show Error message dialog
                        alert(data.d);
                    }
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".ODRPublicImage").unbind('click').click(function() {
        var image_id = $(this).attr('rel');

        var public_div = $(this);

        var url  = '{{ path('odr_record_public_image', {'image_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += image_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {

                    if ( data.d.is_public ) {
                        // Image is now public
                        $(public_div).removeClass('IconRed');
                        $(public_div).attr('title', 'Public since ' + data.d.public_date);
                    }
                    else {
                        // Image is now non-public
                        $(public_div).addClass('IconRed');
                        $(public_div).parent().next().attr('title', 'Image is not public');
                    }

                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRRotateImage").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        var image_id = $(this).attr('rel');

        var direction = 1;
        if ( $(this).hasClass('fa-rotate-left') )
            direction = -1;

        var url  = '{{ path('odr_record_rotate_image', {'image_id': 0, 'direction': 1} ) }}';
        url = url.substring(0,(url.length-3));
        url += image_id + '/' + direction;

        // Allow only one 90 degree rotation of this image at a time
        $("#Image_" + image_id).find(".ODRRotateImage").addClass('fa-muted');

        var tmp = $(this).parents(".ODRDataField").first().attr('id');
        tmp = tmp.split('_');
        var datarecord_id = tmp[1];
        var datafield_id = tmp[2];

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    // Reload the image datafield
                    ReloadDatafield(datarecord_id, datafield_id);
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRPublicChildRecord").unbind('click').click(function() {
        var datarecord_id = $(this).attr('rel');

        var url = '{{ path('odr_record_public', { 'datarecord_id': 0 }) }}';
        url = url.substring(0, (url.length - 1));
        url += datarecord_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    // Don't want to reload everything just to change one little icon...
                    var header = $("#datarecord_" + data.d.datarecord_id + "_public");
                    var title = $(header).attr('title');
                    var new_title = title;

                    if (data.d.public == 1) {
                        $(header).removeClass('IconRed');
                        new_title = title.replace('not ', '');
                    }
                    else {
                        $(header).addClass('IconRed');
                        new_title = title.substring(0, title.indexOf('Public')) + 'not Public';
                    }

                    $(header).attr('title', new_title);

                }
                else {
                    // Error occurred
                    alert( data.d );
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });


    $(".ODRDeleteChildRecord").unbind('click').click(function() {
        if ( confirm('Are you sure you want to delete this DataRecord?') ) {
            var datatype_id = $(this).parent().attr('rel');
            var datarecord_id = $(this).attr('rel');   // which data record to delete

            // Load display template menu
            var url  = '{{ path('odr_record_deletechild', {'datarecord_id': 0, 'datatype_id': 0} ) }}';
            url = url.substring(0,(url.length - 3));
            url += datarecord_id + '/' + datatype_id;

//alert( url );
//return;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    if(data.r == 0) {
                        // Refresh child wrapper area
                        var datatype_id = data.d.datatype_id;
                        var parent_id = data.d.parent_id;

                        ReloadChild(datatype_id, parent_id);
                    }
                    else {
                        // An error has occurred.
                        // Show Error message dialog
                        alert(data.d);
                    }
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".SingleRadioGroup").unbind('click').click(function() {

        // Want to prevent sending unecessary ajax events...can't detect if option is already selected with is("checked")

        // If already checked, do nothing
        if ( $(this).hasClass('ODRRadioOptionChecked') )
            return;

        // Update classes to track which radio option is selected
        $(this).parent().parent().find('input').each(function() {
            $(this).removeClass('ODRRadioOptionChecked');
        });
        $(this).addClass('ODRRadioOptionChecked');

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];
        var radio_option_id = id_data[3];

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".MultipleRadioGroup").unbind('click').click(function() {

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];
        var radio_option_id = id_data[3];

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".SingleSelectGroup").unbind('change').change(function() {

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        var radio_option_id = $(this).val();

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    var starting_datafield = null;
    $(".ODRSortableImage").sortable({

//        items: "> .image",
        start: function( event, ui ) {
            // Store which datafield the image belongs to
            starting_datafield = $(ui.item).parent().parent().parent().parent().attr('id');

            // Hide the image that is being dragged around
//            $(ui.helper).hide();
            // Style the placeholder to more closely match the image being drug around
            $(ui.placeholder).addClass( $(ui.helper).attr('class') );
            $(ui.placeholder).css( 'height', $(ui.helper).height() );
            $(ui.placeholder).css( 'width', $(ui.helper).width() * 0.95 );
        },
        stop: function( event, ui ) {
            // Determine which datafield the image ended up in
            var ending_datafield = $(ui.item).parent().parent().parent().parent().attr('id');

            // If the image ended up in a different datafield, don't save the change and revert the layout
            if (starting_datafield == ending_datafield) {
//alert('legal');
                SaveImageOrder( $(ui.item).parent() );
            }
            else {
//alert('illegal');
                $(".ODRSortableImage").sortable('cancel');
            }

            // Unhide the object that was being dragged around
//            $(ui.item).show();

            // jQuery Sortable attaches a display: block style to these elements...get rid of it
            $(ui.item).removeAttr('style');

            // Reset for the next sortable call
            starting_imagearea = null;
            $(ui.placeholder).removeAttr('css');
        },
//        placeholder: "ui-state-highlight",
        connectWith: ".ODRSortableImage",
    });
    $( ".ODRSortableImage" ).disableSelection();


    $(".ODRDatePicker").datepicker({
        dateFormat: 'yy-mm-dd',
        changeMonth: true,
        changeYear: true,
        yearRange: "1800:+10",
        onClose: function() {
            $(this).blur();

            var form_id = $(this).parent().parent().parent().attr('id');
            SaveRecordData('#' + form_id, '');

        }
    });

    $(".ODRDatePicker_clear").unbind('click').click(function() {
        $(this).parent().parent().find(".ODRDatePicker").datepicker('setDate', null);

        var form_id = $(this).parent().parent().parent().attr('id');
        SaveRecordData('#' + form_id, '');
    });

}

function SaveImageOrder(container) {

    // Create a javascript object containing the image ids so ajax can directly post it
    var i = 0;
    var image_ids = {};
    $(container).children().each(function() {
        // Want full-size image ids, not thumbnails
        var id_data = $(this).attr('id').split('_');
        image_ids[i] = id_data[1];
        i++;
    });

    var url = '{{ path('odr_record_save_image_order') }}';

//alert( url );
//return;

    $.ajax({
        cache: false,
        type: 'POST',
        data: image_ids,
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function AddChildRecord(datatype_id, parent_id, grandparent_id) {
    var url = '{{ path('odr_record_addchild', { 'datatype_id': 0, 'parent_id': 0, 'grandparent_id': 0 } ) }}';
    url = url.substring(0, (url.length - 5));
    url += datatype_id + '/' + parent_id + '/' + grandparent_id;

//alert( url );
//return;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
                // Refresh child wrapper area
//                var new_datarecord_id = data.d.new_datarecord
                var datatype_id = data.d.datatype_id;
                var parent_id = data.d.parent_id;

                ReloadChild(datatype_id, parent_id);
            }
            else {
                // Error occurred
                alert( data.d.html );
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function LinkRecord(ancestor_datatype_id, descendant_datatype_id, local_datarecord_id) {
    var url = '{{ path('odr_record_get_linkable_datarecords', { 'ancestor_datatype_id': 0, 'descendant_datatype_id': 0, 'local_datarecord_id': 0 } ) }}';
    url = url.substring(0, (url.length - 5));
    url += ancestor_datatype_id + '/' + descendant_datatype_id + '/' + local_datarecord_id;
{% if search_key != '' %}
    url += '/' + '{{ search_key }}';
{% endif %}

//alert( url );
//return;

    UpdateURL(url);
}

function SaveRecordData(form_id, interval) {
    // Clear the save interval for this specific datafield...interval itself is defined by the variable "SaveTimeout" in this file
    if(interval != "") 
        interval = window.clearInterval(interval);

    // Determine save type
    var post_data = $(form_id).serialize();
    var url = $(form_id).attr('action');

//alert( url );
//alert( post_data );
//return;

    $.ajax({
        type: 'POST',
        url: url,
        dataType: "json",
        data: post_data,
        success: function(data, textStatus, xhr) {

            if(data.r == 0) {
/*
                // TODO - make this work again
                // Refresh Field
                $(the_form).find(".valid-icon").fadeIn();
                setTimeout(function() {
                    $(the_form).find(".valid-icon").fadeOut();
                }, 500);
*/
            }
            else if (data.r == 2) {
                // Revert back to old value
                var ids = form_id.split(/_/);
                var input_id = "#Input_" + ids[1] + "_" + ids[2];

                if (data.typeclass == 'LongText')
                    $(form_id).find(input_id).children('textarea').first().html( data.old_value );
                else
                    $(form_id).find(input_id).children('input').first().val( data.old_value );

                alert(data.error);
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function insertLoadingDiv(parent_div_id) {

    // Need dimensions of parent div...
    var element = $("#" + parent_div_id);
    var height = $(element).css('height');
    var width = $(element).css('width');

    // Create a loading div
    $(element).prepend("<div id=\"" + parent_div_id + "_loading_div\" class=\"ODROverlayDiv ODRReloadDiv\"><strong>Loading...</strong></div>");

    // Apply dimensions of parent div to loading div
    $("#" + parent_div_id + "_loading_div").css({"height": height, "line-height": height, "width": width});
}


function ReloadChild(child_datatype_id, parent_datarecord_id) {
    var url = '{{ path('odr_record_reload_child', { 'child_datatype_id': 0, 'parent_datarecord_id': 0 }) }}';
    url = url.substring(0, (url.length-3));
    url += child_datatype_id + '/' + parent_datarecord_id;

    // Remove the datatype that's getting reloaded
    //$("#ChildTypeWrapper_" + child_datatype_id + "_" + parent_datarecord_id).children(".ODRDataType").fadeOut().remove();
    insertLoadingDiv("ChildTypeWrapper_" + child_datatype_id + "_" + parent_datarecord_id);

//alert( url );
//return;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if (data.r == 0) {
                // The returned html includes #ChildTypeWrapper...completely overwrite the contents of its parent div
                $("#ChildTypeWrapper_" + child_datatype_id + "_" + parent_datarecord_id).parent(".ODRInnerBox").html(data.d.html);

                onWindowResize();
                setupImageGalleries();
                setupAccordions();
                initPage();
            }
            else {
                alert( data.d );
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function ReloadDatafield(datarecord_id, datafield_id) {

    var datafield_div = $("#Field_" + datarecord_id + "_" + datafield_id);
    var theme_id = $(datafield_div).attr('rel');

    var url = '{{ path('odr_record_reload_datafield', { 'datarecord_id': 0, 'datafield_id': 0 }) }}';
    url = url.substring(0, (url.length - 3));
    url += datarecord_id + '/' + datafield_id;

    $(datafield_div).children('form').each(function() {
        $(this).fadeOut();
        $(this).remove();
    });

//alert( url );
//return;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if (data.r == 0) {
                $(datafield_div).append(data.d.html);
                initPage();
            }
            else {
                alert( data.d );
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function ReloadFileDatafield(datarecord_id, datafield_id) {
    var url = '{{ path('odr_record_reload_file_datafield', { 'datarecord_id': 0, 'datafield_id': 0 }) }}';
    url = url.substring(0, (url.length - 3));
    url += datarecord_id + '/' + datafield_id;

    var file_datafield_div = $("#Field_" + datarecord_id + "_" + datafield_id + " .ODRFileDatafield");

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if (data.r == 0) {
                $(file_datafield_div).html(data.d.html);
                initPage();
            }
            else {
                alert( data.d );
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

</script>
