{% spaceless %}

{% set datatype = datatype_array[initial_datatype_id] %}
{% set datarecord = datarecord_array[initial_datarecord_id] %}

<div class="ODRFormHeader clearfix">
    {#
        {% for ancestor in linked_datatype_ancestors %}
            {% if datatype_permissions[ ancestor.id ] is defined and datatype_permissions[ ancestor.id ][ 'dr_edit' ] is defined %}
                <button type="button" class="pure-button" onclick="LinkRecord({{ ancestor.id }},{{ datatype.id }},{{ datarecord.id }});">Link to {{ ancestor.dataTypeMeta.shortName }} Records.</button>
            {% endif %}
        {% endfor %}

        {% for descendant in linked_datatype_descendants %}
            {% if datatype_permissions[ descendant.id ] is defined and datatype_permissions[ descendant.id ][ 'dr_edit' ] is defined %}
                <button type="button" class="pure-button" onclick="LinkRecord({{ datatype.id }},{{ descendant.id }},{{ datarecord.id }});">Link to {{ descendant.dataTypeMeta.shortName }} Records.</button>
            {% endif %}
        {% endfor %}

        {% for disabled in disabled_datatype_links %}
            {% if datatype_permissions[ disabled.id ] is defined and datatype_permissions[ disabled.id ][ 'dr_edit' ] is defined %}
                <button type="button" class="pure-button pure-button-disabled" title="Unable to link to Datarecords of this Datatype because it does not have a Table Theme.">Unable to link to {{ disabled.dataTypeMeta.shortName }} Records.</button>
            {% endif %}
        {% endfor %}
    #}
    </div>


<h1 class="no-margin-top-phone">
    <span>Edit Record &raquo; {{ datatype.dataTypeMeta.shortName }}</span>
</h1>

{% include 'ODRAdminBundle:Edit:edit_area.html.twig' with {
    'datatype_array': datatype_array,
    'datarecord_array': datarecord_array,
    'theme_array': theme_array,

    'initial_datatype_id': initial_datatype_id,
    'initial_datarecord_id': initial_datarecord_id,
    'initial_theme_id': initial_theme_id,

    'datatype_permissions': datatype_permissions,
    'datafield_permissions': datafield_permissions,

    'is_top_level': is_top_level,
    'token_list': token_list,
} %}

{#
<div id="field_history_dialog_wrapper">
    {% include 'ODRAdminBundle:Edit:field_history_dialog.html.twig' %}
</div>
#}
<div id="download_files_dialog_wrapper">
    {% include 'ODRAdminBundle:Default:file_download_dialog.html.twig' %}
</div>
{% endspaceless %}

<script>

$(function() {

    // --------------------
    // Only need to do this stuff once?

    // Resize all elements dependent on window size
    $(window).unbind('resize').resize(function() {
        WindowResizeInterval = window.clearInterval(WindowResizeInterval);      // variable WindowResizeInterval defined in common.js
        WindowResizeInterval = window.setInterval("onWindowResize()", 500);
    });

    // Resize everything prior to divs being hidden
    onWindowResize();

    // Setup any image galleries in linked datarecords
    setupImageGalleries();

    // Hide divs for accordion purposes
    setupAccordions();

    // --------------------
    initPage();
    $(".MenuDesignArea").remove();
    window.scrollTo(0,0);
});


var SaveTimeout = 700;
function initPage() {

    $(".ODRFileDownloadProgress").hide();

    $("a.ODRFileDownload").unbind('click').click(function(event) {
        // Grab necessary attributes
        var file_id = $(this).attr('rel');

        handleFileDownload(event, file_id);    // defined in Default::file_handling.html.twig
    });

    $(".ODRDownloadAllFiles").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        // Grab necessary attributes
        var element = $(this);

        var id_data = $(this).closest(".ODRDataField").first().attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        $("#dialog_file_downloads").dialog( "open" );
        locateFileIds({{ initial_datarecord_id }}, datarecord_id, datafield_id);      // defined in ODRAdminBundle:Default:file_download_dialog.html.twig
    });

{#
    $(".ODRDataField").find('.ODRDatafieldHistory').unbind('click').click(function(event) {

        // Don't trigger whatever the click normally would have done (mostly for boolean fields)
        event.preventDefault();
        event.stopImmediatePropagation();

        // Grab relevant entity ids
        var id_data = $(this).parents('.ODRDataField').attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        var url = '{{ path('odr_record_get_field_history', { 'datarecord_id': 0, 'datafield_id': 0 } ) }}';
        url = url.substring(0, (url.length - 3));
        url += datarecord_id + '/' + datafield_id;

        // TODO - File/Image/Radio fieldtypes?

        alert('NOT IMPLEMENTED');
        return;
//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    $("#dialog_field_history .form_contents").html(data.d.html);
                    $("#dialog_field_history").dialog( "open" );
                }
                else if (data.r == 1) {
                    // Error occurred
                    alert( data.d );
                }
                else {
                    // not allowed
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });
#}

    $(".ODRDeleteFile").unbind('click').click(function() {
        if ( confirm("Are you certain that you want to delete this File?") ) {
            var file_id = $(this).attr('rel');

            var url  = '{{ path('odr_record_delete_file', {'file_id': 0} ) }}';
            url = url.substring(0,(url.length-1));
            url += file_id;

            var tmp = $(this).parents(".ODRDataField").first().attr('id');
            tmp = tmp.split('_');
            var datarecord_id = tmp[1];
            var datafield_id = tmp[2];

//alert('datarecord: ' + datarecord_id + ', datafield: ' + datafield_id);
//return;

//alert( url );
//return;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    // Remove file data from table area
                    $("#File_" + file_id).remove();

                    if (data.d.need_reload == true)
                        $("#ODRFileUpload_drf_" + datarecord_id + "_" + datafield_id).parent().show();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });


    $(".ODRPublicFile").unbind('click').click(function(event) {
        // Grab necessary attributes
        var icon_div = $(this);
        var file_id = $(icon_div).attr('rel');
        var href = $(icon_div).closest('.ODRTruncateFilename').children('a.ODRFileDownload').first().attr('href');

        var public_div = $(icon_div).closest('.ODRFileDatafield_file').children('.ODRFileSpacer').first();

        // Don't change public status of file if it's currently being decrypted
        if ( pending_file_decryptions[file_id] != null || pending_file_decryptions[file_id] != undefined || file_decrypt_timeouts[file_id] != null || file_decrypt_timeouts[file_id] != undefined) {
//            alert('in progress');
            return false;
        }

        var download_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
        var decrypt_progress = $("#ODRFileDecrypt_" + file_id + "_progress");

        if ( $(public_div).hasClass('ODRFileSpacer_nonpublic') ) {
            // Show div for decryption progress
            $(download_div).css('visibility', 'visible');
            $(decrypt_progress).css('width', '100%');

            createFileDecryptProgressCheck(file_id, 0);     // do not download file after it finishes decrypting
        }

        var url  = '{{ path('odr_record_public_file', {'file_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += file_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if ( data.d.is_public ) {
                    // File is now public
                    $(public_div).removeClass('ODRFileSpacer_nonpublic').addClass('ODRFileSpacer_public');
                    $(icon_div).parent().children('span').first().html('File was made public on ' + data.d.public_date);
                }
                else {
                    // File is now non-public
                    $(public_div).removeClass('ODRFileSpacer_public').addClass('ODRFileSpacer_nonpublic');
                    $(icon_div).parent().children('span').first().html('File is not public');
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Stop checking decrypt progress when an error occurs
                file_decrypt_timeouts[ file_id ] = null;

                // Hide the css for the progressbar
                $(download_div).css('visibility', 'hidden');
                $(decrypt_progress).css('width', 0);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRDeleteImage").unbind('click').click(function() {

        if (confirm("Are you certain that you want to delete this Image?")) {
            var image_id = $(this).attr('rel');

            var url = '{{ path('odr_record_delete_image', { 'image_id': 0 } ) }}';
            url = url.substring(0, (url.length - 1));
            url += image_id;

            var tmp = $(this).parents(".ODRDataField").first().attr('id');
            tmp = tmp.split('_');
            var datarecord_id = tmp[1];
            var datafield_id = tmp[2];

//alert('datarecord: ' + datarecord_id + ', datafield: ' + datafield_id);
//return;

//alert( url );
//return;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    // Will Cause removal from view
                    if (data.d.need_reload == true)
                        ReloadDatafield(datarecord_id, datafield_id);
                    else
                        $("#Image_" + image_id).remove();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".ODRPublicImage").unbind('click').click(function() {
        var image_id = $(this).attr('rel');

        var public_div = $(this);

        var url  = '{{ path('odr_record_public_image', {'image_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += image_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if ( data.d.is_public ) {
                    // Image is now public
                    $(public_div).addClass('ODRActiveIcon');
                    $(public_div).attr('title', 'Public since ' + data.d.public_date);
                }
                else {
                    // Image is now non-public
                    $(public_div).removeClass('ODRActiveIcon');
                    $(public_div).parent().next().attr('title', 'Image is not public');
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRRotateImage").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        var image_id = $(this).attr('rel');

        var direction = 1;
        if ( $(this).hasClass('fa-rotate-left') )
            direction = -1;

        var url  = '{{ path('odr_record_rotate_image', {'image_id': 0, 'direction': 1} ) }}';
        url = url.substring(0,(url.length-3));
        url += image_id + '/' + direction;

        // Allow only one 90 degree rotation of this image at a time
        $("#Image_" + image_id).find(".ODRRotateImage").addClass('fa-muted');

        var tmp = $(this).parents(".ODRDataField").first().attr('id');
        tmp = tmp.split('_');
        var datarecord_id = tmp[1];
        var datafield_id = tmp[2];

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Reload the image datafield
                ReloadDatafield(datarecord_id, datafield_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRPublicChildRecord").unbind('click').click(function() {
        var datarecord_id = $(this).attr('rel');

        var url = '{{ path('odr_record_public', { 'datarecord_id': 0 }) }}';
        url = url.substring(0, (url.length - 1));
        url += datarecord_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't want to reload everything just to change one little icon...
                var header = $("#datarecord_" + data.d.datarecord_id + "_public");
                var title = $(header).attr('title');
                var new_title = title;

                if (data.d.public == 1) {
                    $(header).addClass('ODRActiveIcon');
                    new_title = title.replace('not ', '');
                }
                else {
                    $(header).removeClass('ODRActiveIcon');
                    new_title = title.substring(0, title.indexOf('Public')) + 'not Public';
                }

                $(header).attr('title', new_title);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRUnlinkRecord").unbind('click').click(function() {
        if ( confirm('Are you sure you want to remove the link to this record?') ) {
            var datarecord_id = $(this).attr('rel');   // which data record to delete

            // Load display template menu
            var url = '{{ path('odr_unlink_record') }}';

            // Store true parent record so we can reload parent
            var parent_data = $(this).closest(".ODRChildDatatype").attr('id').split(/_/);
            console.log('Parent data: ', parent_data);

            var datatype_id = parent_data[1];
            var parent_id = parent_data[2];

            var container_data = $(this).closest(".ODRChildDatatype").closest(".ODRDataType").attr('id').split(/_/);

            var record_id = $(this).attr("rel");

            var post_data = {}
            post_data.ancestor_datatype_id = container_data[1];
            post_data.descendant_datatype_id = datatype_id;
            post_data.local_datarecord_id = parent_id;
            post_data.post_type = 'JSON';
            post_data.datarecords = [
                record_id
            ];

            console.log("Unlink post data: ", post_data);

            $.ajax({
                cache: false,
                type: 'POST',
                url: url,
                dataType: "json",
                data: post_data,
                success: function(data, textStatus, jqXHR) {
                    // Refresh child wrapper area
                    console.log('Unlink Record: ', data)

                    // var datatype_id = data.d.datatype_id;
                    // var parent_id = data.d.parent_id;

                    ReloadChild(datatype_id, parent_id);
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".ODRDeleteLinkedRecord").unbind('click').click(function() {
        if ( confirm('This is a linked record that may be used by other databases.  Are you sure you want to delete this record?') ) {
            var datarecord_id = $(this).attr('rel');   // which data record to delete

            // Load display template menu
            var url  = '{{ path('odr_record_deletechild', {'datarecord_id': 0} ) }}';
            url = url.substring(0,(url.length - 1));
            url += datarecord_id;


            // Store true parent record so we can reload parent
            // var parent_data = $(this).parent().parent().parent().parent().parent().parent().attr('id').split(/_/);
            var parent_data = $(this).closest(".ODRChildDatatype").attr('id').split(/_/);
            console.log('Parent data: ', parent_data);

            var datatype_id = parent_data[1];
            var parent_id = parent_data[2];

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    // Refresh child wrapper area
                    console.log('Delete Unlink Record: ', data)

                    // var datatype_id = data.d.datatype_id;
                    // var parent_id = data.d.parent_id;

                    ReloadChild(datatype_id, parent_id);
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".ODRDeleteChildRecord").unbind('click').click(function() {
        if ( confirm('Are you sure you want to delete this record?') ) {
            var datarecord_id = $(this).attr('rel');   // which data record to delete

            // Load display template menu
            var url  = '{{ path('odr_record_deletechild', {'datarecord_id': 0} ) }}';
            url = url.substring(0,(url.length - 1));
            url += datarecord_id;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    // Refresh child wrapper area
                    var datatype_id = data.d.datatype_id;
                    var parent_id = data.d.parent_id;

                    ReloadChild(datatype_id, parent_id);
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".SingleRadioGroup").unbind('click').click(function() {

        // Want to prevent sending unecessary ajax events...can't detect if option is already selected with is("checked")

        // If already checked, do nothing
        if ( $(this).hasClass('ODRRadioOptionChecked') )
            return;

        // Update classes to track which radio option is selected
        $(this).parent().parent().find('input').each(function() {
            $(this).removeClass('ODRRadioOptionChecked');
        });
        $(this).addClass('ODRRadioOptionChecked');

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];
        var radio_option_id = id_data[3];

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't need to do anything on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on error, since can't restore the old value
                ReloadDatafield(datarecord_id, datafield_id);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".MultipleRadioGroup").unbind('click').click(function() {

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];
        var radio_option_id = id_data[3];

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't need to do anything on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on error, since can't restore the old value
                ReloadDatafield(datarecord_id, datafield_id);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".SingleSelectGroup").unbind('change').change(function() {

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecord_id = id_data[1];
        var datafield_id = id_data[2];

        var radio_option_id = $(this).val();

        var url  = '{{ path('odr_record_radio_selection', {'datarecord_id': 0, 'datafield_id': 0, 'radio_option_id': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + radio_option_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Don't need to do anything on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on error, since can't restore the old value
                ReloadDatafield(datarecord_id, datafield_id);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    {# NOTE - there is no .MultipleSelectGroup...it's handled exactly the same as .MultipleRadioGroup #}

    var starting_datafield = null;
    $(".ODRSortableImage").sortable({

//        items: "> .image",
        start: function( event, ui ) {
            // Store which datafield the image belongs to
            starting_datafield = $(ui.item).parent().parent().parent().parent().attr('id');

            // Hide the image that is being dragged around
//            $(ui.helper).hide();
            // Style the placeholder to more closely match the image being drug around
            $(ui.placeholder).addClass( $(ui.helper).attr('class') );
            $(ui.placeholder).css( 'height', $(ui.helper).height() );
            $(ui.placeholder).css( 'width', $(ui.helper).width() * 0.95 );
        },
        stop: function( event, ui ) {
            // Determine which datafield the image ended up in
            var ending_datafield = $(ui.item).parent().parent().parent().parent().attr('id');

            // If the image ended up in a different datafield, don't save the change and revert the layout
            if (starting_datafield == ending_datafield) {
                SaveImageOrder( $(ui.item).parent() );
            }
            else {
                $(".ODRSortableImage").sortable('cancel');
            }

            // Unhide the object that was being dragged around
//            $(ui.item).show();

            // jQuery Sortable attaches a display: block style to these elements...get rid of it
            $(ui.item).removeAttr('style');

            // Reset for the next sortable call
            starting_imagearea = null;
            $(ui.placeholder).removeAttr('css');
        },
//        placeholder: "ui-state-highlight",
        connectWith: ".ODRSortableImage",
    });
    $( ".ODRSortableImage" ).disableSelection();


    $(".ODRDatePicker").datepicker({
        dateFormat: 'yy-mm-dd',
        changeMonth: true,
        changeYear: true,
        yearRange: "1800:+10",
        onClose: function() {
            $(this).blur();

            var form_id = $(this).parent().parent().parent().attr('id');
            SaveRecordData('#' + form_id, '');
        }
    });

    $(".ODRDatePicker_clear").unbind('click').click(function() {
        $(this).parent().parent().find(".ODRDatePicker").datepicker('setDate', null);

        var form_id = $(this).parent().parent().parent().attr('id');
        SaveRecordData('#' + form_id, '');
    });

    $(".ODRDataField").children("form").submit(function(event) {
        event.preventDefault();
    });
}

function SaveImageOrder(container) {

    // Create a javascript object containing the image ids so ajax can directly post it
    var i = 0;
    var image_ids = {};
    $(container).children().each(function() {
        // Want full-size image ids, not thumbnails
        var id_data = $(this).attr('id').split('_');
        image_ids[i] = id_data[1];
        i++;
    });

    var url = '{{ path('odr_record_save_image_order') }}';

    $.ajax({
        cache: false,
        type: 'POST',
        data: image_ids,
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Don't need to do anything on success
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function AddChildRecord(datatype_id, parent_id) {
    var url = '{{ path('odr_record_addchild', { 'datatype_id': 0, 'parent_id': 0 } ) }}';
    url = url.substring(0, (url.length - 3));
    url += datatype_id + '/' + parent_id;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Refresh child wrapper area
            var datatype_id = data.d.datatype_id;
            var parent_id = data.d.parent_id;

            ReloadChild(datatype_id, parent_id);
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function LinkRecord(ancestor_datatype_id, descendant_datatype_id, local_datarecord_id) {
    var url = '{{ path('odr_record_get_linkable_datarecords', { 'ancestor_datatype_id': 0, 'descendant_datatype_id': 0, 'local_datarecord_id': 0 } ) }}';
    url = url.substring(0, (url.length - 5));
    url += ancestor_datatype_id + '/' + descendant_datatype_id + '/' + local_datarecord_id;
    {% if search_key != '' %}
        url += '/' + '{{ search_theme_id }}' + '/' + '{{ search_key }}';
    {% endif %}

    UpdateURL(url);
}

function LinkRecordOnly(
    ancestor_datatype_id,
    descendant_datatype_id,
    local_datarecord_id,
    record_id,
    callback
) {
    if(callback === undefined) {
        callback = function() {}
    }

    var post_data = {}
    post_data.ancestor_datatype_id = ancestor_datatype_id;
    post_data.descendant_datatype_id = descendant_datatype_id;
    post_data.local_datarecord_id = local_datarecord_id;
    post_data.post_type = 'JSON';
    post_data.post_action = 'ADD_ONLY';
    post_data.datarecords = [
        record_id
    ];

    console.log('POST Data Link Record Only: ', post_data)

    // odr_link_datarecords
    var url = '{{ path('odr_link_datarecords') }}';
    $.ajax({
        type: 'POST',
        url: url,
        dataType: "json",
        data: post_data,
        success: function(data, textStatus, xhr) {
            // Don't need to do anything special on success
            console.log('LINK Response: ', data);

            // Attach search handlers
            // If search chosen, delete added record and change to link...

            // odr_record_add for linked type

            // Link record to this datatype and record

            // Can we just get an empty form for this datatype?
            // Insert the form into the page....
            ReloadChild(data.d.datatype_id, data.d.datarecord_id);

            callback()
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Just reload the datafield on error, since can't restore the old value
            console.log('LinkRecordOnly: Error:', errorThrown)
            // ReloadDatafield(datarecord_id, datafield_id);
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });


}

function AddLinkedRecord(ancestor_datatype_id, descendant_datatype_id, local_datarecord_id) {
    console.log("Ancestor: ", ancestor_datatype_id)
    console.log("Descendant: ", descendant_datatype_id)
    console.log('Local record: ', local_datarecord_id)

    // Add data record
    var url = '{{ path('odr_record_add', { 'datatype_id': 0 }) }}';
    url = url.substring(0, (url.length - 1));
    url += descendant_datatype_id;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Reload this area of the page
            var datarecord_id = data.d.datarecord_id;

            console.log('Record Created: ', datarecord_id);


            // Need to reload the child record after this...
            LinkRecordOnly(
                ancestor_datatype_id,
                descendant_datatype_id,
                local_datarecord_id,
                datarecord_id
            );

            /*
            var url = '{{ path('odr_record_edit', { 'datarecord_id': 0 }) }}';
            url = url.substring(0, (url.length-1));
            url += datarecord_id;

            window.location = url;
            */
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function SaveRecordData(form_id, interval) {
    // Clear the save interval for this specific datafield...interval itself is defined by the variable "SaveTimeout" in this file
    if(interval != "") 
        interval = window.clearInterval(interval);

    // Determine datarecord/datafield id in case of error
    var pieces = form_id.split('_');
    var datarecord_id = pieces[1];
    var datafield_id = pieces[2];

    // Determine save type
    var post_data = $(form_id).serialize();
    var url = $(form_id).attr('action');

    console.log('saving data...');

    $.ajax({
        type: 'POST',
        url: url,
        dataType: "json",
        data: post_data,
        success: function(data, textStatus, xhr) {
            // Don't need to do anything special on success
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Just reload the datafield on error, since can't restore the old value
            ReloadDatafield(datarecord_id, datafield_id);
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function insertLoadingDiv(parent_div_id) {

    // Need dimensions of parent div...
    var element = $("#" + parent_div_id);
    var height = $(element).css('height');
    var width = $(element).css('width');

    // Create a loading div
    $(element).prepend("<div id=\"" + parent_div_id + "_loading_div\" class=\"ODROverlayDiv ODRReloadDiv\"><strong>Loading...</strong></div>");

    // Apply dimensions of parent div to loading div
    $("#" + parent_div_id + "_loading_div").css({"height": height, "line-height": height, "width": width});
}


function ReloadChild(child_datatype_id, parent_datarecord_id) {
    var url = '{{ path('odr_record_reload_child', { 'child_datatype_id': 0, 'parent_datarecord_id': 0 }) }}';
    url = url.substring(0, (url.length-3));
    url += child_datatype_id + '/' + parent_datarecord_id;

    // Remove the datatype that's getting reloaded
    //$("#ChildTypeWrapper_" + child_datatype_id + "_" + parent_datarecord_id).children(".ODRDataType").fadeOut().remove();
    insertLoadingDiv("ChildTypeWrapper_" + child_datatype_id + "_" + parent_datarecord_id);

//alert( url );
//return;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // The returned html includes #ChildTypeWrapper...completely overwrite the contents of its parent div
            $("#ChildTypeWrapper_" + child_datatype_id + "_" + parent_datarecord_id).parent(".ODRInnerBox").html(data.d.html);

            onWindowResize();
            setupImageGalleries();
            setupAccordions();
            initPage();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function ReloadDatafield(datarecord_id, datafield_id) {

    var datafield_div = $("#Field_" + datarecord_id + "_" + datafield_id);
    var theme_id = $(datafield_div).attr('rel');

    var url = '{{ path('odr_record_reload_datafield', { 'datarecord_id': 0, 'datafield_id': 0 }) }}';
    url = url.substring(0, (url.length - 3));
    url += datarecord_id + '/' + datafield_id;

    $(datafield_div).children('form').each(function() {
        $(this).fadeOut();
        $(this).remove();
    });

//alert( url );
//return;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            $(datafield_div).append(data.d.html);
            initPage();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function ReloadFileDatafield(datarecord_id, datafield_id) {
    var url = '{{ path('odr_record_reload_file_datafield', { 'datarecord_id': 0, 'datafield_id': 0 }) }}';
    url = url.substring(0, (url.length - 3));
    url += datarecord_id + '/' + datafield_id;

    var file_datafield_div = $("#Field_" + datarecord_id + "_" + datafield_id + " .ODRFileDatafield");

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            $(file_datafield_div).html(data.d.html);
            initPage();
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

</script>
