{% spaceless %}

<h1 class="no-margin-top-phone">
    <span>Group Permissions &raquo; {{ datatype.dataTypeMeta.shortName }} <i class="fa fa-lg fa-users ODRDatatypeGroupMembers Pointer" style="margin-left: 10px;" title="Show all Users that belong to Groups for this Datatype"></i></span>
</h1>

<div class="ODRContentWrapper pure-u-1">
    <div class="ODRThemeElement pure-u-1">
        <div class="ODRInnerBox pure-u-1">
            <h3 class="ODRHeader"><i class="fa fa-md fa-info-circle fa-fw"></i> Modify Group Permissions</h3>

            <div class="ODRBodyContent">
                <p>Use this interface to create, view, and edit all the groups for this database.</p>
            </div>

            <div id="ODRGroupListHeader" class="pure-u-1"></div>
        </div>
    </div>
</div>

<input type="hidden" id="datatype_id" value="{{ datatype.id }}" />

<div id="ThemeDesignWrapper">
    <div id="ThemeLeftColumn" class="ODRContentWrapper">
        <div class="ODRThemeElement">
            <div class="ODRInnerBox">
                <div class="pure-u-1"></div>
                <div class="pure-u-24-24"><h3 class="ODRHeader">Group Settings</h3></div>
                <div id="ThemeDesignForm"></div>
            </div>
        </div>
    </div>
    <div id="ThemeDesignArea">
        <div id="ODRGroupListContent" class="pure-u-1"></div>
    </div>
</div>

<script>
    var SaveTimeout = 1500;

    $(function() {
        disableSearchSidebar();    {# defined in ODRAdminBundle:Default:common_js.html.twig #}

        LoadGroupList({{ datatype.id }});

        // Resize all overlay divs on window size
        $(window).unbind('resize');
        $(window).resize(function() {
            WindowResizeInterval = window.clearInterval(WindowResizeInterval);
            WindowResizeInterval = window.setInterval("resizeOverlayDivs()", 50);
        });

        $(".ODRThemeListContentHeader").last().next().show();
    });

    function notifySaved() {
        $.jGrowl('SAVED');
    }

    var WindowResizeInterval = "";
    function resizeOverlayDivs() {
        WindowResizeInterval = window.clearInterval(WindowResizeInterval);

        // Attach an overlay div of sorts over each datafield
        $(".ODROverlayDiv").each(function() {
            // Need dimensions of parent div...
            var height = $(this).parent().css('height');
            var width = $(this).parent().css('width');

            // Apply dimensions of parent div to loading div
            $(this).css({"height": height, "line-height": height, "width": width});
        });
    }

    /**
     * Loads all groups for the given datatype.
     *
     * @param {number} datatype_id
     */
    function LoadGroupList(datatype_id) {
        var url = '{{ path('odr_load_group_list', { 'datatype_id': 0, } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datatype_id;

        // alert(url);  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                $("#ODRGroupListHeader").html(data.d.html).fadeIn('fast');
                InitHeader();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Initializes the header section of the Group Permissions page.
     */
    function InitHeader() {

        $(".ODRDatatypeGroupMembers").unbind('click').click(function() {

            // Clear the currently selected group indicator
            $(".ODREditGroup").removeClass('ODRActiveIcon');
            $(".ODRGroupMembers").removeClass('ODRActiveIcon');
            $("#ODRGroupPropertiesFormDiv").html('');

            // Grab the datatype id
            var datatype_id = $("#datatype_id").val();

            // Load user list for entire datatype
            var url = '{{ path('odr_datatype_group_membership', { 'datatype_id': 0 } ) }}';
            url = url.substring(0, (url.length - 1));
            url += datatype_id;

            // alert(url);  return;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data) {
                    $("#ODRGroupListContent").html(data.d).fadeIn('fast');
                    attachUserLinks();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {

                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        });

        $(".ODRAddGroup").unbind('click').click(function() {
            // Grab the datatype id
            var datatype_id = $("#datatype_id").val();

            // Load form for current datfield if not already loaded
            var url = '{{ path('odr_add_group', { 'datatype_id': 0 } ) }}';
            url = url.substring(0, (url.length - 1));
            url += datatype_id;

            // alert(url);  return;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data) {
                    // Remove permissions UI if it currently exists
                    if ( $(".ODRGroupListContentHeader") != undefined ) {
                        $(".ODRGroupListContentHeader").next().remove();
                        $(".ODRGroupListContentHeader").remove();
                    }

                    $("#ThemeDesignForm").html('');

                    // Reload the theme list html
                    LoadGroupList(datatype_id);
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {

                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        });

        $(".ODREditGroup").unbind('click').click(function() {
            // Clear the currently selected group indicator
            $(".ODRGroupMembers").removeClass('ODRActiveIcon');
            $("#ODRGroupPropertiesFormDiv").html('');
            $("#ThemeDesignForm").html('');

            $(".ODREditGroup").removeClass('ODRActiveIcon');
            $(this).addClass('ODRActiveIcon');

            // Grab the id of the group to load
            var group_id = $(this).attr('rel');

            // Load form for current group if not already loaded
            var url = '{{ path('odr_manage_group_permissions', { 'group_id': 0 } ) }}';
            url = url.substring(0, (url.length - 1));
            url += group_id;

            $("#ODRGroupListContent").html('');
            // alert(url);  return;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data) {
                    // Insert the returned html on the page
                    $("#ODRGroupListContent").html(data.d.html).fadeIn('fast');
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {

                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });

            // Might as well load the properties form for this group immediately
            var url = '{{ path('odr_group_properties', { 'group_id': 0 } ) }}';
            url = url.substring(0, (url.length - 1));
            url += group_id;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data) {
                    $("#ThemeDesignForm").html(data.d).fadeIn('fast');

                    if (data.prevent_all_changes != 1)
                        InitGroupPropertyForm();    // defined in permissions_wrapper.html.twig
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {

                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        });

        $(".ODRGroupMembers").unbind('click').click(function() {
            // Clear the currently selected group indicator
            $(".ODRGroupMembers").removeClass('ODRActiveIcon');
            $(this).addClass('ODRActiveIcon');

            var group_id = $(this).attr('rel');

            var url = '{{ path('odr_group_membership', {'group_id': 0}) }}';
            url = url.substring(0, (url.length - 1));
            url += group_id;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data) {
                    $("#ODRGroupPropertiesFormDiv").html(data.d).fadeIn('fast');
                    attachUserLinks();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {

                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        });

        $(".ODRDeleteGroup").each(function() {
            var group_id_data = $(this).attr('id').split(/_/);
            var group_id = group_id_data[2];

            var datatype_id = $(this).attr('rel');

            $(this).unbind('click').click(function() {
                if ( $(this).hasClass('pure-button-disabled') ) {
                    return;
                }
                else if( confirm("Are you certain you want to delete this Group?")) {
                    DeleteGroup(datatype_id, group_id);
                }
            });
        });
    }

    /**
     * Attaches handlers to user names in the group membership lists, so that clicking on a username
     * opens their associated group management page.
     */
    function attachUserLinks() {
        $(".ODRUserLink").unbind('click').click(function() {
            var user_id = $(this).attr('rel');

            var url = '{{ path('odr_manage_user_groups', {'user_id': 0}) }}';
            url = url.substring(0, (url.length-1));
            url += user_id;

            UpdateURL(url);
        });
    }

    // Need to be able to delay saving changes to the group properties form for a couple seconds
    //  so that users aren't getting constantly interrupted
    var SaveGroupProperty_Interval = [];
    var SaveGroupProperty_Data = [];

    /**
     * Saves properties in a Group form...group name and description, etc.
     *
     * @param {number} datatype_id
     * @param {number} group_id
     * @param {bool} reload_group_list
     */
    function SaveGroupProperties(datatype_id, group_id, reload_group_list) {
        // Clear the save interval for this group if there is one
        if (SaveGroupProperty_Interval[group_id] !== undefined)
            SaveGroupProperty_Interval[group_id] = window.clearInterval(SaveGroupProperty_Interval[group_id]);

        // Load the saved form data for this group
        if ( SaveGroupProperty_Data[group_id] === undefined)
            return;
        var post_data = SaveGroupProperty_Data[group_id];
        SaveGroupProperty_Data[group_id] = null;
        // console.log('entered SaveGroupProperties() for group', group_id, post_data);

        var url = '{{ path('odr_group_properties', { 'group_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += group_id;

        // alert( url );  return;

        $.ajax({
            type: 'POST',
            url: url,
            data: post_data,
            dataType: "json",
            success: function(data) {
                notifySaved();

                // Forcibly reload group div
                if (reload_group_list)
                    LoadGroupList(datatype_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Attaches javascript handlers to the Group Properties form.
     */
    function InitGroupPropertyForm() {
        $("#ThemeDesignForm").find("input, textarea").each(function() {
            // Grab group id
            var group_id_data = $("#ThemeDesignForm").find(".ODRGroupPropertiesForm").attr('id').split(/_/);
            var group_id = group_id_data[1];

            var datatype_id = $("#GroupPropertiesForm_" + group_id).attr('rel');

            // Save changes
            if( $(this).is(":checkbox") ) {
                $(this).unbind('change').change(function() {
                    // Trigger a delayed save of the properties form for this group
                    // console.log('<checkbox> changed, triggering delayed save for group', group_id);
                    SaveGroupProperty_Interval[group_id] = window.clearInterval(SaveGroupProperty_Interval[group_id]);
                    SaveGroupProperty_Interval[group_id] = window.setInterval("SaveGroupProperties(" + datatype_id + "," + group_id + ", true)", SaveTimeout);
                    SaveGroupProperty_Data[group_id] = $("#GroupPropertiesForm_" + group_id).serialize();
                });
            }
            else {
                $(this).unbind('keyup');
                $(this).unbind('paste');
                $(this).on('keyup paste', function() {
                    //
                    if ( $(this).hasClass('ODRGroupName') ) {   // inline update of group name  TODO - error handling?
                        var text = $(this).val();
                        $(".ODRGroup_" + group_id + "_name").html(text);
                    }

                    // Trigger a delayed save of the properties form for this group
                    // console.log('<input> changed, triggering delayed save for group', group_id);
                    SaveGroupProperty_Interval[group_id] = window.clearInterval(SaveGroupProperty_Interval[group_id]);
                    SaveGroupProperty_Interval[group_id] = window.setInterval("SaveGroupProperties(" + datatype_id + "," + group_id + ", false)", SaveTimeout);
                    SaveGroupProperty_Data[group_id] = $("#GroupPropertiesForm_" + group_id).serialize();
                });
            }
        });
    }

    /**
     * Deletes the given group.
     *
     * @param {number} datatype_id
     * @param {number} group_id
     */
    function DeleteGroup(datatype_id, group_id) {
        var url = '{{ path('odr_delete_group', { 'group_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += group_id;

        // alert( url );  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // Remove permissions UI if it currently exists
                if ( $(".ODRGroupListContentHeader").length > 0 ) {
                    var group_id_data = $(".ODRGroupListContentHeader").attr('id').split('_');
                    var current_group_id = group_id_data[1];

                    if (group_id == current_group_id) {
                        $("#ODRGroupListContent_" + group_id).next().remove();
                        $("#ODRGroupListContent_" + group_id).remove();
                    }
                }

                // Reload group list div
                $("#ODRGroupListHeader").fadeOut('fast');
                LoadGroupList(datatype_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }
</script>

{% endspaceless %}
