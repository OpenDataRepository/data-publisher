{% spaceless %}

{% set datatype = datatype_array[initial_datatype_id] %}

<div id="ODRGroupListContent_{{ group.id }}" class="ODRAccordionWrapper ODRFormAccordion ODRGroupListContentHeader pure-u-1" style="margin-top: 20px;">
    <h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-state-active" role="tab" aria-expanded="true" aria-selected="true" tabindex="0">
        <a>{{ group.groupMeta.groupName }}</a>
        <span style="margin-left: 10px;">
            <i class="Pointer fa fa-lg fa-info-circle ODRGroupProperties" style="color:black;" title="Group Properties" rel="{{ group.id }}"></i>
            <i class="Cursor fa fa-lg fa-globe {% if datatype.dataTypeMeta.publicDate|is_public %}ODRActiveIcon{% endif %} ODRPublicDatatype" title="Datatype{% if datatype.dataTypeMeta.publicDate|is_public %} does not require{% else %} requires{% endif %} permission to view" rel="{{ datatype.id }}"></i>
        </span>
    {% if prevent_all_changes %}
        <span style="margin-left:15px; color: #000000;">Not allowed to make changes to this Group!</span>
    {% endif %}
    </h3>
</div>

{% include 'ODRAdminBundle:ODRGroup:permissions_area.html.twig' with {
    'datatype_permissions': datatype_permissions,
    'datafield_permissions': datafield_permissions,

    'group': group,

    'datatype_array': datatype_array,
    'initial_datatype_id': initial_datatype_id,
    'theme_id': theme_id,

    'prevent_all_changes': prevent_all_changes,
} %}

<script>

$(function() {
    initPage();
    window.scrollTo(0,0);
});

function initPage() {

    // Hide all TEDs without input fields
    $(".ODRThemeElement").each(function() {
        if ( $(this).parent().hasClass("MenuDesignArea") )
            return;

        var found = false;
        $(this).find(".ODRFieldArea").each(function() {
            found = true;
        });

        $(this).find(".ODRDataField").each(function() {
            found = true;
        });

        if (!found)
            $(this).hide();
    });

    // Create overlay divs for each of the datafields in the master theme area
    resizeOverlayDivs();

    $(".ODRGroupProperties").unbind('click').click(function() {
        // Grab the id of the group to load
        var group_id = $(this).attr('rel');

        // Load form for current group if not already loaded
        $("#ODRGroupPropertiesFormDiv").hide().html("");
        var url = '{{ path('odr_group_properties', { 'group_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += group_id;

//alert(url);
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    $("#ElementData").html(data.d).fadeIn('fast');

                    if (data.prevent_all_changes != 1)
                        InitGroupPropertyForm();    // defined in permissions_wrapper.html.twig
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

{% if not prevent_all_changes %}
    $(".ODRCanViewDatatype").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        var datatype_id = $(this).parent().attr('rel');
        var group_id = $(this).attr('rel');

        var value = 1;
        if ( $(this).children('.fa-ban').first().is(':hidden') )
            value = 0;

        var url  = '{{ path('odr_save_group_datatype_permission', {'group_id': 0, 'datatype_id': 0, 'value': 0, 'permission': ''} ) }}';
        url = url.substring(0,(url.length-6));
        url += {{ group.id }} + '/' + datatype_id + '/' + value + '/' + 'dt_view';

        var element = $(this);

//alert(url);
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {

                    if (value == 0) {
                        // If this permission got removed, show all the icons over each of the permissions
                        $(element).parent().find('.fa-ban').show();
                    }
                    else {
                        // Otherwise, just hide the icon indicating this group doesn't have the permission
                        $(element).children('.fa-ban').hide();
                    }
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRCanViewDatarecord").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        var datatype_id = $(this).parent().attr('rel');
        var group_id = $(this).attr('rel');

        var element = $(this);

        var value = 1;
        if ( $(element).children('.fa-ban').first().is(':hidden') )
            value = 0;

        var url  = '{{ path('odr_save_group_datatype_permission', {'group_id': 0, 'datatype_id': 0, 'value': 0, 'permission': ''} ) }}';
        url = url.substring(0,(url.length-6));
        url += {{ group.id }} + '/' + datatype_id + '/' + value + '/' + 'dr_view';

//alert(url);
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {

                    if (value == 0)
                        $(element).children('.fa-ban').first().show();
                    else
                        $(element).children('.fa-ban').first().hide();
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRCanAddDatarecord").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        var datatype_id = $(this).parent().attr('rel');
        var group_id = $(this).attr('rel');

        var element = $(this);

        var value = 1;
        if ( $(element).children('.fa-ban').first().is(':hidden') )
            value = 0;

        var url  = '{{ path('odr_save_group_datatype_permission', {'group_id': 0, 'datatype_id': 0, 'value': 0, 'permission': ''} ) }}';
        url = url.substring(0,(url.length-6));
        url += {{ group.id }} + '/' + datatype_id + '/' + value + '/' + 'dr_add';

//alert(url);
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {

                    if (value == 0)
                        $(element).children('.fa-ban').first().show();
                    else
                        $(element).children('.fa-ban').first().hide();
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRCanDeleteDatarecord").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        var datatype_id = $(this).parent().attr('rel');
        var group_id = $(this).attr('rel');

        var element = $(this);

        var value = 1;
        if ( $(element).children('.fa-ban').first().is(':hidden') )
            value = 0;

        var url  = '{{ path('odr_save_group_datatype_permission', {'group_id': 0, 'datatype_id': 0, 'value': 0, 'permission': ''} ) }}';
        url = url.substring(0,(url.length-6));
        url += {{ group.id }} + '/' + datatype_id + '/' + value + '/' + 'dr_delete';

//alert(url);
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {

                    if (value == 0)
                        $(element).children('.fa-ban').first().show();
                    else
                        $(element).children('.fa-ban').first().hide();
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRIsDatatypeAdmin").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        var datatype_id = $(this).parent().attr('rel');
        var group_id = $(this).attr('rel');

        var value = 1;
        if ( $(this).children('.fa-ban').first().is(':hidden') )
            value = 0;

        var url  = '{{ path('odr_save_group_datatype_permission', {'group_id': 0, 'datatype_id': 0, 'value': 0, 'permission': ''} ) }}';
        url = url.substring(0,(url.length-6));
        url += {{ group.id }} + '/' + datatype_id + '/' + value + '/' + 'dt_admin';

//alert(url);
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    // Just reload the entire permissions UI area...easier that way
                    $("#edit_group_" + group_id).trigger('click');
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRDataFieldPermission").unbind('click').click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        var datafield_id = $(this).attr('rel');
        var overlay_id = $(this).attr('id');

        // Determine if datafield is public
        var datafield_is_public = true;
        if ( $("#datafield_" + datafield_id + "_public").val() == 0 )
            datafield_is_public = false;


        if ( $(this).hasClass('ODREditableDatafield') ) {
            // switch from view/edit to view/no-edit
            updateDatafieldPermissions(overlay_id, 'ODRVisibleDatafield');
        }
        else if ( $(this).hasClass('ODRVisibleDatafield') ) {
            if (datafield_is_public) {
                // switch from view/no-edit to view/edit...since datafield is public and viewable by everybody, it makes no sense to go to no-view/no-edit
                updateDatafieldPermissions(overlay_id, 'ODREditableDatafield');
            }
            else {
                // switch from view/no-edit to no-view/no-edit
                updateDatafieldPermissions(overlay_id, 'ODRBlockedDatafield');
            }
        }
        else if ( $(this).hasClass('ODRBlockedDatafield') ) {
            // switch from no-view/no-edit to view/edit
            updateDatafieldPermissions(overlay_id, 'ODREditableDatafield');
        }
    });
{% endif %}  {# {% if not prevent_all_changes %} #}

}

function updateDatafieldPermissions(datafield_overlay_id, desired_state) {

    // Grab datafield_id
    var datafield_id = $('#' + datafield_overlay_id).attr('rel');

    // Don't save if the datafield already has this permission
    if ( $(datafield_overlay_id).hasClass(desired_state) ) {
        // Some of the metadata might change though...update the datafield's overlay
        updateOverlayProperties(datafield_overlay_id, desired_state);
        return;
    }

    // Grab desired permission
    var value = 0;
    if (desired_state == 'ODREditableDatafield')
        value = 2;
    else if (desired_state == 'ODRVisibleDatafield')
        value = 1;
    else if (desired_state == 'ODRBlockedDatafield')
        value = 0;


    var url  = '{{ path('odr_save_group_datafield_permission', { 'group_id': 0, 'datafield_id': 0, 'value': 0 } ) }}';
    url = url.substring(0,(url.length - 5));
    url += {{ group.id }} + '/' + datafield_id + '/' + value;

//alert( url );
//return;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
                // Update the datafield's overlay
                updateOverlayProperties(datafield_overlay_id, desired_state);
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {

                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function updateOverlayProperties(datafield_overlay_id, desired_state) {

    var datafield_overlay = $("#" + datafield_overlay_id);

    // Change overlay to the desired state
    $(datafield_overlay).removeClass('ODREditableDatafield ODRVisibleDatafield ODRBlockedDatafield').addClass(desired_state);

    if (desired_state == 'ODREditableDatafield') {
        $(datafield_overlay).attr('title', 'This Group is allowed to both view and edit this datafield');
    }
    else if (desired_state == 'ODRVisibleDatafield') {
        $(datafield_overlay).attr('title', 'This Group is allowed to view this datafield, but not edit it');
    }
    else if (desired_state == 'ODRBlockedDatafield') {
        $(datafield_overlay).attr('title', 'This Group is not allowed to view or edit this datafield');
    }
}

{#
function ReloadChild(datatype_id) {
    var url = '{{ path('odr_group_permissions_reload_childtype', { 'group_id': 0, 'source_datatype_id': 0, 'childtype_id': 0 }) }}';
    url = url.substring(0, url.length-5);
    url += {{ group.id }} + '/' + {{ datatype.id }} + '/' + datatype_id;

//alert( url );
//return;

    var append = true;
    var datatype_div = $("#DataType_" + datatype_id);
    var element = $(datatype_div).prev();
    if ( $(element).attr('class') === undefined ) {
        append = false;
        element = $(datatype_div).parent();
    }

    // Create a loading div to block off the datafield?
    insertLoadingDiv("DataType_" + datatype_id);


    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: 'json',
        success: function(data, textStatus, jqXHR) {
            // remove old datatype
            $(datatype_div).fadeOut();
            $(datatype_div).remove();

            // insert new html
            if (append)
                $(element).after(data.d.html);
            else
                $(element).prepend(data.d.html);

            initPage();
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {

                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}
#}
{#
function ReloadThemeElement(theme_element_id) {
    var url = '{{ path('odr_group_permissions_reload_theme_element', { 'group_id': 0, 'source_datatype_id': 0, 'theme_element_id': 0 }) }}';
    url = url.substring(0, url.length-5);
    url += {{ group.id }} + '/' + {{ datatype.id }} + '/' + theme_element_id;

//alert( url );
//return;

    var append = true;
    var theme_element = $("#ThemeElement_" + theme_element_id);
    var element = $(theme_element).prev();
    if ( $(element).attr('class') === undefined ) {
        append = false;
        element = $(theme_element).parent();
    }

    // Create a loading div to block off the datafield?
    insertLoadingDiv("ThemeElement_" + theme_element_id);

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: 'json',
        success: function(data, textStatus, jqXHR) {
            // Remove old theme element
            $(theme_element).fadeOut();
            $(theme_element).remove();

            // Insert new html
            if (append)
                $(element).after(data.d.html);
            else
                $(element).prepend(data.d.html);

            initPage();
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {

                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}
#}
{#
function insertLoadingDiv(parent_div_id) {

    // Need dimensions of parent div...
    var element = $("#" + parent_div_id);
    var height = $(element).css('height');
    var width = $(element).css('width');

    // Create a loading div
    $(element).prepend("<div id=\"" + parent_div_id + "_loading_div\" class=\"ODROverlayDiv ODRReloadDiv\"><strong>Loading...</strong></div>");

    // Apply dimensions of parent div to loading div
    $("#" + parent_div_id + "_loading_div").css({"height": height, "line-height": height, "width": width});
}
#}
</script>

{% endspaceless %}
