{% spaceless %}

{% set local_datatype = ancestor_datatype %}
{% set remote_datatype = descendant_datatype %}
{% if local_datarecord.datatype.id == descendant_datatype.id %}
    {% set local_datatype = descendant_datatype %}
    {% set remote_datatype = ancestor_datatype %}
{% endif %}

<div class="ODRFormWrap">
    <form method="post" class="full validate" id="LinkDataRecordForm">
        <input type="hidden" name="local_datarecord_id" value="{{ local_datarecord.id }}" />
        <input type="hidden" name="ancestor_datatype_id" value="{{ ancestor_datatype.id }}" />
        <input type="hidden" name="descendant_datatype_id" value="{{ descendant_datatype.id }}" />
        <input type="hidden" name="allow_multiple_links" value="{% if allow_multiple_links %}1{% else %}0{% endif %}" />
        <input type="hidden" name="local_datarecord_is_ancestor" value="{% if local_datarecord_is_ancestor %}1{% else %}0{% endif %}" />
    </form>

    <div class="pure-u-1">
        <button class="pure-button pure-button-primary" type="button" onclick="ODRLinkDatarecords_submitForm();">Save Changes</button>
        <button class="pure-button" type="button" onclick="ODRLinkDatarecords_saveAndReturn();">Save and Return</button>
        <button class="pure-button" type="button" onclick="ODRLinkDatarecords_returnToPrevious();">Return to Record</button>
        <button class="pure-button ODRLinkDatarecords_unlinkButton ODRHidden" type="button" onclick="ODRLinkDatarecords_unlinkRecord();">Unlink current Datarecord</button>
    </div>

    <div class="ODRLinkHeaderWrapper">
        <div class="ODRLinkHeader ODRAccordionWrapper pure-u-1">
            <h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-state-active" role="tab" aria-expanded="true" aria-selected="true" tabindex="0">
                <i class="ODRLinkHeader_caret fa fa-caret-right"></i>
                <a>View Current {{ local_datatype.grandparent.shortname }} Datarecord</a>
            </h3>
        </div>

        <div class="ODRHidden">
        {% include 'ODRAdminBundle:Display:display_ajax.html.twig' with {
            'datatype_array': datatype_array,
            'datarecord_array': datarecord_array,
            'theme_array': theme_array,

            'initial_datatype_id': initial_datatype_id,
            'initial_datarecord_id': initial_datarecord_id,
            'initial_theme_id': initial_theme_id,

            'is_datatype_admin': is_datatype_admin,

            'is_top_level': 1,
            'search_key': '',

            'record_display_view': 'multiple'
        } %}    {# NOTE: passing in "multiple" to disable certain javascript on the page #}
        </div>
    </div>

    <div class="ODRLinkHeaderWrapper">
        <div class="ODRLinkHeader ODRAccordionWrapper ODRAccordionSelected pure-u-1">
            <h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-state-active" role="tab" aria-expanded="true" aria-selected="true" tabindex="0">
                <i class="ODRLinkHeader_caret fa fa-caret-down"></i>
                <a>Currently Linked Datarecords - {{ remote_datatype.shortname }}</a>
            </h3>
        </div>

        <div id="TextResults_wrapper" class="ODRTableOuterWrap"></div>
    </div>

    {% if allow_multiple_links %}
    <div id="ODRLinkSelection" class="pure-u-1">
        <button class="pure-button" type="button" onclick="ODRLinkDatarecords_selectAllRecords();">Select All</button>
        <button class="pure-button" type="button" onclick="ODRLinkDatarecords_deselectAllRecords();">Deselect All</button>
    </div>
    {% endif %}
</div> <!-- end of .ODRFormWrap -->

<div id="ODRSearchBoxContent" class="pure-u-1"></div>

<script>
    var illegal_datarecords = [{% for dr,value in illegal_datarecords %}{{ dr }},{% endfor %}];

    $(function() {
        enableSearchSidebar('{{ remote_datatype_search_key }}', 'expanded', 'linking');    {# defined in ODRAdminBundle:Default:common_js.html.twig #}

        $(".ODRLinkHeader").unbind('click').click(function() {
            if ( $(this).hasClass('ODRAccordionSelected') ) {
                $(this).removeClass('ODRAccordionSelected');
                $(this).next().addClass('ODRHidden');
                $(this).find(".ODRLinkHeader_caret").removeClass('fa-caret-down').addClass('fa-caret-right');
            }
            else {
                $(this).addClass('ODRAccordionSelected');
                $(this).next().removeClass('ODRHidden');
                $(this).find(".ODRLinkHeader_caret").removeClass('fa-caret-right').addClass('fa-caret-down');
            }
        });

        ODRLinkDatarecords_loadCurrentLinks({{ remote_theme_id }});
    });

    /**
     * Changing the ODR layout used for the table of currentl linked datarecords could also require
     * a change to the columns...since datatables.js (understandably) really doesn't like rebuilding
     * a table with different columns, it's just easier to replace the entire table
     *
     * @param {number} remote_theme_id
     */
    function ODRLinkDatarecords_loadCurrentLinks(remote_theme_id) {
        var url = "{{ path('odr_textresults_load_linked_datarecords') }}";
        var data = [
            'local_datarecord_id={{ local_datarecord.id }}',
            'ancestor_datatype_id={{ ancestor_datatype.id }}',
            'descendant_datatype_id={{ descendant_datatype.id }}',
            'remote_theme_id='+remote_theme_id,
        ];
        var post_data = data.join('&');

        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data, textStatus, xhr) {
                // Replace the html in the wrapper div
                $("#TextResults_wrapper").empty().html( data.d.html );
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Updates the given HTML able to match the linked status of the internal javascript arrays.
     *
     * @param {HTMLElement} table
     * @param {boolean} force_enabled
     */
    function ODRLinkDatarecords_initCheckboxes(table, force_enabled) {
        $(table).find('.ODRLinkCheckbox').each(function() {
            var dr_id = parseInt( $(this).attr('rel') );

            if ( linked_datarecords.indexOf(dr_id) !== -1 )
                $('.dr_' + dr_id).prop('checked', true);
            else
                $('.dr_' + dr_id).prop('checked', false);

            if ( illegal_datarecords.indexOf(dr_id) !== -1 && !force_enabled )
                $('.dr_' + dr_id).not('.ODRCurrentLink').prop('disabled', true).attr('title', 'This remote Datarecord already has a link to some other Datarecord of this Datatype');
            else
                $('.dr_' + dr_id).prop('disabled', false);
        });
    }

    /**
     * Convenience function to insert a hidden input for a given datarecord into the form
     *
     * @param {number} dr_id
     */
    function ODRLinkDatarecords_insertFormInput(dr_id) {
        $('<input>', {
            'type': 'hidden',
            'id': 'dr_'+dr_id,
            'class': 'ODRLinkInput',
            'name': 'datarecords[' + dr_id + ']',
            'value': '1'
        }).appendTo("#LinkDataRecordForm");
    }

    /**
{% if allow_multiple_links or not local_datarecord_is_ancestor %}
     * The local datarecord is allowed to link to multiple remote datarecords...toggles whether the
     * selected remote datarecord is linked to or not in the internal javascript arrays, but doesn't
     * actually save anything...that happens when ODRLinkDatarecords_submitForm() is called.
{% else %}
     * The local datarecord is only allowed to link to a single remote datarecord...changes which
     * remote datarecord is linked to in the internal javascript arrays, but doesn't actually save
     * anything...that happens when ODRLinkDatarecords_submitForm() is called.
{% endif %}
     *
     * @param {number} dr_id
     */
    function ODRLinkDatarecords_linkRecord(dr_id) {
        var dr = "#dr_" + dr_id;    // This references the hidden input

{% if allow_multiple_links or not local_datarecord_is_ancestor %}
        if ( $(dr).length > 0 ) {
            // hidden input element exists, delete it
            $(dr).remove();
            // update internal javascript and html to reflect change
            linked_datarecords.splice( linked_datarecords.indexOf(dr_id), 1 );  // remove single element
            $('.dr_' + dr_id).prop('checked', false);
        }
        else if ( $(dr).length === 0 ) {
            // hidden input element does not exist, add it
            ODRLinkDatarecords_insertFormInput(dr_id);

            // update internal javascript and html to reflect change
            linked_datarecords.push(dr_id);
            $('.dr_' + dr_id).prop('checked', true);
        }
{% else %}
        // Apparently don't need to worry about this function being called on an already selected element?
        $(".ODRLinkInput").remove();
        ODRLinkDatarecords_insertFormInput(dr_id);

        // update internal javascript and html to reflect change
        linked_datarecords = [dr_id];
        $("#hidden_radio").prop('checked', true);
        $('.dr_' + dr_id).prop('checked', true);

{% endif %}
    }

{% if not allow_multiple_links and local_datarecord_is_ancestor %}
    /**
     * When the local record is only allowed to link to a single remote record, the UI uses a radio
     * option instead of a checkbox.  Since a radio option can't be deselected in the browser, there
     * needs to be a javascript function to do it instead.
     */
    function ODRLinkDatarecords_unlinkRecord() {
        // Uncheck the radio checkbox
        var dr_id = $(".ODRCurrentLink").attr('rel');
        $('.dr_' + dr_id).prop('checked', false);

        // Remove the datarecord id from the form so it isn't submitted
        $("#dr_" + dr_id).remove();
        // Immediately submit the form so users don't get confused
        ODRLinkDatarecords_submitForm();
    }
{% endif %}

    /**
     * Returns to the local datarecord's edit page.
     */
    function ODRLinkDatarecords_returnToPrevious() {
        var url = '{{ path('odr_record_edit', {'datarecord_id': 0} ) }}';
        url = url.substr(0, (url.length-1));
        url += '{{ local_datarecord.grandparent.id }}';
{% if search_key != '' %}
        url += '/' + '{{ search_theme_id }}' + '/' + '{{ search_key }}';
{% endif %}

//alert(url);  return;
        UpdateURL(url);
    }

    /**
     * Submits the form of remote datarecords that the user wants the local datarecord to link to.
     */
    function ODRLinkDatarecords_submitForm() {
        var post_data = $("#LinkDataRecordForm").serialize();
        var url = "{{ path('odr_link_datarecords') }}";

//alert(url);  return;

        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data, textStatus, xhr) {
                // Only reload the page if a change was made
                if ( data.d.change_made )
                    window.location.reload();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Submits the form, then immediately returns to the local datarecord's edit page.
     */
    function ODRLinkDatarecords_saveAndReturn() {
        var post_data = $("#LinkDataRecordForm").serialize();
        var url = "{{ path('odr_link_datarecords') }}";

//alert(url);  return;

        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data, textStatus, xhr) {
                ODRLinkDatarecords_returnToPrevious();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

{% if allow_multiple_links %}
    /**
     * Convenience function to select all datarecords in the returned search result, which will cause
     *  the controller to link to all remote records in the search result if the form is submitted.
     */
    function ODRLinkDatarecords_selectAllRecords() {
        // Add hidden input elements for all currently unselected datarecords
        jQuery.each(all_datarecords, function(index, dr_id) {
            // Check all boxes for the element on the page
            $(".dr_" + dr_id).prop('checked', true);

            // If the hidden form input does not exist...
            if ( $("#dr_" + dr_id).length == 0 ) {
                // ...then create it
                ODRLinkDatarecords_insertFormInput(dr_id);
            }
        });

        // All possible datarecord are now linked...need to use slice() instead of '=' to avoid
        //  assign by ref
        linked_datarecords = all_datarecords.slice();
    }

    /**
     * Convenience function to deselect all datarecords on the page, which will cause the controller
     *  to unlink all remote records of the remote datatype if the form is submitted.
     */
    function ODRLinkDatarecords_deselectAllRecords() {
        // Remove hidden input elements for all currently selected datarecords
        $(".ODRLinkInput").remove();
        // Uncheck all boxes on the page
        $(".ODRLinkCheckbox").prop('checked', false);

        // All possible datarecords are now unlinked
        linked_datarecords = [];
    }
{% endif %}
</script>

{% endspaceless %}
