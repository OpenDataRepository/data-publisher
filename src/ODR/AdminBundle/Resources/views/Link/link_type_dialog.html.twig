{% spaceless %}

<!-- Link DataType Dialog -->

<script>
    var link_datatype_dialog_body = '<div id="ODRLinkDatatypeFormWrapper" class="ODRHidden"> </div>';

    function openLinkDatatypeDialog(local_datatype_id, theme_element_id) {
        // open dialog
        modal_options = {
            title: 'Manage Linked Datatypes',
            loading: true,
            body: link_datatype_dialog_body,
            buttons: [
                {
                    id: 'ODRLinkDatatypeFormSubmit',
                    text: 'Link Database',
                    // secondary: true,
                    disabled: true
                }
            ]
        };
        openODRRemodal(modal_options);

        loadLinkData(local_datatype_id, theme_element_id);
    }

    function loadLinkData(local_datatype_id, theme_element_id) {

        var url = '{{ path('odr_design_get_link_datatypes', {'datatype_id': 0, 'theme_element_id': 0 } ) }}';
        url = url.substring(0,(url.length - 3)) + local_datatype_id + "/" + theme_element_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
//                alert( data.d.html );
                $("#ODRLinkDatatypeFormWrapper").html( data.d.html );

                // remove loading spinner
                $(".ODRRemodalLoading").fadeOut('150', function() {
                    $(".ODRRemodalBody").show();
                    $(".ODRRemodalButtons").show();
                    $("#ODRLinkDatatypeFormWrapper").show();

                    // Resize ODRFileDownloadModal to take up full height
                    resetRemodalInnerHeight();

                    // Setup submit handler
                    $('#ODRLinkDatatypeFormSubmit').unbind('click').click(function() {
                        submitLinkDatatypeForm();
                    });
                });
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Close the dialog so it's not in some half-initialized state
                closeODRRemodal();
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }


    function submitLinkDatatypeForm() {

        var data = $('#ODRLinkDatatypeForm').serialize();
        var url = $('#ODRLinkDatatypeForm').attr('action');

        $.ajax({
            type: 'POST',
            url: url,
            data: data,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Reload ThemeElement
                var linked_datatype_id = data.d.linked_datatype_id;
                var theme_element_id = data.d.element_id;

                if (data.d.using_linked_type == 1) {  // there is now a linked datatype in this theme element
                    ReloadThemeElement(theme_element_id);   // need the entire linked type in there...this will also cause icons to be muted
                }
                else {
                    // Delete the removed linked datatype html
                    $("#DataType_" + linked_datatype_id).remove();

                    // Unmute the other icons
                    var icons = {"ODRAddDatafield": 1, "ODRAddChildtype": 1, "ODRDeleteThemeElement": 1, "ODRLinkDatatype": 1};
                    setThemeElementIcons(theme_element_id, icons);
                }

                closeODRRemodal();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

</script>

{% endspaceless %}
