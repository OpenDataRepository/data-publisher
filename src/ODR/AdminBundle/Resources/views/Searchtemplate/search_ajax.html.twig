{% spaceless %}

{% set datatype = normal_datatype_tree.datatype %}
<h1 class="grid_12 no-margin-top-phone">
    <span>Search Template Design &raquo; {{ datatype.shortname }}</span>
</h1>

<input type="hidden" id="search_theme_id" value="{{ search_theme.id }}" />

{#{% include 'ODRAdminBundle:Searchtemplate:search_area.html.twig' with {'normal_datatype_tree': normal_datatype_tree, 'search_datatype_tree': search_datatype_tree, 'normal_theme': normal_theme, 'search_theme': search_theme} %}#}
{% include 'ODRAdminBundle:Searchtemplate:search_area.html.twig' with {'normal_datatype_tree': normal_datatype_tree, 'search_datatype_tree': search_datatype_tree} %}

<style type="text/css">
    .ODRSearchHidden {
        display: none;
    }
</style>

<script>

$(function() {
    initPage();
});

function initPage() {

    // Setup Data Fields
    SetupDataFields();
    InitSlideout();

    // Setup Properties Tack
    $(".TackProperties").unbind('click');
    $(".TackProperties").click(function() {
        if($(this).hasClass('tacked')) {
            // Remove tacked
            $(this).removeClass('tacked');
            $("#ODRNavRight").removeClass('StickOpen');
            // $("#ODRNavRight").css('right', 0);
        }
        else {
            $(this).addClass('tacked');
            $("#ODRNavRight").addClass('StickOpen');
            // $("#ODRNavRight").css('right', 400);
        }
    });

    $(".AddThemeElement").unbind('click');
    $(".AddThemeElement").click(function() {

        // I think this option is always available, but just incase...
        if ( $(this).hasClass('fa-muted') )
            return;

        var datatype_id = $(this).attr('rel');
        var theme_id = $("#search_theme_id").val();

        var url = '{{ path('odr_search_template_add_theme_element', { 'datatype_id': 0, 'theme_id': 0 }) }}';
        url = url.substring(0, url.length-3);
        url += datatype_id + '/' + theme_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    // Clear right slideout
                    $("#ElementData").html("");

                    // Grab ID of new theme element
                    var theme_element_id = data.d.theme_element_id;

                    // Create a fake theme element and force a save of theme element order
                    $("#FieldArea_" + datatype_id + "_design").prepend("<div id=\"ThemeElement_" + theme_element_id + "\" class=\"ODRThemeElement pure-u-1\"></div>");
                    SaveThemeElementOrder("#FieldArea_" + datatype_id + "_design");

                    // Reload to get actual theme element contents
                    ReloadThemeElement(theme_element_id);
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
           complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".DeleteThemeElement").unbind('click');
    $(".DeleteThemeElement").click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        var theme_element_id = $(this).attr('rel');

        if (confirm("Are you sure you want to delete this theme element?")) {
            var url = '{{ path('odr_search_template_delete_theme_element', { 'theme_element_id': 0 } ) }}';
            url = url.substring(0, (url.length - 1));
            url += theme_element_id;

//alert( url );
//return;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    if(data.r == 0) {
                        // Will Cause removal from view
                        $("#ThemeElement_" + theme_element_id).remove();

                        // No need to update ThemeElement icons, since ThemeElement is gone
                    }
                    else {
                        // Notify of failure
                        alert(data.d);
                    }
                },
                complete: function(jqXHR, textStatus) {
                     // Get the xdebugToken from response headers
                     var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                     // If the Sfjs object exists
                     if (typeof Sfjs !== "undefined") {

                         // Grab the toolbar element
                         var currentElement = $('.sf-toolbar')[0];

                         // Load the data of the given xdebug token into the current toolbar wrapper
                         Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                     }
                 }
            });
        }
    });

    $(".ThemeElementProperties").unbind('click');
    $(".ThemeElementProperties").click(function() {
        // Load Properties into Element Data
        var theme_element_id = $(this).attr('rel');

        // Load form for current datfield if not already loaded
        $("#ElementData").hide().html("");
        var url = '{{ path('odr_search_template_get_theme_element_properties', { 'theme_element_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += theme_element_id;

//alert( url );
//return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    $("#ElementData").html(data.d).fadeIn('fast');
                    InitThemeElementPropertiesForm();
                }
            },
            complete: function(jqXHR, textStatus) {
                 // Get the xdebugToken from response headers
                 var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                 // If the Sfjs object exists
                 if (typeof Sfjs !== "undefined") {

                     // Grab the toolbar element
                     var currentElement = $('.sf-toolbar')[0];

                     // Load the data of the given xdebug token into the current toolbar wrapper
                     Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                 }
             }
        });
    });


    // Sortable ThemeElements
    var starting_fieldarea = null;
    $(".ODRFieldArea").sortable("destroy");
    $(".ODRFieldArea").sortable({

        start: function( event, ui ) {
            // Store where the theme element started
            starting_fieldarea = $(ui.helper).parent().attr('id');

            // Hide the div that is being dragged around
            $(ui.helper).hide();
            // Style the placeholder to more closely match the datafield being drug around
            $(ui.placeholder).addClass( $(ui.helper).attr('class') );
            $(ui.placeholder).css( 'height', $(ui.helper).height() );
            $(ui.placeholder).css( 'width', $(ui.helper).width() * 0.95 );
        },
        stop: function( event, ui ) {
            // Grab where it ended
            var ending_fieldarea = $(ui.item).parent().attr('id');

            // If the theme element ended up in a different fieldarea, don't save the change and revert the layout
            if (starting_fieldarea == ending_fieldarea) {
//alert('legal');
                SaveThemeElementOrder($(ui.item).parent());
            }
            else {
//alert('illegal');
                // Shouldn't be called in searchtemplate
                $(".ODRFieldArea").sortable('cancel');
            }

            // Unhide the object that was being dragged around
            $(ui.item).show();
            $(ui.item).removeAttr('style');
            starting_fieldarea = null;
        },
        placeholder: "ui-state-highlight",
        connectWith: ".ODRFieldArea"
    });
    $(".ODRFieldArea").disableSelection();

    // Sortable DataFields
    var starting_theme_element = null;
    $(".ODRInnerBox").sortable("destroy");
    $(".ODRInnerBox").sortable({

        items: "> .ODRDataField",   // Only attach to a subset of datafields
        start: function( event, ui ) {
            // Store where the datafield started
            starting_theme_element = $(ui.helper).parent().parent().attr('id');
            starting_fieldarea = $(ui.helper).parent().parent().parent().attr('id');

            // Hide the div that is being dragged around
            $(ui.helper).hide();
            // Style the placeholder to more closely match the datafield being drug around
            $(ui.placeholder).addClass( $(ui.helper).attr('class') );
            $(ui.placeholder).css( 'height', $(ui.helper).height() );
            $(ui.placeholder).css( 'width', $(ui.helper).width() * 0.95 );
        },
        stop: function( event, ui ) {
            // Grab where the datafield ended
            var ending_theme_element = $(ui.item).parent().parent().attr('id');
            var ending_fieldarea = $(ui.item).parent().parent().parent().attr('id');

//alert( 'start_ted: ' + starting_theme_element + ' end_ted: ' + ending_theme_element );
//alert( 'start_fieldarea: ' + starting_fieldarea + ' end_fieldarea: ' + ending_fieldarea );
//return;

            // If the datafield ended up in the same fieldarea...
//alert( 'moved from ' + starting_fieldarea + ' to ' + ending_fieldarea );
            if (starting_fieldarea == ending_fieldarea) {
                // Different actions depending on where field ended up
                if ( $("#"+ending_fieldarea).hasClass('ODRDesignArea') ) {
//alert( 're-order inside design' );
                    SaveDatafieldOrder($(ui.item).parent(), starting_theme_element, ending_theme_element);
                }
                else {
                    /* do nothing */
                }
            }
            else {
                // Different actions depending on where field ended up
                if ( $("#"+ending_fieldarea).hasClass('ODRDesignArea') ) {
//alert( 'moved into design' );
                    AddToTemplate( $(ui.item).attr('id'), ending_theme_element );
                }
                else {
//alert( 'moved out of design' );
                    RemoveFromTemplate( $(ui.item).attr('id'), starting_theme_element );
                }
            }

            // Unhide the object that was being dragged around
            $(ui.item).show();

            // jQuery Sortable attaches a display: block style to these elements...get rid of it
            $(ui.item).removeAttr('style');

            // Reset for the next sortable call
            starting_theme_element = null;
            starting_fieldarea = null;
            $(ui.placeholder).removeAttr('css');
        },
        placeholder: "ui-state-highlight",
        connectWith: ".ODRInnerBox"
    });
    $(".ODRInnerBox").disableSelection();

    // Prevent sortable from attaching to a few divs
    $("#FieldArea_{{ datatype.id }}").sortable( "destroy" );

    // Remove all datafields that have visible twins in the design area
    $(".ODRDesignElement").find(".ODRDataField").each(function() {
        var datafield_id = $(this).attr('id');
        $("#ThemeElement_0 > .ODRInnerBox > #" + datafield_id).remove();
    });
}

function SaveThemeElementOrder(container) {

    var i = 0;
    var theme_element_ids = {};
    $(container).children(".ODRThemeElement").each(function() {
        var id_data = $(this).attr('id').split(/_/);
        theme_element_ids[i] = id_data[1];
        i++;
    });

    var url = '{{ path('odr_search_template_save_theme_element_order') }}';

//alert( url );
//return;

    $.ajax({
        cache: false,
        type: 'POST',
        data: theme_element_ids,
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
             // Get the xdebugToken from response headers
             var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

             // If the Sfjs object exists
             if (typeof Sfjs !== "undefined") {

                 // Grab the toolbar element
                 var currentElement = $('.sf-toolbar')[0];

                 // Load the data of the given xdebug token into the current toolbar wrapper
                 Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
             }
         }
    });
}

function SaveDatafieldOrder(container, initial_theme_element_id, ending_theme_element_id) {

    var i = 0;
    var datafield_ids = {};
    $(container).children(".ODRDataField").each(function() {
        var id_data = $(this).attr('id').split(/_/);
        datafield_ids[i] = id_data[1];
        i++;
    });

    // Get the id numbers of the passed-in theme elements
    var theme_element = initial_theme_element_id.split(/_/);
    initial_theme_element_id = theme_element[1];
    var theme_element = ending_theme_element_id.split(/_/);
    ending_theme_element_id = theme_element[1];

    // Theme ID
    var url = '{{ path('odr_search_template_save_datafield_order', {'initial_theme_element_id': 0, 'ending_theme_element_id' : 0} ) }}';
    url = url.substring(0, url.length-3);
    url += initial_theme_element_id + '/' + ending_theme_element_id;

//alert( url );
//return;

    $.ajax({
        cache: false,
        type: 'POST',
        data: datafield_ids,
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
             // Get the xdebugToken from response headers
             var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

             // If the Sfjs object exists
             if (typeof Sfjs !== "undefined") {

                 // Grab the toolbar element
                 var currentElement = $('.sf-toolbar')[0];

                 // Load the data of the given xdebug token into the current toolbar wrapper
                 Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
             }
         }
    });
}

function AddToTemplate(datafield, theme_element) {

    // Get the id number of the passed-in datafield
    var datafield_data = datafield.split(/_/);
    var datafield_id = datafield_data[1];

    // Get the id number of the passed-in theme element
    var theme_element_data = theme_element.split(/_/);
    var theme_element_id = theme_element_data[1];

    // Theme ID
    var url = '{{ path('odr_search_template_add_datafield', {'datafield_id': 0, 'theme_element_id': 0} ) }}';
    url = url.substring(0, url.length-3);
    url += datafield_id + '/' + theme_element_id;

//alert( url );
//return;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
                ReloadThemeElement(theme_element_id);
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
             // Get the xdebugToken from response headers
             var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

             // If the Sfjs object exists
             if (typeof Sfjs !== "undefined") {

                 // Grab the toolbar element
                 var currentElement = $('.sf-toolbar')[0];

                 // Load the data of the given xdebug token into the current toolbar wrapper
                 Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
             }
         }
    });
}

function RemoveFromTemplate(datafield, theme_element) {

    // Get the id number of the passed-in datafield
    var datafield_data = datafield.split(/_/);
    var datafield_id = datafield_data[1];

    // Get the id number of the passed-in theme element
    var theme_element_data = theme_element.split(/_/);
    var theme_element_id = theme_element_data[1];

    // Theme ID
    var url = '{{ path('odr_search_template_remove_datafield', {'datafield_id': 0, 'theme_element_id': 0} ) }}';
    url = url.substring(0, url.length-3);
    url += datafield_id + '/' + theme_element_id;

//alert( url );
//return;

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
                ReloadThemeElement(theme_element_id);
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
             // Get the xdebugToken from response headers
             var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

             // If the Sfjs object exists
             if (typeof Sfjs !== "undefined") {

                 // Grab the toolbar element
                 var currentElement = $('.sf-toolbar')[0];

                 // Load the data of the given xdebug token into the current toolbar wrapper
                 Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
             }
         }
    });
}

var datafield_xhr = null;
function SetupDataFields() {

    $(".ODRDataField").unbind('click');

    // Indicate this field has no settings
    $("#ThemeElement_0 > .ODRInnerBox > .ODRDataField").click(function() {
        $("#ElementData").html('');
    });

    // Only load settings for datafields in the design area
    $(".ODRDesignElement > .ODRInnerBox > .ODRDataField").click(function() {
        // Grab theme id
        var theme_id = $("#search_theme_id").val();

        // Grab datafield id
        var id_data = $(this).attr('id').split(/_/);
        var datafield_id = id_data[1];

        // Check if this field is already loaded
        var form_id = "";
        var form = $("#ElementData").find("form");
        if(form.length > 0) {
            var form_id_data = form.attr("id").split(/_/);;
            form_id = form_id_data[1];
        } 

        // Load form for current datafield if not already loaded
        if(form_id != datafield_id) {
            $("#ElementData").hide().html("");

            var url = '{{ path('odr_search_template_get_datafield_properties', { 'datafield_id': 0, 'theme_id': 0 } ) }}';
            url = url.substring(0, (url.length - 3));
            url += datafield_id + '/' + theme_id;

            if (datafield_xhr !== null)
                datafield_xhr.abort();

            datafield_xhr = $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    if(data.r == 0) {
                        $("#ElementData").html(data.d).fadeIn('fast');
                        InitDatafieldPropertiesForm();
                    }
                },
                complete: function(jqXHR, textStatus) {
                     // Get the xdebugToken from response headers
                     var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                     // If the Sfjs object exists
                     if (typeof Sfjs !== "undefined") {
    
                         // Grab the toolbar element
                         var currentElement = $('.sf-toolbar')[0];

                         // Load the data of the given xdebug token into the current toolbar wrapper
                         Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                     }

                    datafield_xhr = null;
                 }
            });
        }
    });
}

function InitThemeElementPropertiesForm() {
    // Init Theme Element Properties forms
    $("#ElementData .ODRThemeElementPropertiesForm").find("select").each(function() {
        var id_data = $("#ElementData .ODRThemeElementPropertiesForm").attr('id').split(/_/);
        var theme_element_id =  id_data[1];

        $(this).unbind('change');
        $(this).change(function() {
            SaveThemeElementInterval[theme_element_id] = window.clearInterval(SaveThemeElementInterval[theme_element_id]);
            SaveThemeElementInterval[theme_element_id] = window.setInterval("SaveThemeElementProperties('" + theme_element_id + "')", SaveTimeout);
        });
    });
}

function InitDatafieldPropertiesForm() {
    // Init Field Properties forms

    // Attach event handlers to the css width selectors in the datafield properties slideout
    $("#ElementData .ODRThemeDatafieldPropertiesForm").find("select").each(function() {
        // Grab ThemeDatafield id
        var id_data = $("#ElementData .ODRThemeDatafieldPropertiesForm").attr('id').split(/_/);
        var theme_datafield_id =  id_data[1];

        // Save changes
        $(this).unbind('change');
        $(this).change(function() {
            SaveThemeDatafieldProperty(theme_datafield_id);
        });
    });
}

var SaveThemeElementInterval = [];
function SaveThemeElementProperties(theme_element_id) {
    if (SaveThemeElementInterval[theme_element_id] != undefined)
        SaveThemeElementInterval[theme_element_id] = window.clearInterval(SaveThemeElementInterval[theme_element_id]);

    var url = '{{ path('odr_search_template_get_theme_element_properties', { 'theme_element_id': 0 } ) }}';
    url = url.substring(0, (url.length - 1));
    url += theme_element_id;
//alert( url );
//return;

    var form_data = $("#ThemeElementPropertiesForm_" + theme_element_id).serialize();

    $.ajax({
        type: 'POST',
        url: url,
        data: form_data,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
                //
                ReloadThemeElement(theme_element_id);
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
             // Get the xdebugToken from response headers
             var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

             // If the Sfjs object exists
             if (typeof Sfjs !== "undefined") {

                 // Grab the toolbar element
                 var currentElement = $('.sf-toolbar')[0];

                 // Load the data of the given xdebug token into the current toolbar wrapper
                 Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
             }
         }
    });

}

var SaveThemeDatafieldPropertyInterval = [];
function SaveThemeDatafieldProperty(theme_datafield_id) {
    if(SaveThemeDatafieldPropertyInterval[theme_datafield_id] != undefined)
        SaveThemeDatafieldPropertyInterval[theme_datafield_id] = window.clearInterval(SaveThemeDatafieldPropertyInterval[theme_datafield_id]);

    var url = '{{ path('odr_search_template_save_theme_datafield', {'theme_datafield_id': 0}) }}';
    url = url.substring(0, url.length-1);
    url += theme_datafield_id;

//alert(url);
//return;

    var datafield_id = $("#ThemeDatafieldPropertiesForm_" + theme_datafield_id).attr('rel');

    var post_data = $("#ThemeDatafieldPropertiesForm_" + theme_datafield_id).serialize();
    $.ajax({
        type: 'POST',
        url: url,
        dataType: "json",
        data: post_data,
        success: function(data, textStatus, jqXHR) {

            if(data.r == 0) {
                // Reload datafield
                ReloadDatafield(datafield_id);
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {

                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });

}

function InitSlideout() {
    // Load display template menu
    var url = '{{ path('odr_design_nav_slideout') }}';

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
                switch(data.t) {
                    case 'html':
                        $(".MenuDesignArea").remove();
                        $("#ODRNavRight .top").append(data.d);
                        $("#ODRNavRightWrapper").fadeIn('fast');
                        $("#MenuManageDataTypes").click();
                        $(".MenuDesignArea a").click();

                        // Clear Element Data Holder
                        $("#ElementData").html("");
                    break;

                    case 'func':
                        // Call External Function
                        data.d.func(data);
                    break;
                }
            }
            else {
                // An error has occurred.
                // Show Error message dialog
            }
        },
/*
        complete: function(jqXHR, textStatus) {
             // Get the xdebugToken from response headers
             var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

             // If the Sfjs object exists
             if (typeof Sfjs !== "undefined") {

                 // Grab the toolbar element
                 var currentElement = $('.sf-toolbar')[0];

                 // Load the data of the given xdebug token into the current toolbar wrapper
                 Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
             }
         }
*/
   });

}

function insertLoadingDiv(parent_div_id) {
    // Need dimensions of parent div...
    var height = $("#" + parent_div_id).css('height');
    var width = $("#" + parent_div_id).css('width');

    // Create a loading div
    $("#" + parent_div_id).prepend("<div id=\"" + parent_div_id + "_loading_div\" class=\"ODROverlayDiv ODRReloadDiv\"><strong>Loading...</strong></div>");

    // Apply dimensions of parent div to loading div
    $("#" + parent_div_id + "_loading_div").css({"height": height, "line-height": height, "width": width});
}

function ReloadChild(datatype_id) {

    // Grab theme id
    var theme_id = $("#search_theme_id").val();

    var url = '{{ path('odr_search_template_reload_child', { 'datatype_id': 0, 'theme_id': 0 }) }}';
    url = url.substring(0, url.length-3);
    url += datatype_id + '/' + theme_id;

//alert( url );
//return;

    var append = true;
    var datatype_div = $("#FieldArea_" + datatype_id + "_design");
    var element = $(datatype_div).prev();
    if ( $(element).attr('class') === undefined ) {
        append = false;
        element = $(datatype_div).parent();
    }

    // Create a loading div to block off the datafield?
    insertLoadingDiv("#FieldArea_" + datatype_id + "_design");

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // remove old datatype
            $(datatype_div).fadeOut();
            $(datatype_div).remove();

            if (append)
                $(element).after(data.d.html);
            else
                $(element).prepend(data.d.html);

            initPage();
        },
        complete: function(jqXHR, textStatus) {
             // Get the xdebugToken from response headers
             var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

             // If the Sfjs object exists
             if (typeof Sfjs !== "undefined") {

                 // Grab the toolbar element
                 var currentElement = $('.sf-toolbar')[0];

                 // Load the data of the given xdebug token into the current toolbar wrapper
                 Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
             }
         }
    });
}

function ReloadThemeElement(theme_element_id) {
    // Grab theme id
    var theme_id = $("#search_theme_id").val();

    var url = '{{ path('odr_search_template_reload_theme_element', { 'theme_element_id': 0, 'theme_id': 0 }) }}';
    url = url.substring(0,url.length-3);
    url += theme_element_id + '/' + theme_id;

//alert( url );
//return;

    var append = true;
    var theme_element = $("#ThemeElement_" + theme_element_id);
    var element = $(theme_element).prev();
    if ( $(element).attr('class') === undefined ) {
        append = false;
        element = $(theme_element).parent();
    }

    // Create a loading div to block off the datafield?
    insertLoadingDiv("ThemeElement_" + theme_element_id);

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Remove old theme element
            $(theme_element).fadeOut();
            $(theme_element).remove();

            if (append)
                $(element).after(data.d.html);
            else
                $(element).prepend(data.d.html);

            initPage();
        },
        complete: function(jqXHR, textStatus) {
             // Get the xdebugToken from response headers
             var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

             // If the Sfjs object exists
             if (typeof Sfjs !== "undefined") {

                 // Grab the toolbar element
                 var currentElement = $('.sf-toolbar')[0];

                 // Load the data of the given xdebug token into the current toolbar wrapper
                 Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
             }
         }
    });
}

function ReloadDatafield(datafield_id) {
    // Grab theme id
    var theme_id = $("#search_theme_id").val();

    var url = '{{ path('odr_search_template_reload_datafield', { 'datafield_id': 0, 'theme_id': 0 }) }}';
    url = url.substring(0,url.length-3);
    url += datafield_id + '/' + theme_id;

//alert( url );
//return;

    var append = true;
    var datafield = $("#Field_" + datafield_id);
    var element = $(datafield).prev();
//alert( $(element).attr('class') );

    if ( $(element).attr('class') === undefined ) {
        append = false;
        element = $(datafield).parent();
    }

    // Create a loading div to block off the datafield?
    insertLoadingDiv("Field_" + datafield_id);

    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Remove old datafield
            $(datafield).remove();

            if (append)
                $(element).after(data.d.html);
            else
                $(element).prepend(data.d.html);

//            initPage();
        },
        complete: function(jqXHR, textStatus) {
             // Get the xdebugToken from response headers
             var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

             // If the Sfjs object exists
             if (typeof Sfjs !== "undefined") {

                 // Grab the toolbar element
                 var currentElement = $('.sf-toolbar')[0];

                 // Load the data of the given xdebug token into the current toolbar wrapper
                 Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
             }
         }
    });
}

</script>

{% endspaceless %}
