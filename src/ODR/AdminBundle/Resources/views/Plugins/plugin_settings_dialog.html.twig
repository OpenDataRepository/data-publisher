{% spaceless %}

<!-- Plugin Settings Dialog Form -->

<script>

    var render_plugin_dialog_body = '<div id="ODRRenderPluginFormWrapper" class="ODRHidden"> </div>';

    /**
     * Configures the modal dialog to view/change the current datatype/datafield's render plugin.
     *
     * @param {number} datafield_id
     * @param {number} datatype_id
     */
    function openPluginSettingsDialog(datafield_id, datatype_id) {
        // open dialog
        modal_options = {
            title: 'Render Plugin settings',
            loading: true,
            body: render_plugin_dialog_body,
            buttons: [
                {
                    id: 'ODRRenderPluginFormSubmit',
                    text: 'Save Render Plugin Settings',
                    // secondary: true,
                    disabled: false
                }
            ]
        };
        openODRRemodal(modal_options);

        loadPluginData(datafield_id, datatype_id);
    }

    /**
     * Loads the HTML for a list of render plugins that can be used by the datatype or datafield.
     *
     * @param {number} datafield_id
     * @param {number} datatype_id
     */
    function loadPluginData(datafield_id, datatype_id) {

        var url  = '{{ path('odr_render_plugin_dialog', {'datatype_id': 0, 'datafield_id': 0 } ) }}';
        url = url.substring(0,(url.length - 3));
        url += datatype_id + '/' + datafield_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                $("#ODRRenderPluginFormWrapper").html( data.d.html );

                // remove loading spinner
                $(".ODRRemodalLoading").fadeOut('150', function() {
                    $(".ODRRemodalBody").show();
                    $(".ODRRemodalButtons").show();
                    $("#ODRRenderPluginFormWrapper").show();

                    // Resize ODRFileDownloadModal to take up full height
                    resetRemodalInnerHeight();

                    // Setup submit handler
                    $('#ODRRenderPluginFormSubmit').unbind('click').click(function() {
                        submitRenderPluginForm();
                    });
                });
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Close the dialog so it's not in some half-initialized state
                closeODRRemodal();
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Submits any changes made to the render plugin form, and reloads parts of the page afterwards
     * to reflect those changes.
     */
    function submitRenderPluginForm() {

        var data = $('#ODRRenderPluginSettingsForm').serialize();
        var url = $('#ODRRenderPluginSettingsForm').attr('action');

        $.ajax({
            type: 'POST',
            url: url,
            data: data,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Ensure that render plugin info doesn't get screwed up if user modifies some other datafield or datatype property after setting render plugin
                var datafield_id = data.d.datafield_id;
                var datatype_id = data.d.datatype_id;

                if (datafield_id != 0) {
                    // A non-zero value means this was a render plugin for a datafield
                    // Usually don't need to reload, but it indicates saving is finished
                    ReloadDatafield(datafield_id);
                }
                else {
                    // This is a render plugin for a datatype
                    var reload_datatype = data.d.reload_datatype;
                    if ( reload_datatype ) {
                        // The render plugin added at least one field...reload the datatype so all
                        //  of the added fields show up
                        ReloadChild(datatype_id);
                    }
                    else {
                        // Don't technically need to reload the page...but ensure the datatype
                        //  properties are kept up to date
                        datatype_properties[datatype_id].render_plugin_id = data.d.render_plugin_id;
                        datatype_properties[datatype_id].render_plugin_name = data.d.render_plugin_name;
                        datatype_properties[datatype_id].render_plugin_classname = data.d.render_plugin_classname;
                        // console.log('datatype ' + datatype_id, datatype_properties[datatype_id]);

                        // Do the same thing for the datafield properties
                        var tmp = data.d.datafield_properties;
                        tmp = JSON.parse(tmp);    {# datafield_properties is effectively defined in design_datafield.html.twig #}
                        $.each(tmp, function(df_id, df_props) {
                            datafield_properties[df_id] = df_props;
                        });
                        // console.log('datafield properties', datafield_properties);

                        RenderToolSet(datatype_id, 'datatype');
                    }
                }

                closeODRRemodal();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

</script>
<!--  End of Plugin Settings Dialog -->

{% endspaceless %}
