{% spaceless %}

<div id="ODRRenderPluginFormWrapper">
    <form action="{{ path('odr_save_render_plugin_layout_settings') }}" method="post" class="pure-form pure-form-aligned" id="ODRRenderPluginLayoutSettingsForm">

        <input type="hidden" name="local_datatype_id" value="{{ local_datatype.id }}" />
{% if local_datafield == null %}
        <input type="hidden" name="local_datafield_id" value="0" />
{% else %}
        <input type="hidden" name="local_datafield_id" value="{{ local_datafield.id }}" />
{% endif %}

        <div class="pure-u-6-24">
            <fieldset>
                <label class="ODRPluginListLabel" for="selected_render_plugins">
                    Attached Render Plugins
                </label>
                <div id="selected_render_plugins" class="pure-control-group pure-u-1">
                {% set prev_category = '' %}
                {% for rp in all_render_plugins %}
                    {% if rp.category != prev_category %}
                        {# Start a new <optgroup> with the current plugin's category #}
                        {% set prev_category = rp.category %}
                        <div class="ODRPluginCategoryLabel pure-u-1">{{ prev_category }}</div>
                    {% endif %}

                        <div id="rp_{{ rp.id }}" class="ODRPluginEntry pure-u-1">
                            <span class="ODRPluginIcon">{% if attached_render_plugins[rp.id] is defined %}<i class="fa fa-plug"></i>{% endif %}</span>
                            <span class="ODRPluginName" rel="{{ rp.id }}">{{ rp.pluginname }}</span>
                        </div>
                {% endfor %}

                </div>
            </fieldset>
        </div>

        {# plugin data div #}
        <div class="pure-u-18-24">
            <div id="ODRRenderPluginLayoutSettingsData" class="pure-control-group">
                <fieldset>
                    <span {% if plugin_to_load is not null %}class="ODRHidden"{% endif %}>The {% if local_datafield is null %}Database{% else %}Datafield{% endif %} is not using a Render Plugin.<br>Select a Render Plugin from the left side of this dialog.</span>
                </fieldset>
            </div>
        </div>

    </form>
</div>

<script>
    $( function() {
        {% if plugin_to_load is not null %}
        // Load initial plugin settings
        loadPluginLayoutSettingsConfig({{ plugin_to_load }});
        {% endif %}

        $(".ODRPluginName").unbind('click').click(function() {
            var render_plugin_id = $(this).attr('rel');
            loadPluginLayoutSettingsConfig(render_plugin_id);
        });

        {% if not is_datatype_admin %}
        // Don't allow saving when the user isn't allowed to make changes
        $("#ODRRenderPluginLayoutSettingsFormSubmit").unbind('click').prop('disabled', true);
        {% endif %}
    });


    /**
     * Loads the description, plugin fields, and plugin options for the specified render plugin.
     *
     * @param {number} render_plugin_id
     */
    function loadPluginLayoutSettingsConfig(render_plugin_id) {
        var theme_id = {{ theme_id }};
        var datatype_id = {{ local_datatype.id }};
        var datafield_id = {% if local_datafield == null %}0{% else %}{{ local_datafield.id }}{% endif %};

        var url  = '{{ path('odr_load_plugin_layout_settings_data', {'theme_id': 0, 'datatype_id': 0, 'datafield_id': 0, 'render_plugin_id': 0 } ) }}';
        url = url.substring(0,(url.length - 7)) + theme_id + '/' + datatype_id + '/' + datafield_id + '/' + render_plugin_id;

        $("#ODRRenderPluginLayoutSettingsForm").addClass('ODRHidden');
        $(".ODRRemodalLoading").removeClass('ODRHidden');

        $(".ODRSelectedPlugin").removeClass("ODRSelectedPlugin");
        $("#rp_" + render_plugin_id).addClass("ODRSelectedPlugin");

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Can't use updateODRRemodalBody() here, because we want to splice the returned
                //  HTML at a specific location
                $("#ODRRenderPluginLayoutSettingsData").html(data.d.html);

                $(".ODRRemodalLoading").addClass('ODRHidden');
                $("#ODRRenderPluginLayoutSettingsForm").removeClass('ODRHidden');

                resetRemodalInnerHeight();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Close the dialog so it's not in some half-initialized state
                closeODRRemodal();
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }
</script>

{% endspaceless %}
