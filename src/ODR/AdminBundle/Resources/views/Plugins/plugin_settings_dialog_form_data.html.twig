{% spaceless %}

    <input type="hidden" name="selected_render_plugin" value="{{ render_plugin.id }}"/>

    <fieldset>
    {% if is_illegal_render_plugin %}
        <span><i class="fa fa-lg fa-exclamation-triangle"></i></span>
        <span>&nbsp;{{ illegal_render_plugin_message }}</span>
    {% elseif render_plugin_instance is not null and render_plugin_instance.deletedAt is null and render_plugin_instance.renderPlugin.id == render_plugin.id %}
        <span>The {% if local_datafield == null %}Database{% else %}Datafield{% endif %} is currently using this Render Plugin.</span>
        {% if is_datatype_admin %}
        &nbsp;&nbsp;<button class="ODRDetachPlugin pure-button pure-button-primary">Detach Render Plugin</button>
        {% endif %}
    {% endif %}
    </fieldset>

    <fieldset class="ODRRenderPlugin_plugin_description">
        {{ render_plugin.description }}
    </fieldset>

{% if local_datafield == null %}    {# if render plugin is for a datatype or themeElement #}
    {% if render_plugin.requiredThemeElements > 0 %}
    <fieldset>
        {% if render_plugin_instance is not null and render_plugin_instance.deletedAt is null and render_plugin_instance.renderPlugin.id == render_plugin.id %}
            {% if render_plugin_instance.themeRenderPluginInstance|length < render_plugin.requiredThemeElements %}
            {# The renderPluginInstance is currently in use, and needs additional themeElements #}
            <div id="plugin_theme_element_creation_warn">
                <span><i class="fa fa-lg fa-exclamation-circle"></i></span>
                <span>&nbsp;Saving this Render Plugin will trigger the creation of new Group Boxes</span>
            </div>
            {% endif %}
        {% else %}
            {# The renderPluginInstance is not currently in use #}
            <div id="plugin_theme_element_creation_warn">
                <span><i class="fa fa-lg fa-exclamation-circle"></i></span>
                <span>&nbsp;Saving this Render Plugin will trigger the creation of new Group Boxes</span>
            </div>
        {% endif %}
    </fieldset>
    {% endif %}

    {% if render_plugin['renderPluginFields']|length > 0 or render_plugin['suppressNoFieldsNote'] == false %}
    <fieldset>
        {# Determine if the rendering plugin has any required fields #}
        {% if render_plugin['renderPluginFields']|length == 0 %}
            This Render Plugin does not need to be mapped to any datafields.
        {% else %}
            {# Print out all required fields for this plugin #}
            <table class="pure-table pure-table-bordered pure-table-striped Cursor">
                <thead><tr>
                    <th>Field Name</th>
                    <th>Field Description</th>
                    <th>Field Type</th>
                    <th>Map to DataField...</th>
                    <th></th>
                </tr></thead>
                <tbody>
                {% for rpf_id,rpf in render_plugin['renderPluginFields'] %}
                    <tr>
                        <td><strong>{{ rpf.fieldName }}: </strong></td>
                        <td>{{ rpf.description }}</td>
                        <td>
                            <select id="new_df_fieldtype_{{ rpf_id }}" class="ODRRenderPluginFieldtype" name="new_df_fieldtypes[{{ rpf_id }}]">
                                {% for typeName,ft_id in rpf_typenames %}
                                    {% if ft_id in allowed_fieldtypes[rpf_id] %}
                                        <option value="{{ ft_id }}">{{ typeName }}</option>    {# TODO - how to prefer a specific fieldtype? #}
                                    {% endif %}
                                {% endfor %}
                            </select>
                        </td>
                        <td>
                            {# Print out a dropdown of fields in this datatype that match the fieldtype of the required field #}
                            <select id="plugin_map_{{ rpf_id }}" class="ODRRenderPluginMap" name="plugin_map[{{ rpf_id }}]" rel="{{ rpf_id }}">
                                {% if rpf.is_optional %}
                                <option value="-2" selected>&lt;&lt;Ignore this field &gt;&gt;</option>
                                <option value="-1">&lt;&lt; Create new datafield &gt;&gt;</option>
                                {% else %}
                                <option value="-1" selected>&lt;&lt; Create new datafield &gt;&gt;</option>
                                {% endif %}

                                {% for df in datafields %}
                                    {% if df.fieldtype.id in allowed_fieldtypes[rpf_id] %}
                                        <option value="{{ df.id }}" rel="{{ df.fieldtype.id }}">{{ df.fieldName }}</option>
                                    {% endif %}
                                {% endfor %}
                            </select>
                        </td>
                        <td>
                            {% if rpf.must_be_unique %}
                            <i id="rpf_{{ rpf_id }}_warning" rel="must_be_unique" class="fa fa-lg fa-exclamation-triangle ODRRenderPluginField_warnings Info ODRHidden" title="This field must be unique."></i>
                            {% elseif rpf.single_uploads_only %}
                            <i id="rpf_{{ rpf_id }}_warning" rel="single_uploads_only" class="fa fa-lg fa-exclamation-triangle ODRRenderPluginField_warnings Info ODRHidden" title="This field must not allow multiple file/images."></i>
                            {% endif %}
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>

            <div id="plugin_datafield_creation_warn">
                <span><i class="fa fa-lg fa-exclamation-circle"></i></span>
                <span>&nbsp;Saving this Render Plugin will trigger the creation of new Datafields</span>
            </div>
        {% endif %}
    </fieldset>
    {% endif %}

    <script>
        $(function() {
            $(".ODRRenderPluginMap").unbind('change').change(function() {
                var datafield_id = parseInt( $(this).val() );
                var render_plugin_field_id = $(this).attr('rel');
                var fieldtype_id = $(this).children(':selected').attr('rel');
                var rpf_warning = $("#rpf_" + render_plugin_field_id + "_warning");

                if (datafield_id == '-2') {
                    // Prevent user from changing fieldtype when no datafield is selected
                    $("#new_df_fieldtype_" + render_plugin_field_id).prop('disabled', true);

                    // Hide warnings about required properties
                    if ( $(rpf_warning).length > 0 )
                        $(rpf_warning).addClass('ODRHidden');
                }
                else if (datafield_id == '-1') {
                    // Let user select fieldtype of new datafield
                    $("#new_df_fieldtype_" + render_plugin_field_id).prop('disabled', false);

                    // Hide warnings about required properties
                    if ( $(rpf_warning).length > 0 )
                        $(rpf_warning).addClass('ODRHidden');
                }
                else {
                    // Prevent user from changing fieldtype of existing datafield
                    $("#new_df_fieldtype_" + render_plugin_field_id).prop('disabled', true);
                    // Select fieldtype of selected datafield, for consistency
                    $("#new_df_fieldtype_" + render_plugin_field_id).val(fieldtype_id);

                    // Show required property warnings if needed
                    if ( $(rpf_warning).length > 0 ) {
                        var warning_type = $(rpf_warning).attr('rel');
                        if ( warning_type === "must_be_unique" ) {
                            if ( !current_unique_fields.includes(datafield_id) )
                                $(rpf_warning).removeClass('ODRHidden');
                            else
                                $(rpf_warning).addClass('ODRHidden');
                        }
                        else if ( warning_type === "single_uploads_only" ) {
                            if ( !current_single_upload_fields.includes(datafield_id) )
                                $(rpf_warning).removeClass('ODRHidden');
                            else
                                $(rpf_warning).addClass('ODRHidden');
                        }
                    }
                }

                // Show warning about creating new datafields if needed
                var show_warning = false;
                $(".ODRRenderPluginMap").each(function() {
                    if ( $(this).val() == '-1' ) {
                        show_warning = true;
                        return false;
                    }
                });

                if (show_warning)
                    $("#plugin_datafield_creation_warn").removeClass('ODRHidden');
                else
                    $("#plugin_datafield_creation_warn").addClass('ODRHidden');
            });

        {% if render_plugin_instance != null %}
            // Pre-select any existing datafield mappings
            {% for num,rpm in render_plugin_instance['renderPluginMap'] %}
                {% if rpm['renderPluginFields']['id'] is defined and rpm['dataField']['id'] is defined %}
                $("#plugin_map_{{ rpm['renderPluginFields']['id'] }}").val("{{ rpm['dataField']['id'] }}");
                {% endif %}
            {% endfor %}
        {% endif %}

            $(".ODRRenderPluginMap").trigger('change');

        {% if not is_datatype_admin %}
            // Not strictly needed, but don't allow modification if the user isn't allowed to
            $(".ODRRenderPluginMap").prop('disabled', true);
        {% endif %}
        });
    </script>

{% else %}  {# render plugin is for a datafield #}
    {# Should only be one rpf entry... #}
    {% for rpf_id,rpf in render_plugin['renderPluginFields'] %}
        <input type="hidden" name="plugin_map[{{ rpf_id }}]" value="{{ local_datafield.id }}" />
    {% endfor %}
{% endif %}

    <fieldset class="ODRRenderPlugin_option_list">
    {# Determine if the rendering plugin has any available options #}
    {% if render_plugin['renderPluginOptions']|length == 0 %}
        <div class="ODRRenderPlugin_option_list_empty">This Render Plugin has no options.</div>
    {% else %}
        {% for rpo_id,rpo in render_plugin['renderPluginOptions'] %}
            {% if not (rpo.uses_custom_render or rpo.uses_layout_settings) %}
                {# Save the default value for the RenderPluginOption #}
                {% set default_value = '' %}
                {% if rpo['defaultValue'] is defined %}
                    {% set default_value = rpo['defaultValue'] %}
                {% endif %}

                {# Locate the existing selection/value for this RenderPluginOption, if there is one #}
                {% set current_value = default_value %}
                {% if render_plugin_instance != null and render_plugin_instance['renderPluginOptionsMap'][rpo_id] is defined %}
                    {% set current_value = render_plugin_instance['renderPluginOptionsMap'][rpo_id]['value'] %}
                {% endif %}

                <div class="pure-u-1 pure-u-lg-1-2 {#pure-u-xl-1-3#}">
                    <label for="plugin_option_{{ rpo_id }}">
                        {{ rpo['displayName'] }}
                        <span class="ODRRenderPlugin_option_description" title="{{ rpo['description'] }}">?</span>
                    </label>

                {% if rpo['choices'] is defined and rpo['choices'] != null %}
                    {# Create a dropdown to display the available choices for this RenderPluginOption #}
                    <select id="plugin_option_{{ rpo_id }}" class="ODRRenderPluginOptionsMap" name="plugin_options[{{ rpo_id }}]">
                    {% for key,value in rpo['choices'] %}
                        <option value="{{ key }}" {% if key == current_value %}selected{% endif %}>{{ value }}</option>
                    {% endfor %}
                    </select>
                {% else %}
                    {# Create a textfield so the user can enter a value for this RenderPluginOption #}
                    <input id="plugin_option_{{ rpo_id }}" class="ODRRenderPluginOptionsMap" size="32" type="text" name="plugin_options[{{ rpo_id }}]" value="{{ current_value }}" />
                {% endif %}
                </div>

            {% endif %}
        {% endfor %}
    {% endif %}
    </fieldset>

    <fieldset id="custom_renderpluginoptions" class="ODRHidden">
    {% for rpo_id,rpo in render_plugin['renderPluginOptions'] %}
        {% if custom_render_plugin_options_html[rpo_id] is defined %}
            {{ custom_render_plugin_options_html[rpo_id]|raw }}
        {% endif %}
    {% endfor %}
    </fieldset>

    <script>
        $(function() {
        {% if custom_render_plugin_options_html|length > 0 %}
            $("#custom_renderpluginoptions").removeClass('ODRHidden');
        {% endif %}

        {% if is_datatype_admin %}
            $(".ODRDetachPlugin").unbind('click').click(function(event) {
                // Don't submit the form
                event.preventDefault();
                event.stopImmediatePropagation();

                var datatype_id = {{ local_datatype.id }};
                var datafield_id = {% if local_datafield == null %}0{% else %}{{ local_datafield.id }}{% endif %};
                var render_plugin_id = {{ render_plugin.id }};

                var url  = '{{ path('odr_detach_plugin', {'datatype_id': 0, 'datafield_id': 0, 'render_plugin_id': 0 } ) }}';
                url = url.substring(0,(url.length - 5)) + datatype_id + '/' + datafield_id + '/' + render_plugin_id;

                // alert(url);  return;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function(data, textStatus, jqXHR) {
                        // Ensure that render plugin info doesn't get screwed up if user modifies some other
                        //  datafield or datatype property after setting render plugin
                        var datafield_id = data.d.datafield_id;
                        var datatype_id = data.d.datatype_id;

                        if (datafield_id != 0) {
                            // A non-zero value means this was a render plugin for a datafield
                            // Usually don't need to reload, but it indicates saving is finished
                            ReloadDatafield(datafield_id);

                            // Reloading the datafield also means the page will reset the datafield
                            //  properties
                        }
                        else {
                            // Don't want to reload the page...but need to ensure the javascript
                            //  array of datafield properties is kept up to date
                            var tmp = data.d.datafield_properties;
                            tmp = JSON.parse(tmp);    {# datafield_properties is effectively defined in design_datafield.html.twig #}
                            $.each(tmp, function(df_id, returned_df_props) {
                                var df_props = datafield_properties.get( parseInt(df_id) );
                                // console.log('df_id', df_id, 'current_df_props', df_props);
                                // console.log('returned_df_props', returned_df_props);
                                $.each(returned_df_props, function(key, value) {
                                    df_props.set(key, value);
                                });
                            });
                            // console.log('datafield properties', datafield_properties);

                            // Since the page isn't being reloaded, the themeElement properties
                            //  also need to be checked
                            var tmp = data.d.affected_theme_elements;
                            // console.log('affected themeElements', tmp);
                            $.each(tmp, function(num, te_id) {
                                var te_id = parseInt(te_id);
                                if ( theme_element_properties.has(te_id) ) {
                                    var te_props = theme_element_properties.get(te_id);
                                    te_props.set('has_render_plugin_instance', false);
                                }

                                // Delete any placeholder text inside the themeElement
                                if ( $("#ThemeElement_" + te_id).length > 0 )
                                    $("#ThemeElement_" + te_id).children(".ODRInnerBox").first().html('');
                            });
                            // console.log('theme_element properties', theme_element_properties);

                            // The javascript array of datatype properties won't have changed, but should
                            //  reset the left panel just in case
                            RenderToolSet(datatype_id, 'datatype');
                        }

                        closeODRRemodal();
                        notifySaved();
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Close the dialog so it's not in some half-initialized state
                        closeODRRemodal();
                    },
                    complete: function(jqXHR, textStatus) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }
                    }
                });
            });

            $("#ODRRenderPluginFormSubmit").unbind('click').click(function(event) {
                // Don't automatically submit the form...
                event.preventDefault();
                event.stopImmediatePropagation();

                {% if not is_illegal_render_plugin %}
                // ...use this function instead
                submitRenderPluginForm();
                {% endif %}
            });

            {% if is_illegal_render_plugin %}
            // The datatype/datafield can't use this render plugin for whatever reason
            $("#ODRRenderPluginFormSubmit").html('Update Render Plugin').prop('disabled', true);
            {% elseif render_plugin_instance is null %}
            // Either the datatype/datafield doesn't have a render plugin, or this is a different
            //  render plugin that the datatype/datafield can use
            $("#ODRRenderPluginFormSubmit").html('Use This Render Plugin').prop('disabled', false);
            {% elseif render_plugin_instance is not null and render_plugin_instance.deletedAt is null and render_plugin_instance.renderPlugin.id == render_plugin.id %}
            // The datatype/datafield is using this render plugin
            $("#ODRRenderPluginFormSubmit").html('Update Render Plugin').prop('disabled', false);
            {% endif %}
        {% else %}
            {# user is not allowed to make changes to this #}
            $(".ODRDetachPlugin").unbind('click').prop('disabled', true);
            $(".ODRRenderPluginOptionsMap").prop('disabled', true);
        {% endif %}
        });
    </script>
{% endspaceless %}
