{% spaceless %}

    {% set valid_fieldtype = true %}
    {% if local_datafield != null and plugin.pluginClassName != "odr_plugins.base.default" %}
        {% for plugin_field in render_plugin_fields %}
            {% if local_datafield.fieldtype.id not in allowed_fieldtypes[plugin_field.id] %}
                {% set valid_fieldtype = false %}
            {% endif %}
        {% endfor %}
    {% endif %}

    <fieldset>
        {% if valid_fieldtype == false %}
            <span><i class="fa fa-lg fa-exclamation-triangle"></i></span>
            <span>&nbsp;The "{{ plugin.pluginName }}" Render Plugin is not compatible with a "{{ local_datafield.fieldtype.typeclass }}" Datafield</span>
        {% else %}
            {{ plugin.description }}
        {% endif %}
    </fieldset>

{% if local_datafield == null %}    {# if render plugin is for a datatype #}
    <fieldset>
        {# Determine if the rendering plugin has any required fields #}
        {% set has_fields = 0 %}
        {% for plugin_field in render_plugin_fields %}
            {% if plugin_field.renderplugin.id == plugin.id %}
                {% set has_fields = 1 %}
            {% endif %}
        {% endfor %}

        {% if has_fields == 0 %}
            This Render Plugin does not require specific fields.
        {% else %}
            {# Print out all required fields for this plugin #}
            <table class="pure-table pure-table-bordered pure-table-striped">
                <thead><tr>
                    <th>Field Name</th>
                    <th>Field Description</th>
                    <th>Field Type</th>
                    <th>Map to DataField...</th>
                </tr></thead>
                <tbody>
                {% for plugin_field in render_plugin_fields %}
                    <tr>
                        <td><strong>{{ plugin_field.fieldname }}: </strong></td>
                        <td>{{ plugin_field.description }}</td>
                        <td>
                            <select id="plugin_fieldtype_{{ plugin_field.id }}" class="ODRRenderPluginFieldtype" name="plugin_fieldtypes[{{ plugin_field.id }}]">
                                {% for ft_id,ft in all_fieldtypes %}
                                    {% if ft_id in allowed_fieldtypes[plugin_field.id] %}
                                        <option value="{{ ft_id }}">{{ ft.gettypeclass }}</option>
                                    {% endif %}
                                {% endfor %}
                            </select>
                        </td>
                        <td>
                            {# Print out a dropdown of fields in this datatype that match the fieldtype of the required field #}
                            <select id="plugin_map_{{ plugin_field.id }}" class="ODRRenderPluginMap" name="plugin_map[{{ plugin_field.id }}]" rel="{{ plugin_field.id }}">
                                <option value="-1" selected>Create new datafield...</option>
                                {% for df in datafields %}
                                    {% if df.fieldtype.id in allowed_fieldtypes[plugin_field.id] %}
                                        <option value="{{ df.id }}" rel="{{ df.fieldtype.id }}">{{ df.fieldname }}</option>
                                    {% endif %}
                                {% endfor %}
                            </select>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>

            <div id="plugin_datafield_creation_warn">
                <span><i class="fa fa-lg fa-exclamation-circle"></i></span>
                <span>&nbsp;Saving this Render Plugin will trigger the creation of new Datafields</span>
            </div>
        {% endif %}
    </fieldset>

<script>
    $(function() {
        {# apparently this block of code can't be moved to plugin_settings_dialog_form.html.twig #}
        $(".ODRRenderPluginMap").unbind('change').change(function() {
            var datafield_id = $(this).val();
            var plugin_field_id = $(this).attr('rel');
            var fieldtype_id = $(this).children(':selected').attr('rel');

            if (datafield_id != '-1') {
                // Prevent user from changing fieldtype of existing datafield
                $("#plugin_fieldtype_" + plugin_field_id).attr('disabled', 'disabled');
                // Select fieldtype of selected datafield, for consistency
                $("#plugin_fieldtype_" + plugin_field_id).val(fieldtype_id);

                // Show warning about creating new datafields if needed
                var show_warning = false;
                $(".ODRRenderPluginMap").each(function() {
                    if ( $(this).val() == '-1' ) {
                        show_warning = true;
                        return false;
                    }
                });

                if (show_warning)
                    $("#plugin_datafield_creation_warn").show();
                else
                    $("#plugin_datafield_creation_warn").hide();
            }
            else {
                // Let user select fieldtype of new datafield
                $("#plugin_fieldtype_" + plugin_field_id).removeAttr('disabled');
                 // Show warning about creating new datafields
                $("#plugin_datafield_creation_warn").show();
            }
        });

    {% if render_plugin_map != null %}
        // Pre-select any existing datafield mappings
        {% for plugin_field in render_plugin_fields %}
            {% for map in render_plugin_map %}
                {% if map.renderpluginfields.id == plugin_field.id %}
                $("#plugin_map_{{ plugin_field.id }}").val("{{ map.datafield.id }}");
                $("#plugin_map_{{ plugin_field.id }}").trigger('change');
                {% endif %}
            {% endfor %}
        {% endfor %}
    {% endif %}

    });
</script>

{% else %}  {# render plugin is for a datafield #}
    {% for plugin_field in render_plugin_fields %}
        <input type="hidden" name="plugin_map[{{ plugin_field.id }}]" value="{{ local_datafield.id }}" />
    {% endfor %}
{% endif %}

{% if valid_fieldtype == true %}
    <fieldset style="text-align: left;">

        {# Determine if the rendering plugin has any available options #}
        {% set has_options = 0 %}
        {% for plugin_id, plugin_options in available_options %}
            {% if plugin_id == plugin.id %}
                {% set has_options = 1 %}
            {% endif %}
        {% endfor %}

        {% if has_options == 0 %}
            <div style="text-align: center;">This Render Plugin has no options.</div>
        {% else %}
            {% for plugin_id, plugin_options in available_options %}
                {% if plugin_id == plugin.id %}

                    {% for option_key,option in plugin_options %}
                        {# Save the default value for the option, if there is one #}
                        {% set default = '' %}
                        {% if option.default is defined %}
                            {% set default = option.default %}
                        {% endif %}

                        <div class="pure-u-1 pure-u-lg-1-2 {#pure-u-xl-1-3#}">
                            <label for="plugin_option_{{ option_key }}">{{ option.name }}<span class="ODRRenderPlugin_option_description" title="{{ option.description }}">?</span></label>
                            {% if option.choices is defined %}

                                {# Create a dropdown to hold the available choices #}
                                <select id="plugin_option_{{ option_key }}" name="plugin_options[{{ option_key }}]">
                                    {% if "," in option.choices %}
                                        {% set choices = option.choices|split(',') %}
                                        {% for choice in choices %}
                                            {% set mychoice = choice|split('||') %}
                                            {% if current_plugin_options == null %}
                                                {# Use the default value to set the initial selection for the dropdown #}
                                                <option value="{{ mychoice[0] }}" {% if mychoice[0] == default %}selected{% endif %}>{{ mychoice[1] }}</option>
                                            {% else %}
                                                {# Locate the previously saved value for this plugin option and use that to set the initial selection for the dropdown #}
                                                {% set found = false %}
                                                {% for current_option in current_plugin_options %}
                                                    {% if current_option.optionname == option_key %}
                                                        {% set found = true %}
                                                        <option value="{{ mychoice[0] }}" {% if current_option.optionvalue == mychoice[0] %}selected{% endif %}>{{ mychoice[1] }}</option>
                                                    {% endif %}
                                                {% endfor %}
                                                {% if found == false %}
                                                    <option value="{{ mychoice[0] }}" {% if mychoice[0] == default %}selected{% endif %}>{{ mychoice[1] }}</option>
                                                {% endif %}
                                            {% endif %}
                                        {% endfor %}
                                    {% else %}
                                        {% set choices = option.choices|split('||') %}
                                        {% for choice in choices %}
                                            {% if current_plugin_options == null %}
                                                {# Use the default value to set the initial selection for the dropdown #}
                                                <option value="{{ choice }}" {% if choice == default %}selected{% endif %}>{{ choice }}</option>
                                            {% else %}
                                                {# Locate the previously saved value for this plugin option and use that to set the initial selection for the dropdown #}
                                                {% set found = false %}
                                                {% for current_option in current_plugin_options %}
                                                    {% if current_option.optionname == option_key %}
                                                        {% set found = true %}
                                                        <option value="{{ choice }}" {% if current_option.optionvalue == choice %}selected{% endif %}>{{ choice }}</option>
                                                    {% endif %}
                                                {% endfor %}
                                                {% if found == false %}
                                                    <option value="{{ choice }}" {% if choice == default %}selected{% endif %}>{{ choice }}</option>
                                                {% endif %}
                                            {% endif %}
                                        {% endfor %}
                                    {% endif %}
                                </select>

                            {% else %}

                                {# Create a textfield so the user can enter a value #}
                                {% if current_plugin_options == null %}
                                    {# Fill the textfield with the default value for the option #}
                                    <input id="plugin_option_{{ option_key }}" size="20" type="text" name="plugin_options[{{ option_key }}]" value="{{ default }}" />
                                {% else %}
                                    {# Locate the previously saved value for this plugin option and use that to fill the textfield #}
                                    {% set found = false %}
                                    {% for current_option in current_plugin_options %}
                                        {% if current_option.optionname == option_key %}
                                            {% set found = true %}
                                            <input id="plugin_option_{{ option_key }}" size="20" type="text" name="plugin_options[{{ option_key }}]" value="{{ current_option.optionvalue }}" />
                                        {% endif %}
                                    {% endfor %}
                                    {% if found == false %}
                                        <input id="plugin_option_{{ option_key }}" size="20" type="text" name="plugin_options[{{ option_key }}]" value="{{ default }}" />
                                    {% endif %}
                                {% endif %}

                            {% endif %}
                        </div>

                    {% endfor %}

                {% endif %}
            {% endfor %}
        {% endif %}
    </fieldset>
{% endif %}

{% endspaceless %}
