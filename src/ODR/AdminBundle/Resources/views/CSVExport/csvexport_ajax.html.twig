{% spaceless %}

{% set datatype = datatype_array[initial_datatype_id] %}

<h1 class="grid_12 no-margin-top-phone">
    <span>CSV Export &raquo; {{ datatype.dataTypeMeta.shortName }}</span>
</h1>

    <div id="CSVExportForm">

        <form id="csvexport_form" style="margin:10px;{#display:none;#}" action="{{ path('odr_csv_export_start') }}">
            <input type="hidden" value="{{ odr_tab_id }}" name="odr_tab_id"/>
            <input type="hidden" value="{{ datatype.id }}" name="datatype_id"/>

            <table>
                <tbody>
                <tr class="ODRExportDelimiter">
                    <td>Column delimiter:</td>
                    <td>
                        <select class="DelimiterSelect">
                            {#<option>Select a delimiter...</option>#}
                            <option rel=",">{comma}</option>
                            <option rel="tab">{tab}</option>
                            <option rel="">{other}</option>
                        </select>
                    </td>
                    <td>
                        <input id="delimiter_field" class="ODRDelimiterField"
                               type="text" name="delimiter"
                               maxlength="1" size="3"
                        />
                    </td>
                    <td>
                        <span class="ODRInputError ODRWarnWrapper">
                            <i class="fa fa-warning"></i>
                            <span id="delimiter_warn"></span>
                        </span>
                    </td>
                </tr>
                <tr class="ODRFileImageDelimiter">
                    <td>File/Image delimiter:</td>
                    <td>
                        <select class="FileImageDelimiterSelect">
                            {#<option>Select a delimiter...</option>#}
                            <option rel="|">{pipe}</option>
                            <option rel=",">{comma}</option>
                            {#<option rel="">{other}</option>#}
                        </select>
                    </td>
                    <td>
                        <input id="file_image_delimiter_field" class="ODRDelimiterField"
                               type="text" name="file_image_delimiter"
                               maxlength="3" size="4"
                        />
                    </td>
                    <td>
                        <span class="ODRInputError ODRFileImageWarnWrapper">
                            <i class="fa fa-warning"></i>
                            <span id="file_image_delimiter_warn"></span>
                        </span>
                    </td>
                </tr>
                <tr class="ODRRadioDelimiter">
                    <td>Multiple Radio/Select delimiter:</td>
                    <td>
                        <select class="RadioDelimiterSelect">
                            {#<option>Select a delimiter...</option>#}
                            <option rel="|">{pipe}</option>
                            <option rel=",">{comma}</option>
                            <option rel="space">{space}</option>
                            <option rel="">{other}</option>
                        </select>
                    </td>
                    <td>
                        <input id="radio_delimiter_field" class="ODRDelimiterField"
                               type="text" name="radio_delimiter"
                               maxlength="3" size="4"
                        />
                    </td>
                    <td>
                        <span class="ODRInputError ODRRadioWarnWrapper">
                            <i class="fa fa-warning"></i>
                            <span id="radio_delimiter_warn"></span>
                        </span>
                    </td>
                </tr>
                <tr class="ODRTagDelimiter">
                    <td>Tags delimiter:</td>
                    <td>
                        <select class="TagDelimiterSelect">
                            {#<option>Select a delimiter...</option>#}
                            <option rel="|">{pipe}</option>
                            <option rel=",">{comma}</option>
                            <option rel="">{other}</option>
                        </select>
                    </td>
                    <td>
                        <input id="tag_delimiter_field" class="ODRDelimiterField"
                               type="text" name="tag_delimiter"
                               maxlength="3" size="4"
                        />
                    </td>
                    <td>
                        <span class="ODRInputError ODRTagWarnWrapper">
                            <i class="fa fa-warning"></i>
                            <span id="tag_delimiter_warn"></span>
                        </span>
                    </td>
                </tr>
                <tr class="ODRTagHierarchyDelimiter">
                    <td>Tag Hierarchy delimiter:</td>
                    <td>
                        <select class="TagHierarchyDelimiterSelect">
                            {#<option>Select a delimiter...</option>#}
                            <option rel=">>">&gt;&gt;</option>
                            <option rel="">{other}</option>
                        </select>
                    </td>
                    <td>
                        <input id="tag_hierarchy_delimiter_field" class="ODRDelimiterField"
                               type="text" name="tag_hierarchy_delimiter"
                               maxlength="3" size="4"
                        />
                    </td>
                    <td>
                        <span class="ODRInputError ODRTagHierarchyWarnWrapper">
                            <i class="fa fa-warning"></i>
                            <span id="tag_hierarchy_delimiter_warn"></span>
                        </span>
                    </td>
                </tr>
                </tbody>
            </table>

        </form>

        <div style="margin: 10px;">
            <button id="ODRCSVExport_selectall" class="pure-button" type="button">Select All</button>
            &nbsp;
            <button id="ODRCSVExport_deselectall" class="pure-button" type="button">Deselect All</button>
            &nbsp;
            <button class="ODRCSVExport_startexport pure-button pure-button-primary">Export</button>
        </div>

        {% include 'ODRAdminBundle:CSVExport:csvexport_area.html.twig' with {
            'datatype_array': datatype_array,
            'theme_array': theme_array,
            'site_baseurl': site_baseurl,

            'initial_datatype_id': initial_datatype_id,
            'initial_theme_id': initial_theme_id
        } %}

        <div style="margin: 15px;">
            <button class="ODRCSVExport_startexport pure-button pure-button-primary" type="button">Export</button>
        </div>
    </div>

    <div id="LoadingBlock" class="ODRHidden">
        <div class="ODRRemodalLoading pure-u-1">
            <div class="JobStatusWrapper">
                <div class="JobComplete ODRHidden">Export Complete</div>
                <div class="loading-container">
                    <div class="loading"></div>
                    <div class="loading-text">exporting</div>
                </div>
            </div>
            <div class="JobTracker"></div>
            <div class="CSVExportMessage">Your download will be ready momentarily. If you don't want to wait, feel free
                to continue to use the site and a message will inform you when the download is ready.
            </div>
        </div>
    </div>


{% endspaceless %}

<script>

    $(function() {
        // Adding/removing the class .ODRSearchResultsWide triggers a 0.25s transition
        disableSearchSidebar();    {# defined in ODRAdminBundle:Default:common_js.html.twig #}
        setTimeout( function() { $("#ODRCSVExport_selectall").trigger('click'); }, 350);

        initCSVExportPage();
        window.scrollTo(0,0);

        // Need a tab id in html5 sessionStorage if one doesn't exist
        if ( !window.sessionStorage.getItem('odr_tab_id') )
            window.sessionStorage.setItem('odr_tab_id', '{{ odr_tab_id }}');

        $("#ODRCSVExport_selectall").unbind('click').click(function() {
            $(".ODRCSVExportField").each(function() {
                if ( $(this).hasClass('ODRUnselectedCSVExportField') && !$(this).hasClass('ODRBlockedCSVExportField') )
                    $(this).trigger('click').trigger('selectAll.ODRCSVExport');
            });
        });

        $("#ODRCSVExport_deselectall").unbind('click').click(function() {
            $(".ODRCSVExportField").each(function() {
                if ( $(this).hasClass('ODRSelectedCSVExportField') && !$(this).hasClass('ODRBlockedCSVExportField') )
                    $(this).trigger('click').trigger('deselectAll.ODRCSVExport');
            });
        });

        $(".ODRCSVExport_startexport").unbind('click').click(function() {
            doCSVExport();
        });

        $('#ODRHelpButton').unbind('click').click(function() {
            ODRCSVExport_startIntroJS();
        });
        ODRCSVExport_setupIntroJS();
    });

    /**
     * Hides elements and attaches click handlers to the page.
     */
    function initCSVExportPage() {

        // Hide all TEDs without input fields
        $(".ODRThemeElement").each(function() {
            var found = false;
            $(this).find("input").each(function() {
                found = true;
                return false;
            });

            if (!found)
                $(this).hide();
        });

        $(".ODRCSVExportField").unbind('click').click(function() {
            if ( $(this).hasClass('ODRExportPluginField') )
                return;

            if ( $(this).hasClass('ODRUnselectedCSVExportField') ) {
                $(this).attr('title', 'This datafield will be exported');
                $(this).removeClass('ODRUnselectedCSVExportField').addClass('ODRSelectedCSVExportField');

                if ( $(this).hasClass('ODRExportFileImageField') ) {
                    $(".ODRFileImageDelimiter").show();

                    var option = $(".FileImageDelimiterSelect").children('option').first();
                    $("#file_image_delimiter_field").val( $(option).attr('rel') ).prop('disabled', false);
                }
                if ( $(this).hasClass('ODRExportRadioField') ) {
                    $(".ODRRadioDelimiter").show();

                    var option = $(".RadioDelimiterSelect").children('option').first();
                    $("#radio_delimiter_field").val( $(option).attr('rel') ).prop('disabled', false);
                }
                if ( $(this).hasClass('ODRExportTagField') ) {
                    $(".ODRTagDelimiter").show();

                    var option = $(".TagDelimiterSelect").children('option').first();
                    $("#tag_delimiter_field").val( $(option).attr('rel') ).prop('disabled', false);
                }
                if ( $(this).hasClass('ODRExportTagHierarchy') ) {
                    $(".ODRTagHierarchyDelimiter").show();

                    var option = $(".TagHierarchyDelimiterSelect").children('option').first();
                    $("#tag_hierarchy_delimiter_field").val( $(option).attr('rel') ).prop('disabled', false);
                }
            }
            else {
                $(this).attr('title', 'This datafield will not be exported');
                $(this).addClass('ODRUnselectedCSVExportField').removeClass('ODRSelectedCSVExportField');

                // Don't want to disable secondary delimiter fields if another datafield being exported
                //  still needs them
                if ( $(this).hasClass('ODRExportFileImageField') ) {
                    if ( $(".ODRExportFileImageField.ODRSelectedCSVExportField").length === 0) {
                        $(".ODRFileImageDelimiter").hide();

                        var option = $(".FileImageDelimiterSelect").children('option').first();
                        $(option).prop('selected', true);
                        $("#file_image_delimiter_field").val( $(option).attr('rel') ).hide().prop('disabled', true);
                    }
                }
                if ( $(this).hasClass('ODRExportRadioField') ) {
                    if ( $(".ODRExportRadioField.ODRSelectedCSVExportField").length === 0) {
                        $(".ODRRadioDelimiter").hide();

                        var option = $(".RadioDelimiterSelect").children('option').first();
                        $(option).prop('selected', true);
                        $("#radio_delimiter_field").val( $(option).attr('rel') ).hide().prop('disabled', true);
                    }
                }
                if ( $(this).hasClass('ODRExportTagField') ) {
                    if ( $(".ODRExportTagField.ODRSelectedCSVExportField").length === 0) {
                        $(".ODRTagDelimiter").hide();

                        var option = $(".TagDelimiterSelect").children('option').first();
                        $(option).prop('selected', true);
                        $("#tag_delimiter_field").val( $(option).attr('rel') ).hide().prop('disabled', true);
                    }
                }
                if ( $(this).hasClass('ODRExportTagHierarchy') ) {
                    if ( $(".ODRExportTagHierarchy.ODRSelectedCSVExportField").length === 0) {
                        $(".ODRTagHierarchyDelimiter").hide();

                        var option = $(".TagHierarchyDelimiterSelect").children('option').first();
                        $(option).prop('selected', true);
                        $("#tag_hierarchy_delimiter_field").val( $(option).attr('rel') ).hide().prop('disabled', true);
                    }
                }
            }

            updateWarnings();
        });

        $(".ODRDelimiterField").unbind('keyup paste').on('keyup paste', function() {
            updateWarnings();
        });

        // Hide these until a field that needs them is selected
        $(".ODRFileImageDelimiter").hide();
        $(".ODRRadioDelimiter").hide();
        $(".ODRTagDelimiter").hide();
        $(".ODRTagHierarchyDelimiter").hide();

        $("#delimiter_field").hide();
        $("#delimiter_field").val(',');
        $("#file_image_delimiter_field").hide().prop('disabled', true);
        $("#radio_delimiter_field").hide().prop('disabled', true);
        $("#tag_delimiter_field").hide().prop('disabled', true);
        $("#tag_hierarchy_delimiter_field").hide().prop('disabled', true);

        $(".ODRWarnWrapper").hide();
        $(".ODRFileImageWarnWrapper").hide();
        $(".ODRRadioWarnWrapper").hide();
        $(".ODRTagWarnWrapper").hide();
        $(".ODRTagHierarchyWarnWrapper").hide();

        $(".DelimiterSelect").unbind('change').change(function() {
            var char = $(this).children(':selected').attr('rel');
            $("#delimiter_field").val(char);

            if (char === "")
                $("#delimiter_field").show();
            else
                $("#delimiter_field").hide();

            updateWarnings();
        });
        $(".FileImageDelimiterSelect").unbind('change').change(function() {
            var char = $(this).children(':selected').attr('rel');
            $("#file_image_delimiter_field").val(char);

            if (char === "")
                $("#file_image_delimiter_field").show();
            else
                $("#file_image_delimiter_field").hide();

            updateWarnings();
        });
        $(".RadioDelimiterSelect").unbind('change').change(function() {
            var char = $(this).children(':selected').attr('rel');
            $("#radio_delimiter_field").val(char);

            if (char === "")
                $("#radio_delimiter_field").show();
            else
                $("#radio_delimiter_field").hide();

            updateWarnings();
        });
        $(".TagDelimiterSelect").unbind('change').change(function() {
            var char = $(this).children(':selected').attr('rel');
            $("#tag_delimiter_field").val(char);

            if (char === "")
                $("#tag_delimiter_field").show();
            else
                $("#tag_delimiter_field").hide();

            updateWarnings();
        });
        $(".TagHierarchyDelimiterSelect").unbind('change').change(function() {
            var char = $(this).children(':selected').attr('rel');
            $("#tag_hierarchy_delimiter_field").val(char);

            if (char === "")
                $("#tag_hierarchy_delimiter_field").show();
            else
                $("#tag_hierarchy_delimiter_field").hide();

            updateWarnings();
        });
    }

    /**
     * Updates the delimiter selectors to match the selected fields.
     */
    function updateWarnings() {
        $(".ODRWarnWrapper").hide();
        $(".ODRFileImageWarnWrapper").hide();
        $(".ODRRadioWarnWrapper").hide();
        $(".ODRTagWarnWrapper").hide();
        $(".ODRTagHierarchyWarnWrapper").hide();

        var needs_file_image_delimiter = false;
        if ( $(".FileImageDelimiterSelect").is(':visible') )
            needs_file_image_delimiter = true;
        var needs_radio_delimiter = false;
        if ( $(".RadioDelimiterSelect").is(':visible') )
            needs_radio_delimiter = true;
        var needs_tag_delimiter = false;
        if ( $(".TagDelimiterSelect").is(':visible') )
            needs_tag_delimiter = true;
        var needs_tag_hierarchy_delimiter = false;
        if ( $(".TagHierarchyDelimiterSelect").is(':visible') )
            needs_tag_hierarchy_delimiter = true;

        var delimiter_value = $("#delimiter_field").val().trim();
        var file_image_delimiter_value = $("#file_image_delimiter_field").val().trim();
        var radio_delimiter_value = $("#radio_delimiter_field").val().trim();
        var tag_delimiter_value = $("#tag_delimiter_field").val().trim();
        var tag_hierarchy_delimiter_value = $("#tag_hierarchy_delimiter_field").val().trim();

        // Complain about needing a value first...
        var complaint = 'Needs a value';
        var needs_value = false;
        if ( delimiter_value === '' ) {
            $("#delimiter_warn").html(complaint);
            $(".ODRWarnWrapper").show();
            needs_value = true;
        }
        if ( needs_file_image_delimiter && file_image_delimiter_value === '' ) {
            $("#file_image_delimiter_warn").html(complaint);
            $(".ODRFileImageWarnWrapper").show();
            needs_value = true;
        }
        if ( needs_radio_delimiter && radio_delimiter_value === '' ) {
            $("#radio_delimiter_warn").html(complaint);
            $(".ODRRadioWarnWrapper").show();
            needs_value = true;
        }
        if ( needs_tag_delimiter && tag_delimiter_value === '' ) {
            $("#tag_delimiter_warn").html(complaint);
            $(".ODRTagWarnWrapper").show();
            needs_value = true;
        }
        if ( needs_tag_hierarchy_delimiter && tag_hierarchy_delimiter_value === '' ) {
            $("#tag_hierarchy_delimiter_warn").html(complaint);
            $(".ODRTagHierarchyWarnWrapper").show();
            needs_value = true;
        }
        if (needs_value)
            return;

        // ...complain about use of double-quote
        complaint = 'Double-quote is not allowed';
        var has_quote = false;
        if ( delimiter_value.indexOf("\"") !== -1) {
            $("#delimiter_warn").html(complaint);
            $(".ODRWarnWrapper").show();
            has_quote = true;
        }
        if ( needs_file_image_delimiter && file_image_delimiter_value.indexOf("\"") !== -1) {
            $("#file_image_delimiter_warn").html(complaint);
            $(".ODRFileImageWarnWrapper").show();
            has_quote = true;
        }
        if ( needs_radio_delimiter && radio_delimiter_value.indexOf("\"") !== -1) {
            $("#radio_delimiter_warn").html(complaint);
            $(".ODRRadioWarnWrapper").show();
            has_quote = true;
        }
        if ( needs_tag_delimiter && tag_delimiter_value.indexOf("\"") !== -1) {
            $("#tag_delimiter_warn").html(complaint);
            $(".ODRTagWarnWrapper").show();
            has_quote = true;
        }
        if ( needs_tag_hierarchy_delimiter && tag_hierarchy_delimiter_value.indexOf("\"") !== -1) {
            $("#tag_hierarchy_delimiter_warn").html(complaint);
            $(".ODRTagHierarchyWarnWrapper").show();
            has_quote = true;
        }
        if (has_quote)
            return;

        // ...the other delimiter strings should not contain the primary delimiter character
        complaint = "Delimiter conflict";
        if ( needs_file_image_delimiter && file_image_delimiter_value.indexOf(delimiter_value) !== -1 ) {
            $(".ODRWarnWrapper").show();
            $(".ODRFileImageWarnWrapper").show();

            $("#delimiter_warn").html(complaint);
            $("#file_image_delimiter_warn").html(complaint);
        }
        if ( needs_radio_delimiter && radio_delimiter_value.indexOf(delimiter_value) !== -1 ) {
            $(".ODRWarnWrapper").show();
            $(".ODRRadioWarnWrapper").show();

            $("#delimiter_warn").html(complaint);
            $("#radio_delimiter_warn").html(complaint);
        }
        if ( needs_tag_delimiter && tag_delimiter_value.indexOf(delimiter_value) !== -1 ) {
            $(".ODRWarnWrapper").show();
            $(".ODRTagWarnWrapper").show();

            $("#delimiter_warn").html(complaint);
            $("#tag_delimiter_warn").html(complaint);
        }
        if ( needs_tag_hierarchy_delimiter && tag_hierarchy_delimiter_value.indexOf(delimiter_value) !== -1 ) {
            $(".ODRWarnWrapper").show();
            $(".ODRTagHierarchyWarnWrapper").show();

            $("#delimiter_warn").html(complaint);
            $("#tag_hierarchy_delimiter_warn").html(complaint);
        }

        // The radio delimiter is independent of the tag delimiters, but the two tag delimiters should
        //  not contain the same characters
        if ( needs_tag_delimiter && needs_tag_hierarchy_delimiter ) {
            if ( tag_delimiter_value.indexOf(tag_hierarchy_delimiter_value) !== -1
                || tag_hierarchy_delimiter_value.indexOf(tag_delimiter_value) !== -1
            ) {
                $(".ODRTagWarnWrapper").show();
                $(".ODRTagHierarchyWarnWrapper").show();

                $("#tag_delimiter_warn").html(complaint);
                $("#tag_hierarchy_delimiter_warn").html(complaint);
            }
        }
    }

    /**
     * Performs a final verification check, then creates/submits a form from the selected datafields.
     */
    function doCSVExport() {
        // Require delimiters before exporting...
        var delimiter_value = $("#delimiter_field").val().trim();
        var file_image_delimiter_value = $("#file_image_delimiter_field").val().trim();
        var radio_delimiter_value = $("#radio_delimiter_field").val().trim();
        var tag_delimiter_value = $("#tag_delimiter_field").val().trim();
        var tag_hierarchy_delimiter_value = $("#tag_hierarchy_delimiter_field").val().trim();

        if ( delimiter_value === '' || delimiter_value.indexOf("\"") !== -1) {
            alert('Invalid column delimiter');
            return;
        }
        if ( $(".FileImageDelimiterSelect").is(':visible')
            && (file_image_delimiter_value === '' || file_image_delimiter_value.indexOf("\"") !== -1)
        ) {
            alert('Invalid file/image delimiter');
            return;
        }
        if ( $(".RadioDelimiterSelect").is(':visible')
            && (radio_delimiter_value === '' || radio_delimiter_value.indexOf("\"") !== -1)
        ) {
            alert('Invalid radio delimiter');
            return;
        }
        if ( $(".TagDelimiterSelect").is(':visible')
            && (tag_delimiter_value === '' || tag_delimiter_value.indexOf("\"") !== -1)
        ) {
            alert('Invalid tag delimiter');
            return;
        }
        if ( $(".TagHierarchyDelimiterSelect").is(':visible')
            && (tag_hierarchy_delimiter_value === '' || tag_hierarchy_delimiter_value.indexOf("\"") !== -1)
        ) {
            alert('Invalid tag hierarchy delimiter');
            return;
        }


        // Delete any datafields already marked for export so a new list can be constructed
        $(".ODRExportEntry").remove();

        // Grab which fields to export
        var do_export = false;
        $(".ODRCSVExportField").each(function() {
            if ( $(this).hasClass('ODRSelectedCSVExportField') && !$(this).hasClass('ODRBlockedCSVExportField') ) {
                var id_data = $(this).attr('id').split(/_/);
                var datafield_id = id_data[1];

                if ( !$(this).hasClass('ODRExportPluginField') ) {
                    // For regular datafields, just throw the field's id into a form
                    do_export = true;
                    var element = $("<input>", {id: "Field_" + datafield_id + "_export", class: "ODRExportEntry", type: "hidden", value: datafield_id, name: "datafields[]"});
                    $("#csvexport_form").append(element);
                }
                else {
                    // For plugin fields, find each html element that has a name attribute
                    $(this).find('[name]').each(function() {
                        var element_name = $(this).attr('name');
                        var element_value = $(this).attr('value');

                        // Only add elements if they're active
                        var export_element = false;
                        if ( $(this).attr('type') === 'text' )
                            export_element = true;
                        else if ( $(this).attr('type') === 'checkbox' && $(this).prop('checked') )
                            export_element = true;

                        if ( export_element ) {
                            do_export = true;
                            var element = $("<input>", {id: "Field_" + datafield_id + "_export", class: "ODRExportEntry", type: "hidden", value: element_value, name: "plugin_datafields[" + datafield_id + "][" + element_name + "]"});
                            $("#csvexport_form").append(element);
                        }
                    });
                }
            }
        });

        if ( !do_export ) {
            alert( 'No datafields selected for export' );
            return;
        }

        var data = $("#csvexport_form").serialize();
        var url = $("#csvexport_form").attr('action');

        // console.log( data.replaceAll('%5B', '[').replaceAll('%5D', ']') ); return;

        $.ajax({
            type: 'POST',
            url: url,
            data: data,
            dataType: 'json',
            success: function(data, textStatus, jqXHR) {
                if (data.r == 0) {
                    // Replace this with loading message/checker directly
                    $('#CSVExportForm').hide();
                    $('#LoadingBlock').fadeIn('fast');
                    // Get CSV Exports from Jobs Page - add messaging

                    // data.d.tracked_job_id
                    getJobProgress('csv_export', data.d.tracked_job_id);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Not strictly necessary to have this off in its own function, but it makes more sense this way.
     */
    function ODRCSVExport_setupIntroJS() {
        // Setup IntroJS Walkthrough
        $('#ODRHelpButton')
            .attr('data-step', '1')
            .attr('data-intro', 'Welcome to the ODR Help System.  This system will guide you through the features of this page.<br><br>For quicker navigation, use your left and right arrow keys to go through the tutorial.');

        $('#CSVExportForm').prev()
            .attr('data-step', '2')
            .attr('data-intro', 'This page allows you to create a CSVExport from the records in the search result.');

        $('.ODRDataField').first()
            .attr('data-step', '3')
            .attr('data-intro', "Most likely, you don't want to include every single fields in the export. Clicking on a field will change whether it's included in the export or not...fields with a green overlay will be exported, while fields with a red overlay will not.");
        $('#ODRCSVExport_selectall')
            .attr('data-step', '4')
            .attr('data-intro', "Clicking this button will select all fields on the page for inclusion in the export...");
        $('#ODRCSVExport_deselectall')
            .attr('data-step', '5')
            .attr('data-intro', "...and clicking this button will do the opposite, excluding all fields on the page from the export.  You'll need to select at least one field afterwards to be able to begin an export.");

        $('.ODRExportDelimiter')
            .attr('data-step', '6')
            .attr('data-intro', "This dropdown allows you to define the delimiter used for separating values.<br><br>The two most common delimiters for this kind of file are commas (Comma-Separated File) and tabs (Tab-Separated File), but you can also define your own.");
        $('.ODRFileImageDelimiter')
            .attr('data-step', '7')
            .attr('data-intro', 'File and Image fields could have multiple uploads, so another delimiter is required to separate the filenames inside those fields.');
        $('.ODRRadioDelimiter')
            .attr('data-step', '8')
            .attr('data-intro', 'Radio fields that allow multiple selected options need an additional delimiter to separate the names of selected options from each other.');
        $('.ODRTagDelimiter')
            .attr('data-step', '9')
            .attr('data-intro', 'Tag fields allow multiple selections, so a delimiter is required to handle the possibility of multiple selected tags.');
        $('.ODRTagHierarchyDelimiter')
            .attr('data-step', '10')
            .attr('data-intro', 'Tag fields that define multiple levels of tags (e.g. parents, children) need their own delimiter to be able to correctly identify which child tags are selected.');
        $('.ODRExportDelimiter').parent()    {# TODO - is there a way to skip this step if there's only one visible delimiter?  introJs().nextStep() doesn't do it #}
            .attr('data-step', '11')
            .attr('data-intro', "All of the delimiters defined or selected here must be different from each other, otherwise the resulting export file would be useless.");

        $('.ODRCSVExport_startexport').first()
            .attr('data-step', '12')
            .attr('data-intro', 'Once you have selected the fields and the delimiters you want for the CSV file, clicking on this button will cause ODR to begin exporting the selected data.');
    }

    /**
     * Begins the introJS tour for ODR's CSVExport page.
     */
    function ODRCSVExport_startIntroJS() {
        introJs().setOption("disableInteraction", true)
            .start();
    }
</script>

{% include 'ODRAdminBundle:Job:job_progress.html.twig' %}
