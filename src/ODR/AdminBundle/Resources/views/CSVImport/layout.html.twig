{% spaceless %}

    {% set external_id_field = datatype.getexternalidfield %}
    {% set name_field = datatype.getnamefield %}

    <div class="csv_import_header pure-u-1">
        <button type="button" class="pure-button" onclick="selectAllFields();">Select All</button>
        &nbsp;
        <button type="button" class="pure-button" onclick="deselectAllFields();">Deselect All</button>
    </div>


    <form id="csv_import_form">
        <input type="hidden" name="datatype_id" value="{{ datatype.id }}" />

        {% if parent_datatype != null %}
            {% include 'ODRAdminBundle:CSVImport:parent_datatype_settings.html.twig' with {'parent_datatype': parent_datatype, 'columns': columns, 'presets': presets} %}
        {% endif %}

        {% include 'ODRAdminBundle:CSVImport:uniqueness_warnings.html.twig' with {'datatype': datatype, 'datafields': datafields} %}

        <table id="csv_import_table" class="pure-table pure-table-striped" style="font-size: 1.25em;">
            <thead>
                <tr id="header">
                    <th>Column Name</th>
                    <th>Import?</th>
                    <th>Require unique values?</th>
                    <th>Map to datafield...</th>
                    <th>Fieldtype...</th>
                    <th>Secondary Delimiter...</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                {% for column_id, column_name in columns %}
                <tr>
                    <td>{{ column_name }}</td>
                    <td><input type="checkbox" id="import_checkbox_{{ column_id }}" class="import_checkbox" rel="{{ column_id }}" /></td>

                    <td>
                        <input type="checkbox" id="column_{{ column_id }}_unique" class="unique_checkbox" name="unique_columns[{{ column_id }}]" value="1" disabled rel="{{ column_id }}" />
                        <span class="inline_warning">&nbsp;<i class="fa fa-lg fa-exclamation-circle Cursor"></i>&nbsp;Datafield must have unique values</span>
                    </td>

                    <td>
                        <select id="column_{{ column_id }}" class="datafield_mapping" name="datafield_mapping[{{ column_id }}]" rel="{{ column_id }}" disabled>
                            <option value="new">Create new datafield...</option>
                            {% for datafield in datafields %}
                            {% if datafield.fieldtype.id in allowed_fieldtypes %}
                            <option value="{{ datafield.id }}" rel="{{ datafield.fieldtype.id }}">{{ datafield.fieldname }}</option>
                            {% endif %}
                            {% endfor %}
                        </select>
                    </td>

                    <td>
                        <select id="column_{{ column_id }}_fieldtype" class="fieldtype_mapping" name="fieldtype_mapping[{{ column_id }}]" rel="{{ column_id }}" disabled>
                            {% for fieldtype in fieldtypes %}
                            <option value="{{ fieldtype.id }}">{{ fieldtype.typename }}</option>
                            {% endfor %}
                        </select>
                    </td>

                    <td>
                        <select id="column_{{ column_id }}_delimiter" class="secondary_delimiter" name="column_delimiters[{{ column_id }}]" disabled>
                            <option value="">Select a delimiter...</option>
                            <option value="semicolon">{semicolon}</option>
                            <option value="colon">{colon}</option>
                            <option value="pipe">{pipe}</option>
                        </select>
                    </td>

                    <td id="column_{{ column_id }}_meta"></td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </form>

    <hr>
    <div><b>Any files or images that you want to import using this CSV file need to be uploaded here.</b></div>
    {% include 'ODRAdminBundle:CSVImport:filelist.html.twig' with {'datatype_id': datatype.id, 'presets': presets} %}
    <hr>

    <div style="margin-top: 10px;">
        <button id="validate_button" type="button" class="pure-button pure-button-primary" onclick="validateImport();">Validate Import</button>
    </div>

<style>
    .csv_import_header {
        margin: 10px 10px 10px 0px;
    }
    .inline_warning {
        position: relative;
        top: -3px;
    }
</style>

<script>
    var block_changes = false;
    var change_block_str = 'You have changed something in the field layout...either re-validate the import, or reload the page to undo your changes';

    var unique_datafields = [];
    var unique_fieldtypes = [];

    $(function() {
{% for df in datafields %}{% if df.getisunique == 1 %}
        unique_datafields.push("{{ df.id }}");
{% endif %}{% endfor %}
{% for ft in fieldtypes %}{% if ft.getcanbeunique == 1 %}
        unique_fieldtypes.push("{{ ft.id }}");
{% endif %}{% endfor %}

        $(".inline_warning").hide();

        $(".import_checkbox").unbind('change');
        $(".import_checkbox").change(function() {
            var column_id = $(this).attr('rel');

            if ( $(this).is(':checked') ) {
                $("#column_" + column_id).removeAttr('disabled');
                $("#column_" + column_id + "_unique").removeAttr('disabled');

                if ( $("#column_" + column_id).val() == "new" )
                    $("#column_" + column_id + "_fieldtype").removeAttr('disabled');

                // Warn about unique datafields
                setUniqueWarnings(column_id, unique_datafields);
                updateHeaderWarnings();
            }
            else {
                $("#column_" + column_id).attr('disabled', 'disabled');

                $("#column_" + column_id + "_unique").attr('disabled', 'disabled');
                $("#column_" + column_id + "_unique").parent().find('.inline_warning').hide();
                if ( $("#column_" + column_id + "_unique").is(':checked') )
                    $("#column_" + column_id + "_unique").prop('checked', false);

                $("#column_" + column_id + "_fieldtype").attr('disabled', 'disabled');
                $("#column_" + column_id + "_delimiter").attr('disabled', 'disabled');

                // Warn about unique datafields
//                setUniqueWarnings(column_id, unique_datafields);
                updateHeaderWarnings();
            }

            if (block_changes)
                $("#import_button").removeAttr('onclick').attr('disabled', 'disabled').attr('title', change_block_str);
        });

        $(".unique_checkbox").unbind('click');
        $(".unique_checkbox").click(function() {
            var column_id = $(this).attr('rel');

            // Warn about unique datafields
            setUniqueWarnings(column_id, unique_datafields, unique_fieldtypes);

            if (block_changes)
                $("#import_button").removeAttr('onclick').attr('disabled', 'disabled').attr('title', change_block_str);
        });

        $(".datafield_mapping").unbind('change');
        $(".datafield_mapping").change(function() {
            var column_id = $(this).attr('rel');

            var fieldtype_id = $(this).children('option:selected').attr('rel');
            $("#column_" + column_id + "_fieldtype").val( fieldtype_id );

            // Provide the option to select a fieldtype if the user wants a new datafield
            if ( $(this).val() == "new" )
                $("#column_" + column_id + "_fieldtype").removeAttr('disabled');
            else
                $("#column_" + column_id + "_fieldtype").attr('disabled', 'disabled');

            // Need to select a delimiter for multiple radio/select fields, and for file/image fields
            if ( fieldtype_id == '13' || fieldtype_id == '15' || fieldtype_id == '2' || fieldtype_id == '3' )   // TODO - referencing fieldtypes by number
                $("#column_" + column_id + "_delimiter").removeAttr('disabled');
            else
                $("#column_" + column_id + "_delimiter").attr('disabled', 'disabled');

            // Warn about unique datafields
            setUniqueWarnings(column_id, unique_datafields, unique_fieldtypes);
            updateHeaderWarnings();
            updateDatafieldMeta(column_id);

            if (block_changes)
                $("#import_button").removeAttr('onclick').attr('disabled', 'disabled').attr('title', change_block_str);
        });

        $(".fieldtype_mapping").unbind('change');
        $(".fieldtype_mapping").change(function() {
            var column_id = $(this).attr('rel');

            // Need to select a delimiter for multiple radio/select fields, and for file/image fields
            if ( $(this).val() == '13' || $(this).val() == '15' || $(this).val() == '2' || $(this).val() == '3' )   // TODO - referencing fieldtypes by number
                $("#column_" + column_id + "_delimiter").removeAttr('disabled');
            else
                $("#column_" + column_id + "_delimiter").attr('disabled', 'disabled');

            // Display some metadata about the selected fieldtype if needed
            setUniqueWarnings(column_id, unique_datafields, unique_fieldtypes);
            updateDatafieldMeta(column_id);

            if (block_changes)
                $("#import_button").removeAttr('onclick').attr('disabled', 'disabled').attr('title', change_block_str);
        });

{% if presets != null %}

    {% for column_id, target in presets.datafield_mapping %}
        $("#import_checkbox_{{ column_id }}").trigger('click');
        $("#column_{{ column_id }}").val("{{ target }}");
        {% if target != "new" %}
        $("#column_{{ column_id }}_fieldtype").attr('disabled', 'disabled');    // don't want this fieldtype selector to be enabled
        {% endif %}
    {% endfor %}
    {% for column_id, target in presets.fieldtype_mapping %}
        $("#column_{{ column_id }}_fieldtype").val("{{ target }}");
        $("#column_{{ column_id }}_fieldtype").trigger('change');
    {% endfor %}
    {% for column_id, target in presets.column_delimiters %}
//        $("#column_{{ column_id }}_delimiter").removeAttr('disabled');
        $("#column_{{ column_id }}_delimiter").val("{{ target }}");
    {% endfor %}

    {% for column_id, tmp in presets.unique_columns %}
        if ( $("#column_{{ column_id }}_unique").is(':enabled') && !$("#column_{{ column_id }}_unique").is(':checked') ) {
            $("#column_{{ column_id }}_unique").trigger('click');
            setUniqueWarnings("{{ column_id }}", unique_datafields, unique_fieldtypes);
        }
    {% endfor %}

        // Ensure header warnings are accurate
        updateHeaderWarnings();

        block_changes = true;
{% endif %}
    });


    function updateDatafieldMeta(column_id) {

        var fieldtype = "#column_" + column_id + "_fieldtype";

        // Display some metadata about the selected fieldtype if needed
        if ( $(fieldtype).val()  == '5' )
            $("#column_" + column_id + "_meta").html('<i class="fa fa-question-circle fa-lg"></i>&nbsp;No character limit');
        else if ( $(fieldtype).val()  == '6' )
            $("#column_" + column_id + "_meta").html('<i class="fa fa-question-circle fa-lg"></i>&nbsp;255 character limit');
        else if ( $(fieldtype).val()  == '7' )
            $("#column_" + column_id + "_meta").html('<i class="fa fa-question-circle fa-lg"></i>&nbsp;64 character limit');
        else if ( $(fieldtype).val()  == '9' )
            $("#column_" + column_id + "_meta").html('<i class="fa fa-question-circle fa-lg"></i>&nbsp;32 character limit');
        else
            $("#column_" + column_id + "_meta").html('');

    }

    function setUniqueWarnings(column_id, unique_datafields) {
        // Check if the "require unique" datafield is already checked
        var is_checked = false;
        if ( $("#column_" + column_id + "_unique").is(":checked") )
            is_checked = true;

        // Check if the datafield is marked as unique
        var is_unique = false;
        if ( $("#import_checkbox_" + column_id).is(':checked') ) {
            var df_id = $("#column_" + column_id).children('option:selected').val();
            if ( unique_datafields.indexOf(df_id) != -1 )
                is_unique = true;
        }

        // Check if the fieldtype is allowed to be unique
        var unique_block = false;
        if ( $("#import_checkbox_" + column_id).is(':checked') ) {
            var ft_id = $("#column_" + column_id + "_fieldtype").children('option:selected').val();
            if ( unique_fieldtypes.indexOf(ft_id) == -1 )
                unique_block = true;
        }

        var unique_checkbox = "#column_" + column_id + "_unique";
        if ( unique_block ) {
//alert('unique_block...checked: ' + is_checked);
            // Fieldtype is not allowed to be unique...ensure "require unique" is unchecked
            if (is_checked) {
                $(unique_checkbox).prop('checked', false);
                $(unique_checkbox).parent().find('.inline_warning').hide();
            }

            // Disable checkbox so it can't be checked
            $(unique_checkbox).attr('disabled', 'disabled');            
        }
        else if ( is_unique ) {
//alert('is_unique...checked: ' + is_checked);
            // Datafield is marked as unique, ensure "require unique" is checked
            if (!is_checked) {
                $(unique_checkbox).prop('checked', true);
                $(unique_checkbox).parent().find('.inline_warning').removeAttr('style');
            }

            // Disable checkbox so it can't be unchecked
            $(unique_checkbox).attr('disabled', 'disabled');
        }
        else {
//alert('enabling field');

            if ( $(unique_checkbox).attr('disabled') == 'disabled' ) {
                // checkbox was disabled...enable it
                $(unique_checkbox).removeAttr('disabled');
            }
            else {
                // checkbox was already enabled
                if (is_checked)
                    $(unique_checkbox).parent().find('.inline_warning').removeAttr('style');
                else
                    $(unique_checkbox).parent().find('.inline_warning').hide();
            }
        }

    }

    function selectAllFields() {
        $(".import_checkbox").each(function() {
            if ( !$(this).is(':checked') ) {
                $(this).trigger('click');
            }
        });
    }


    function deselectAllFields() {
        $(".import_checkbox").each(function() {
            if ( $(this).is(':checked') ) {
                $(this).trigger('click');
            }
        });
    }


    function validateImport() {

{% if parent_datatype != null %}
        if ( $("#parent_external_id_column").val() == '' ) {
            alert('ERROR: One column of the CSV file must be mapped to the external ID for the parent Datatype');
            return;
        }
{% endif %}

        // If no checkboxes checked, no point doing any importing...
        var any_checked = false;
        var block_import = false;
        $(".import_checkbox:checked").each(function() {
            any_checked = true;

{% if parent_datatype != null %}
            if ( $("#parent_external_id_column").val() == $(this).attr('rel') ) {
                alert( "ERROR: The column mapped to the parent Datatype's external ID can't also be mapped to a Datafield" );
                block_import = true;
            }
{% endif %}
        });
        if (!any_checked) {
            alert('ERROR: No columns selected for import');
            return;
        }

        // Remove disabled attribute from any checked unique checkboxes so they're included in the post
        $(".unique_checkbox:checked").each(function() {
            $(this).removeAttr('disabled');
        });


        // Notify when same datafield selected for two different columns
        var selections = [];
        $(".datafield_mapping:enabled").each(function() {
            var selection = $(this).val();
            if (selection == 'new') {
                // Don't care about situations where a new datafield has to be created
//                continue;
            }
            else if ( selections.indexOf(selection) !== -1 ) {
                // Notify of duplicate selection
                var fieldname = $(this).children('option:selected').first().text();
                alert( 'ERROR: Multiple columns are mapped to DataField "' + fieldname + '".' );
                block_import = true;
            }
            else {
                // Haven't seen this datafield before, continue
                selections.push(selection);
            }
        });

        // TODO - warn when secondary delimiter matches primary delimiter?
        // Require all multiple select/radio fields to have a secondary delimiter
        $(".secondary_delimiter:enabled").each(function() {
            if ( $(this).val() == '' ) {
                block_import = true;
                alert( 'ERROR: All Multiple Radio/Select, File, and Image DataFields MUST have a secondary delimiter selected' );
                return false;
            }
        });


        // If any of the conditions aren't met, don't proceed with import
        if (block_import)
            return;

        if ( confirm("Are you sure you want to validate this import?") ) {
            var import_data = $("#csv_import_form").serialize();

            var url = '{{ path('odr_csv_import_start_validate') }}';

            var dataType = "json";
            $.ajax({
                cache: false,
                type: 'POST',
                url: url,
                dataType: 'json',
                data: import_data,
                success: function(data, textStatus, jqXHR) {
                    if (data.r == 0) {
                        // ...
                        alert('Beginning validation of CSV Import...');
                        var url = '{{ path('odr_job_list') }}';
                        UpdateURL(url);
                    }
                    else {
                        // An error has occurred.
                        // Show Error message dialog
                        alert(data.d);
                    }
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });

        }
    }
</script>

{% endspaceless %}
