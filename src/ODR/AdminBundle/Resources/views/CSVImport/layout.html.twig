{% spaceless %}

    <div style="margin: 10px 10px 10px 0px;">
        <button type="button" class="pure-button" onclick="selectAllFields();">Select All</button>
        &nbsp;
        <button type="button" class="pure-button" onclick="deselectAllFields();">Deselect All</button>
    </div>

    <form id="csv_import_form">
        <input type="hidden" name="datatype_id" value="{{ datatype.id }}" />

        <table id="csv_import_table" class="pure-table pure-table-striped">
            <thead>
                <tr id="header">
                    <th>Column Name</th>
                    <th>Use as external ID</th>
                    <th>Import?</th>
                    <th>Map to datafield...</th>
                    <th>Fieldtype...</th>
                    <th>Secondary Delimiter</th>
                </tr>
            </thead>
            <tbody>
                {% for column_id, column_name in columns %}
                <tr>
                    <td>{{ column_name }}</td>
                    <td><input type="checkbox" id="external_id_checkbox_{{ column_id }}" class="external_id_checkbox" name="external_id_column" value="{{ column_id }}" /></td>
                    <td><input type="checkbox" id="import_checkbox_{{ column_id }}" class="import_checkbox" rel="{{ column_id }}" /></td>
                    <td>
                        <select id="column_{{ column_id }}" class="datafield_mapping" name="datafield_mapping[{{ column_id }}]" rel="{{ column_id }}" disabled>
                            <option value="new">Create new datafield...</option>
                            {% for datafield in datafields %}
                            <option value="{{ datafield.id }}" rel="{{ datafield.fieldtype.id }}">{{ datafield.fieldname }}</option>
                            {% endfor %}
                        </select>
                    </td>
                    <td>
                        <select id="column_{{ column_id }}_fieldtype" class="fieldtype_mapping" name="fieldtype_mapping[{{ column_id }}]" rel="{{ column_id }}" disabled>
                            {% for fieldtype in fieldtypes %}
                            <option value="{{ fieldtype.id }}">{{ fieldtype.typename }}</option>
                            {% endfor %}
                        </select>
                    </td>
                    <td>
                        <select id="column_{{ column_id }}_delimiter" class="secondary_delimiter" name="column_delimiters[{{ column_id }}]" disabled>
                            <option value="">Select a delimiter...</option>
                            <option value="semicolon">{semicolon}</option>
                            <option value="colon">{colon}</option>
                            <option value="pipe">{pipe}</option>
                        </select>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </form>

    <div style="margin-top: 10px;">
        <button id="validate_button" type="button" class="pure-button pure-button-primary" onclick="validateImport();">Validate Import</button>
    </div>

<script>
    var block_changes = false;
    var change_block_str = 'You changed something in the field layout...either re-validate the import, or reload the page to undo your changes';

    $(function() {
        $(".import_checkbox").unbind('change');
        $(".import_checkbox").change(function() {
            var column_id = $(this).attr('rel');

            if ( $(this).is(':checked') ) {
//                $("#column_" + column_id + "_external").removeAttr('disabled');
                $("#column_" + column_id).removeAttr('disabled');

                if ( $("#column_" + column_id).val() == "new" )
                    $("#column_" + column_id + "_fieldtype").removeAttr('disabled');
            }
            else {
//                $("#column_" + column_id + "_external").attr('disabled', 'disabled');
                $("#column_" + column_id).attr('disabled', 'disabled');
                $("#column_" + column_id + "_fieldtype").attr('disabled', 'disabled');
                $("#column_" + column_id + "_delimiter").attr('disabled', 'disabled');
            }

            if (block_changes)
                $("#import_button").removeAttr('onclick').attr('disabled', 'disabled').attr('title', change_block_str);
        });

        $(".external_id_checkbox").unbind('change');
        $(".external_id_checkbox").change(function() {
            // Save the state of this checkbox
            var is_checked = false;
            if ( $(this).is(':checked') )
                is_checked = true;

            // Uncheck all of these external_id checkboxes
            $(".external_id_checkbox").each(function() {
                $(this).prop('checked', false);
            });

            // If the desired checkbox was originally checked, re-check it
            if ( is_checked )
                $(this).prop('checked', true);

            if (block_changes)
                $("#import_button").removeAttr('onclick').attr('disabled', 'disabled').attr('title', change_block_str);
        });

        $(".datafield_mapping").unbind('change');
        $(".datafield_mapping").change(function() {
            var column_id = $(this).attr('rel');

            var fieldtype_id = $(this).children('option:selected').attr('rel');
            $("#column_" + column_id + "_fieldtype").val( fieldtype_id );

            // Provide the option to select a fieldtype if the user wants a new datafield
            if ( $(this).val() == "new" )
                $("#column_" + column_id + "_fieldtype").removeAttr('disabled');
            else
                $("#column_" + column_id + "_fieldtype").attr('disabled', 'disabled');

            // Need to select a delimiter for multiple radio/select fields
            if ( fieldtype_id == '13' || fieldtype_id == '15' )
                $("#column_" + column_id + "_delimiter").removeAttr('disabled');
            else
                $("#column_" + column_id + "_delimiter").attr('disabled', 'disabled');

            if (block_changes)
                $("#import_button").removeAttr('onclick').attr('disabled', 'disabled').attr('title', change_block_str);
        });

        $(".fieldtype_mapping").unbind('change');
        $(".fieldtype_mapping").change(function() {
            var column_id = $(this).attr('rel');

            // Need to select a delimiter for multiple radio/select fields
            if ( $(this).val() == '13' || $(this).val() == '15' )
                $("#column_" + column_id + "_delimiter").removeAttr('disabled');
            else
                $("#column_" + column_id + "_delimiter").attr('disabled', 'disabled');

            if (block_changes)
                $("#import_button").removeAttr('onclick').attr('disabled', 'disabled').attr('title', change_block_str);
        });

{% if presets != null %}
    {% if presets.external_id_column is defined %}
        $("#external_id_checkbox_{{ presets.external_id_column }}").trigger('click');
    {% endif %}
    {% for column_id, target in presets.datafield_mapping %}
        $("#import_checkbox_{{ column_id }}").trigger('click');
        $("#column_{{ column_id }}").val("{{ target }}");
        {% if target != "new" %}
        $("#column_{{ column_id }}_fieldtype").attr('disabled', 'disabled');    // don't want this fieldtype selector to be enabled
        {% endif %}
    {% endfor %}
    {% for column_id, target in presets.fieldtype_mapping %}
        $("#column_{{ column_id }}_fieldtype").val("{{ target }}");
    {% endfor %}
    {% for column_id, target in presets.column_delimiters %}
        $("#column_{{ column_id }}_delimiter").removeAttr('disabled');
        $("#column_{{ column_id }}_delimiter").val("{{ target }}");
    {% endfor %}

        block_changes = true;
{% endif %}
    });

    function selectAllFields() {
        $(".import_checkbox").each(function() {
            if ( !$(this).is(':checked') ) {
                $(this).trigger('click');
            }
        });
    }


    function deselectAllFields() {
        $(".import_checkbox").each(function() {
            if ( $(this).is(':checked') ) {
                $(this).trigger('click');
            }
        });

        $(".external_id_checkbox").each(function() {
            if ( $(this).is(':checked') ) {
                $(this).trigger('click');
            }
        });
    }


    function validateImport() {

        // If no checkboxes checked, no point doing any importing...
        var any_checked = false;
        $(".import_checkbox").each(function() {
            if ( $(this).is(':checked') )
                any_checked = true;
        });
        if (!any_checked) {
            alert('No columns selected for import');
            return;
        }

        // Check for an external ID
        var any_checked = false;
        $(".external_id_checkbox").each(function() {
            if ( $(this).is(':checked') )
                any_checked = true;
        });
        if (!any_checked) {
            if ( !confirm("No \"external ID\" selected...Any data that is imported will NOT be able to be updated via CSV/XML at a later time.\nAre you sure you want to import?") )
                return;
        }

        // Notify when same datafield selected for two different columns
        var selections = [];
        var block_import = false;
        $(".datafield_mapping:enabled").each(function() {
            var selection = $(this).val();
            if (selection == 'new') {
                // Don't care about situations where a new datafield has to be created
//                continue;
            }
            else if ( selections.indexOf(selection) !== -1 ) {
                // Notify of duplicate selection
                var fieldname = $(this).children('option:selected').first().text();
                alert( 'ERROR: Multiple columns are mapped to DataField "' + fieldname + '".' );
                block_import = true;
            }
            else {
                // Haven't seen this datafield before, continue
                selections.push(selection);
            }
        });

        // TODO - warn when secondary delimiter matches primary delimiter
        // Require all multiple select/radio fields to have a secondary delimiter
        $(".secondary_delimiter:enabled").each(function() {
            if ( $(this).val() == '' ) {
                block_import = true;
                alert( 'ERROR: Multiple Select/Radio fields MUST have a secondary delimiter selected' );
                return false;
            }
        });


        // If any of the conditions aren't met, don't proceed with import
        if (block_import)
            return;

        if ( confirm("Are you sure you want to validate this import?") ) {
            var import_data = $("#csv_import_form").serialize();

            var url = '{{ path('odr_csv_import_start_validate') }}';

            var dataType = "json";
            $.ajax({
                cache: false,
                type: 'POST',
                url: url,
                dataType: 'json',
                data: import_data,
                success: function(data, textStatus, jqXHR) {
                    if (data.r == 0) {
                        // ...
                        alert('Beginning validation of CSV Import...');
                        var url = '{{ path('odr_job_list') }}';
                        UpdateURL(url);
                    }
                    else {
                        // An error has occurred.
                        // Show Error message dialog
                        alert(data.d);
                    }
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });

        }
    }
</script>

{% endspaceless %}
