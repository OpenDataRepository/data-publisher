{% spaceless %}

<div class="header">
    <h2>CSV Import for <span id="target_datatype_name">{{ datatype.shortname }}</span></h2>
</div>

{% if presets != null %}
<div class="ODRAccordionWrapper ODRFormAccordion ODRCSVImportHeader Pointer">
    <h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-state-active" role="tab" aria-expanded="true" aria-selected="true" tabindex="0">
        <span style="float: right;"><i class="fa fa-lg fa-caret-up"></i></span>
        <a>Field Layout</a>
    </h3>
</div>
{% endif %}

<div class="content" style="margin: 10px;">
    <button class="pure-button" onclick="cancelCSVUpload(false);">Cancel CSV Import...</button>
    </br></br>

    <form id="csvUploadForm" class="pure-form pure-form-aligned">
        <fieldset>
            <div class="pure-control-group">
                <label for="target_datatype" style="width:13em;">Datatype to import into:</label>
                <input type="hidden" name="source_datatype" id="source_datatype" value="{{ datatype.id }}" />
                <select name="target_datatype" id="target_datatype" {% if upload_type == '' %}disabled{% endif %}>
                    <option value="{{ datatype.id }}">{{ datatype.shortname }}</option>
                {% if childtypes != null and datatype.externalIdField != null %}
                    {% for childtype in childtypes %}
                        <option value="{{ childtype.id }}" rel="child{% if childtype.getexternalidfield == null %} warn{% endif %}">|-- {{ childtype.shortname }} (child)</option>
                    {% endfor %}
                {% endif %}
                {% if linked_types != null and datatype.externalIdField != null %}
                    {% for linked_type in linked_types %}
                        <option value="{{ linked_type.id }}" rel="{% if linked_type.getexternalidfield == null %}invalid {% endif %}link">|-- {{ linked_type.shortname }} ({% if linked_type.getexternalidfield == null %}invalid {% endif %}link)</option>
                    {% endfor %}
                {%  endif %}
                </select>

                <span id="childtype_import_warning" style="margin-left:15px;">
                    <span><i class="fa fa-lg fa-exclamation-triangle Cursor"></i></span>
                    <span>&nbsp;This child Datatype doesn't have an "External ID" Datafield...every row in the CSV file WILL become a new child Datarecord.</span>
                </span>

                <span id="invalid_linked_datatype_warning" style="margin-left:15px;">
                    <span><i class="fa fa-lg fa-exclamation-triangle Cursor"></i></span>
                    <span>&nbsp;This linked Datatype doesn't have an "External ID" Datafield...CSV Importing can't continue because it's impossible to determine which Datarecords to link to.</span>
                </span>

            {% if datatype.externalIdField == null and (childtypes != null or linked_types != null) %}
                <span style="margin-left:15px;">
                    <span><i class="fa fa-lg fa-exclamation-triangle Cursor"></i></span>
                    <span>&nbsp;This Datatype doesn't have an "External ID" Datafield...CSV Importing can't be performed on any children or linked Datatypes.</span>
                </span>
            {% endif %}
            </div>

            <div class="pure-control-group">
                <label for="delimiter_select" style="width:13em;">Delimiter for CSV File:</label>
                <select name="csv_delimiter" id="delimiter_select" {% if upload_type == '' %}disabled{% endif %}>
                    <option value="">Select a delimiter...</option>
                    <option value="tab">{tab}</option>
                    <option value="space">{space}</option>
                    <option value="comma">{comma}</option>
                    <option value="semicolon">{semicolon}</option>
                    <option value="colon">{colon}</option>
                    <option value="pipe">{pipe}</option>
                </select>
            </div>
        </fieldset>

        {% if upload_type == 'csv' %}
        <div id="file_upload_div">
            {% include 'ODRAdminBundle:Flow:flow_upload.html.twig' with {
                'target': 'csv_import',
                'single_file': true,
                'upload_type': 'csv',
                'datatype_id': datatype.id,
                'datarecord_id': 0,
                'datafield_id': 0,
                'callback': 'loadLayout();'
            } %}
        </div>
        {% endif %}
    </form>

    <div id="layout_content">
    {% if presets != null %}
        {% include 'ODRAdminBundle:CSVImport:layout.html.twig' with {
            'columns': columns,
            'datatype': datatype,
            'datafields': datafields,
            'fieldtypes': fieldtypes,
            'allowed_fieldtypes': allowed_fieldtypes,
            'presets': presets,
            'file_encoding_converted': file_encoding_converted
        } %}
    {% endif %}
    </div>
</div>

{% if presets != null %}
<div class="ODRAccordionWrapper ODRFormAccordion ODRCSVImportHeader Pointer" style="margin-top:15px;">
    <h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-state-active" role="tab" aria-expanded="true" aria-selected="true" tabindex="0">
        <span style="float: right;"><i class="fa fa-lg fa-caret-down"></i></span>
        <a>Validation Errors</a>
    </h3>
</div>

<div class="content" style="margin: 10px;">
    {% if errors != null and errors|length > 0 %}
        {% include 'ODRAdminBundle:CSVImport:errors.html.twig' with {'error_messages': errors} %}
    {% else %}
        <span>No errors found</span>
    {% endif %}

    {% if allow_import == true %}
    <div>
        <button id="import_button" class="pure-button pure-button-primary" onclick="doImport();">Start Import</button>
    </div>
    {% endif %}
</div>
{% endif %}

<script>
    $(function() {
        $("#file_upload_div").hide();
        $("#childtype_import_warning").hide();
        $("#invalid_linked_datatype_warning").hide();

    {% if presets == null %}
        $("#delimiter_select").unbind('change').change(function() {
            delimiterChanged( $(this).val() );
            if ( $(this).val() == "" || $("#target_datatype").children(':selected').attr('rel') == 'invalid link' )
                $("#file_upload_div").hide();
            else
                $("#file_upload_div").show();
        });

        $("#target_datatype").unbind('change').change(function() {
            // Hide both warnings...they'll get shown if required
            $("#childtype_import_warning").hide();
            $("#invalid_linked_datatype_warning").hide();

            if ( $(this).val() != "{{ datatype.id }}" ) {
                // Ensure file upload div shows correctly
                $("#delimiter_select").trigger('change');

                // Show the correct warning if necessary
                var datatree_type = $(this).children(':selected').attr('rel');
                if (datatree_type == 'child warn')
                    $("#childtype_import_warning").show();
                else if (datatree_type == 'invalid link')
                    $("#invalid_linked_datatype_warning").show();
            }
        });
    {% else %}
        $("#target_datatype").val("{{ datatype.id }}");
        {% if parent_datatype != null and parent_datatype.id != datatype.id %}
        // Show the correct warning if necessary
        var datatree_type = $("#target_datatype").children(':selected').attr('rel');
        if (datatree_type == 'child warn')
            $("#childtype_import_warning").show();
        else if (datatree_type == 'invalid link')
            $("#invalid_linked_datatype_warning").show();
        {% endif %}

        var delimiter = "{{ presets.delimiter }}";
        switch (delimiter) {
            case "\t":
                delimiter = "tab";
                break;
            case " ":
                delimiter = "space";
                break;
            case ",":
                delimiter = "comma";
                break;
            case ";":
                delimiter = "semicolon";
                break;
            case ":":
                delimiter = "colon";
                break;
            case "|":
                delimiter = "pipe";
                break;
        }

        $("#delimiter_select").val(delimiter);

        $(".ODRCSVImportHeader").next().hide();

        $(".ODRCSVImportHeader").unbind('click').click(function() {
            if ( $(this).next().is(':hidden') ) {
                $(this).next().show();

                $(this).find('i').removeClass('fa-caret-up').addClass('fa-caret-down');
            }
            else {
                $(this).next().hide();

                $(this).find('i').addClass('fa-caret-up').removeClass('fa-caret-down');
            }
        });

        $(".ODRCSVImportHeader").last().next().show();
    {% endif %}
    });


{% if upload_type == 'csv' %}
    function loadLayout() {

//        $("#delimiter_select").attr('disabled', 'disabled');
        var url = '{{ path('odr_csv_import_layout', {'source_datatype_id': 0, 'target_datatype_id': 0}) }}';
        url = url.substr(0, url.length-3);
        url += $("#source_datatype").val() + '/' + $("#target_datatype").val();

        var datatype_name = $("#target_datatype").find(':selected').text();
        if ( $("#target_datatype").find(':selected').attr('rel') != undefined )
            datatype_name = datatype_name.substr(4);

//alert(url);
//return;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                $("#csvUploadForm").remove();
                $("#layout_content").append( data.d.html );

                $("#target_datatype_name").html( datatype_name );
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function delimiterChanged(delimiter) {

        var url = '{{ path('odr_csv_import_delimiter_changed', {'delimiter': ''}) }}';
        url += delimiter;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                // Don't need to do anything specific on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }
{% endif %} {# if upload_type == 'csv' #}

    function cancelCSVUpload(force) {

        if (force) {
            doCancel();
        }
        else if ( confirm('are you sure?') ) {
            doCancel();
        }
    }

    function doCancel() {

        var url = '{{ path('odr_csv_cancel_import') }}';

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
//                alert('csv import cancelled');
//                window.location.reload();

                var url = '{{ path('odr_csv_import', {'datatype_id': datatype.id}) }}';
                UpdateURL(url);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

{% if allow_import == true %}
    function doImport() {

        var url = '{{ path('odr_csv_import_start_worker', {'job_id': tracked_job_id}) }}';
//alert(url);
//return;

        // Attempt to prevent the browser from starting this import twice in a row...
        $("#import_button").attr('disabled', 'disabled');
        $("#import_button").html('Loading...');

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                alert('Beginning CSV Import...');

                var url = '{{ path('odr_job_list') }}';
                UpdateURL(url);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }
{% endif %} {# if allow_import == true #}

</script>

{% endspaceless %}
