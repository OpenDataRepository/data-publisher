{% spaceless %}

{% set can_edit_datarecord = false %}
{% set is_datatype_admin = false %}

{% if user_permissions[ datatype.id ] is defined and user_permissions[ datatype.id ][ 'dr_edit' ] is defined %}
    {% set can_edit_datarecord = true %}
{% endif %}
{% if user_permissions[ datatype.id ] is defined and user_permissions[ datatype.id ][ 'dt_admin' ] is defined %}
    {% set is_datatype_admin = true %}
{% endif %}

<div class="ODRFormWrap" {#style="min-height: 800px;"#}> 
    <div class="grid_12">
        <div class="box">
            <div class="header">
            {% if target == "results" %}
                <h2>Display Records - {{ datatype.dataTypeMeta.shortName }}</h2>
            {% else %}
                <h2>Edit Records - {{ datatype.dataTypeMeta.shortName }}</h2>
            {% endif %}
            </div>
            <div id="TextResults_wrapper" class="ODRTableOuterWrap">
                <div class="ODRTableWrap">
                    <table id="TextResults" class="display"></table>
                </div>
            </div><!-- end of #TextResults_wrapper -->
        </div>
    </div><!-- End of .grid_12 -->

</div><!-- End of .ODRFormWrap -->

{% set user_role = '' %}
{% if user != 'anon.' %}
    {% for role in user.getroles %}
        {% if role == 'ROLE_ADMIN' %}
            {% set user_role = 'ROLE_ADMIN' %}
        {% endif %}
    {% endfor %}
{% endif %}
{% if user_role == 'ROLE_ADMIN' and count > 0 %}
<div class="ODRExportButtons Cursor">
    {% if can_edit_datarecord or is_datatype_admin %}
    <button class="pure-button pure-button-primary" type="button" onclick="doMassEdit();">Mass Edit all these datarecords</button>
    &nbsp;&nbsp;&nbsp;
    {% endif %}
    <button class="pure-button pure-button-primary" type="button" onclick="doCSVExport();">Mass Export these datarecords into CSV file</button>
</div>
{% endif %}

<script type="text/javascript">

    $(function() {
        $(".MenuDesignArea").remove();

        var initial_load = true;

        var table = $("#TextResults").dataTable({

            "columns": [{{ column_names | raw }} {% if can_edit_datarecord %}{"title":"","searchable":false,"orderable":false}{% endif %}], {# column_names|raw already has trailing comma #}
            "order": [[1, 'asc']],
            "searching": false,
            "pageLength": {{ page_length }},
            "autoWidth": false,

            "responsive": true,
            "fixedHeader": {
               /* headerOffset: 42 */
            },

            // https://datatables.net/manual/server-side
            "processing": true,   // only displays a little "processing..." blurb
            "serverSide": true,

            "stateSave": true,
            "stateSaveCallback": function(settings, data) {
                // stateSaveParams apparently doesn't let you insert new data to send to the server...have to do it here
                data.odr_tab_id = window.sessionStorage.getItem('odr_tab_id');

                $.ajax({
                    "url": "{{ path('odr_datatables_state_save') }}",
                    "data": data,
                    "dataType": "json",
                    "type": "POST"
                });
            },
            "stateLoadCallback": function(settings) {
                var state;
                var data = {odr_tab_id: window.sessionStorage.getItem('odr_tab_id')};

                $.ajax({
                    "url": "{{ path('odr_datatables_state_load') }}",
                    "data": data,
                    "async": false,
                    "dataType": "json",
                    "type": "POST",
                    "success": function(json) {
                        // Symfony properly quotes everything in the JSON return, but DataTables state loading will break if some of the properties are strings...
                        // TODO - change the php function to fix these before returning the json to this callback?
                        if ( json.start !== undefined) {
                            // don't seem to need to convert the json.time parameter...
                            json.start = parseInt(json.start);
                            json.length = parseInt(json.length);
                        }
                        if ( json.columns !== undefined ) {
                            for (var i = 0; i < json.columns.length; i++) {
                                if ( json.columns[i].visible === "false" )
                                    json.columns[i].visible = false;
                                else if ( json.columns[i].visible === "true" )
                                    json.columns[i].visible = true;
                            }
                        }

                        state = json;
                    }
                });

                return state;
            },

            "ajax": {
                "url": "{{ path('odr_datatables_row_request') }}",
                "type": "POST",
                "data": {
                    "datatype_id": {{ datatype.id }},
                    "theme_id": {{ theme_id }},
                    "search_key": "{{ search_key }}",
                    "odr_tab_id": window.sessionStorage.getItem('odr_tab_id')
                },
                "dataSrc": function (json) {
                    // If an error was encountered, display it to the user
                    if ( json.d !== undefined ) {
                        alert( json.d );
                    }

                    // Apparently need to return this for datatables to work
                    return json.data;
                }
            },

            "createdRow": function( row, data, index ) {
                $(row).attr('onclick', 'loadDataRecord(' + data[0] + ');');
                $(row).addClass('Pointer DataRecord_' + data[0]);
            },

            "language": {
                "emptyTable": {% if logged_in %}"No Datarecords found"{% else %}"No Datarecords found...try logging in"{% endif %}
            }

        });

        // Need a tab id in html5 sessionStorage if one doesn't exist
        if ( !window.sessionStorage.getItem('odr_tab_id') )
            window.sessionStorage.setItem('odr_tab_id', '{{ odr_tab_id }}');
    });


    // Because this table is dynamic, it needs to check for potential changes in the number of columns that it loads via ajax...
    $("#TextResults").on('xhr.dt', function(e, settings, json) {
        if ( json.data[0] === undefined )
            return;

        // check number of columns in json array
        var reload_page = false;
        var original_num_columns = {{ num_columns }};

        // If number of columns is different from what's expected, reload the page
        if ( json.data[0].length !== original_num_columns ) {
            reload_page = true;
        }
{% if can_edit_datarecord %}
        else {
            for (var i = 0; i < json.data.length; i++) {
                json.data[i].push('<span class="ODREditLink" rel="' + json.data[i][0] + '"><u>Edit<u></span>');
            }
        }
{% endif %}

        // If the json data has fewer columns than expected, splice in enough columns so datatables doesn't throw an alert before reloading the page
        if ( json.data[0].length < original_num_columns ) {
            for (var i = 0; i < json.data.length; i++) {
                for (var j = json.data[i].length; j < original_num_columns; j++)
                    json.data[i].push('');
            }
        }

        // Reload the page if necessary
        // TODO - notify user why page reloaded?
        if (reload_page)
            window.location.reload();

//console.log(json);

    });


    // Enable users to download files straight from the table without having to go to the datarecord first
    $("#TextResults").on('draw.dt', function() {
        // Attach required attributes to any <a> element in the table
        $(this).find('a').each(function() {
            $(this).addClass('ODRDownload');
            $(this).attr('target', '_blank');
        });

{% if can_edit_datarecord %}
        $(".ODREditLink").unbind('click').click(function(event) {
            // Don't load view mode for Datarecord
            event.stopImmediatePropagation();
            // Load edit mode of Datarecord instead
            loadDataRecord( $(this).attr('rel'), 'edit' );
        });
{% endif %}

        // Prevent the click handler for <tr> elements from firing if <a> is clicked
        $("a.ODRDownload").unbind('click').click(function(event) {
            event.stopImmediatePropagation();
        });
    });

{% if count > 0 and user_role == 'ROLE_ADMIN' %}
    {% if can_edit_datarecord or is_datatype_admin %}
    function doMassEdit() {
        var url = '{{ path('odr_mass_edit_render', { 'datatype_id': 0, 'search_key': '', 'offset': '' }) }}';
        url = url.substr(0, url.length-2);
        url += '{{ datatype.id }}' + '/' + '{{ search_key }}' + '/' + '{{ offset }}';

        UpdateURL(url);
    }
    {% endif %}

    function doCSVExport() {
        var url = '{{ path('odr_csv_export_render', { 'datatype_id': 0, 'search_key': '', 'offset': '' }) }}';
        url = url.substr(0, url.length-2);
        url += '{{ datatype.id }}' + '/' + '{{ search_key }}' + '/' + '{{ offset }}';

        UpdateURL(url);
    }
{% endif %}

</script>
{% endspaceless %}

{% import "ODRAdminBundle:Default:load_datarecord_js.html.twig" as js %}
{% set offset = '' %}   {# at the moment, offset is set to 1 by default, but not used by textresults #}
{{ js.write(target, search_key, offset) }}
