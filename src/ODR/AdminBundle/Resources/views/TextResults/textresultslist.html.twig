{% spaceless %}

{# The "intent" variable passed in is always "searching" for this file...
   ODRCustomController::renderList() renders ODRAdminBundle:Link:link_datarecord_form.html.twig
   when intent == 'linking' #}

{% set theme = theme_array[initial_theme_id] %}

{% set is_datatype_admin = false %}
{% if user_permissions[ datatype.id ] is defined and user_permissions[ datatype.id ][ 'dt_admin' ] is defined %}
    {% set is_datatype_admin = true %}
{% endif %}

<div class="ODRFormWrap">
    <div class="header">
        <h2>Display Records - {{ datatype.dataTypeMeta.shortName }}</h2>
    </div>

    {# Page/View Options #}
    {% include 'ODRAdminBundle:Default:view_manager.html.twig' with {
        'datatype': datatype,
        'theme': theme,
        'page_type': 'table',
        'search_key': search_key,

        'has_search_restriction': has_search_restriction,
        'editable_only': editable_only,
    } %}

    <div id="TextResults_wrapper" class="ODRTableOuterWrap">
        <div class="ODRTableWrap">
            <table id="TextResults" class="display"></table>
        </div>
    </div><!-- end of #TextResults_wrapper -->
</div><!-- End of .ODRFormWrap -->

{% set user_role = '' %}
{% if user != 'anon.' %}
    {% for role in user.getroles %}
        {% if role == 'ROLE_ADMIN' %}
            {% set user_role = 'ROLE_ADMIN' %}
        {% endif %}
    {% endfor %}
{% endif %}

{% if user_role == 'ROLE_ADMIN' and has_datarecords %}
<div class="ODRExportButtons Cursor">
    <div style="float:left;">
    {% if can_edit_datatype or is_datatype_admin %}
        <button class="pure-button" type="button" onclick="doMassEdit();">Mass Edit all these datarecords</button>
    {% endif %}
        <button class="pure-button" type="button" onclick="doCSVExport();">Mass Export these datarecords into CSV file</button>
    </div>

    {% if use_jupyterhub %}
    <div style="float:right;">
        <span id="jupyterhub_app_list" style="padding-right: 10px;"></span>

        <form target="_blank" action="{{ path('odr_jupyterhub_export') }}" method="post" style="display: inline;">
            <input type="hidden" name="datatype_id" value="{{ datatype.id }}" />
            <input type="hidden" name="search_key" value="{{ search_key }}" />
            <input type="hidden" name="app_id" id="jupyterhub_app_id" />

            <button type="submit" class="pure-button">Run this Jupyterhub app on these search results</button>
        </form>
    </div>
    {% endif %}
</div>
{% endif %}

<script>
    $(function() {
        $(".MenuDesignArea").remove();

        // Need a tab id in html5 sessionStorage if one doesn't exist
        if ( !window.sessionStorage.getItem('odr_tab_id') )
            window.sessionStorage.setItem('odr_tab_id', '{{ odr_tab_id }}');

        var table = $("#TextResults").dataTable({

            "columns": [{{ column_names | raw }} {% if can_edit_datatype %}{"title":"","searchable":false,"orderable":false}{% endif %}], {# column_names|raw already has trailing comma #}
            "order": [[1, 'asc']],
            "pageLength": {{ page_length }},
            "autoWidth": false,
            "orderMulti": false,    // disabled because ODR can't multi-sort server-side yet

            {# https://datatables.net/reference/option/dom
                "dom" parameter results in:
                <div class="wrapper">
                    <div class="FLeft">
                        {information}
                    </div>
                    <div class="FRight">
                        {length}
                    </div>
                    {processing}
                    {table}
                    {information}
                    {pagination}
               </div>
            #}
            "dom": '<"FLeft"i><"FRight"l>rtip',

            "responsive": true,
            "fixedHeader": {
               /* headerOffset: 42 */
            },

            // https://datatables.net/manual/server-side
            "processing": true,   // only displays a little "processing..." blurb
            "serverSide": true,

            "stateSave": true,
            "stateSaveCallback": function(settings, data) {
                // stateSaveParams apparently doesn't let you insert new data to send to the server...have to do it here
                data.odr_tab_id = window.sessionStorage.getItem('odr_tab_id');

                $.ajax({
                    "url": "{{ path('odr_datatables_state_save') }}",
                    "data": data,
                    "dataType": "json",
                    "type": "POST"
                });
            },
            "stateLoadCallback": function(settings) {
                var state;
                var data = {odr_tab_id: window.sessionStorage.getItem('odr_tab_id')};

                $.ajax({
                    "url": "{{ path('odr_datatables_state_load') }}",
                    "data": data,
                    "async": false,
                    "dataType": "json",
                    "type": "POST",
                    "success": function(json) {
                        // Symfony properly quotes everything in the JSON return, but DataTables state loading will break if some of the properties are strings...
                        if ( json.start !== undefined) {
                            // don't seem to need to convert the json.time parameter...
                            json.start = parseInt(json.start);
                            json.length = parseInt(json.length);
                        }
                        if ( json.columns !== undefined ) {
                            for (var i = 0; i < json.columns.length; i++) {
                                if ( json.columns[i].visible === "false" )
                                    json.columns[i].visible = false;
                                else if ( json.columns[i].visible === "true" )
                                    json.columns[i].visible = true;
                            }
                        }

                        state = json;
                    }
                });

                return state;
            },

            "ajax": {
                "url": "{{ path('odr_datatables_row_request') }}",
                "type": "POST",
                "data": {
                    "datatype_id": {{ datatype.id }},
                    "theme_id": {{ theme.id }},
                    "search_key": "{{ search_key }}",
                    "odr_tab_id": window.sessionStorage.getItem('odr_tab_id')
                },
                "dataSrc": function (json) {
                    // Apparently need to return this for datatables to work
                    return json.data;
                }
            },

            "createdRow": function( row, data, index ) {
                $(row).addClass('ODRTableRecord DataRecord_' + data[0]);
                $(row).attr('rel', data[0]);
            },

            "language": {
                "emptyTable": {% if logged_in %}"No Datarecords found"{% else %}"No Datarecords found...try logging in"{% endif %}
            }

        });

{% if user_role == 'ROLE_ADMIN' and has_datarecords and use_jupyterhub %}
        // Get the app list to display on the page
        $.ajax({
            cache: false,
            type: 'GET',
            url: "{{ path('odr_jupyterhub_app_list', {'datatype_id': datatype.id}) }}",
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if ( parseInt(jqXHR.status) === 200 ) {
                    $("#jupyterhub_app_list").html(data.html);

                    $("#jupyterhub_app_selector").unbind('change').change(function() {
                        var selected = $(this).val();
                        $("#jupyterhub_app_id").val(selected);
                    });

                    // Store the value of the first option in the form
                    $("#jupyterhub_app_id").val( $("#jupyterhub_app_selector option:first").val() );
                }
            }
        });
{% endif %}

{% if display_theme_warning %}
        $("#ODRMainMenu").overhang({
            type: "warn",
            message: "The originally requested layout is marked as private.  The database's default layout is being displayed instead.",
            closeConfirm: true
        });
{% endif %}

        {% if notify_of_sync == true %}
        {% include 'ODRAdminBundle:Theme:theme_sync_warning.js.twig' with {
            'datatype_id': datatype.id,
            'theme_id': theme.id,
            'search_key': search_key,
        }%}
        {% endif %}


        $("#TextResults").on('click', '.ODRTableRecord', function(event) {

{% if can_edit_datatype %}
            if ( $(event.target).is('span.ODREditLink') ) {
                // Don't load view mode for Datarecord...
                event.stopImmediatePropagation();

                // ...load edit mode instead
                var offset = $("#TextResults").DataTable().page.info().page + 1;
                loadDataRecord( $(this).attr('rel'), 'edit', offset );
                return;
            }
{% endif %}

            if ( $(event.target).is('a.ODRDownload') ) {
                // Don't load view mode when clicking on file download links in the table
                event.stopImmediatePropagation();
            }
            else if ( $(this).parent().parent().hasClass('collapsed')
                && $(event.target).is(":first-child")
            ) {
                // If datatables is hiding columns because there's too many of them, then the first
                //  visible column in the table is where you click to show the hidden columns
            }
            else {
                // A click anywhere else should load view mode of Datarecord
                var offset = $("#TextResults").DataTable().page.info().page + 1;
                loadDataRecord( $(this).attr('rel'), 'view', offset );
            }
        });
    });

    // Don't want dataTables to make an alert() every time it encounters an error, but still want to make a note of it...
    $.fn.dataTable.ext.errMode = 'none';
    $("#TextResults").on('error.dt', function(e, settings, techNote, message) {
        console.log(message);

        // Also, makes slightly more sense to disable the buttons to "do" stuff with the search results list on error
        $(".ODRExportButtons").find("button").each(function() {
            $(this).attr('disabled', 'disabled');
        });
    });

    // Because this table is dynamic, it needs to check for potential changes in the number of columns that it loads via ajax...
    $("#TextResults").on('xhr.dt', function(e, settings, json, xhr) {

        if ( xhr.status !== 200 || json === undefined || json === null ) {
            // Don't need to actually "do" something here...just need to prevent dataTables from continuing to execute
        }
        else {
            if (json.data[0] === undefined)
                return;

            // check number of columns in json array
            var reload_page = false;
            var original_num_columns = {{ num_columns }};

            // If number of columns is different from what's expected, reload the page
            if ( json.data[0].length !== original_num_columns ) {
                reload_page = true;
            }
{% if can_edit_datatype %}
            else {
                for (var i = 0; i < json.data.length; i++) {
                    // User can edit at least one datarecord for this datatype...ensure user has
                    //  permission to edit this specific datarecord before tacking on an edit link
                    var dr_id = parseInt( json.data[i][0] );
                    if ( json.editable_datarecord_list[dr_id] !== undefined )
                        json.data[i].push('<span class="ODREditLink">Edit</span>');
                    else
                        json.data[i].push('<span></span>');
                }
            }
{% endif %}

            // If the json data has fewer columns than expected, splice in enough columns so
            //  datatables doesn't throw an alert before reloading the page
            if ( json.data[0].length < original_num_columns ) {
                for (var i = 0; i < json.data.length; i++) {
                    for (var j = json.data[i].length; j < original_num_columns; j++)
                        json.data[i].push('');
                }
            }

            // Reload the page if necessary
            // TODO - notify user why page reloaded?
            if (reload_page)
                window.location.reload();
        }
    });


    // Enable users to download files straight from the table
    $("#TextResults").on('draw.dt', function() {
        // Attach required attributes to any <a> element in the table
        $(this).find('a').each(function() {
            $(this).addClass('ODRDownload');
            $(this).attr('target', '_blank');
        });
    });


{% if has_datarecords and user_role == 'ROLE_ADMIN' %}
    {% if can_edit_datatype or is_datatype_admin %}
    function doMassEdit() {
        var url = '{{ path('odr_mass_edit_render', { 'search_theme_id': search_theme_id, 'datatype_id': datatype.id, 'search_key': search_key, 'offset': offset }) }}';
        UpdateURL(url);
    }
    {% endif %}

    function doCSVExport() {
        var url = '{{ path('odr_csv_export_render', { 'search_theme_id': search_theme_id, 'datatype_id': datatype.id, 'search_key': search_key, 'offset': offset }) }}';
        UpdateURL(url);
    }
{% endif %}
</script>

{% import "ODRAdminBundle:Default:load_datarecord_js.html.twig" as js %}
{{ js.write(search_theme_id, search_key) }}

{% endspaceless %}
