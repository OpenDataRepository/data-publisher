{% spaceless %}

{% set datatype = datatype_tree.datatype %}
<h1 class="no-margin-top-phone">
    <span>Datafield Permissions &raquo; {{ datatype.shortname }}</span>
    </br>
    <span>...for {{ user.getuserstring }}</span>
</h1>

{#
{% for datafield_id, permission in datafield_permissions %}
datafield {{ datafield_id }} -- {% if permission[ 'view' ] is defined %}(view){% endif %} {% if permission[ 'edit' ] is defined %}(edit){% endif %}</br>
{% endfor %}
#}

{% include 'ODRAdminBundle:FieldPermissions:fieldpermissions_area.html.twig' with {'user': user, 'datatype_tree': datatype_tree, 'datatype_permissions': datatype_permissions, 'datafield_permissions': datafield_permissions} %}

<style>
    .ODRBlockedDatafield {
        background-color: #ff0000;
        opacity: 0.4;
    }
    .ODRVisibleDatafield {
        background-color: #ffff00;
        opacity: 0.4;
    }
    .ODREditableDatafield {
    }
</style>

<script>

$(function() {
    initPage();
    window.scrollTo(0,0);
});

function initPage() {

    // Hide all TEDs without input fields
    $(".ODRThemeElement").each(function() {
        var found = false;
        $(this).find("input").each(function() {
            found = true;
            return;
        });

        if (!found)
            $(this).hide();
    });

    // Attach an overlay div of sorts over each datafield 
    $(".ODROverlayDiv").each(function() {
        // Need dimensions of parent div...
        var height = $(this).parent().css('height');
        var width = $(this).parent().css('width');

        // Apply dimensions of parent div to loading div
        $(this).css({"height": height, "line-height": height, "width": width});
    });

    $(".ODRFieldPermission").unbind('click');
    $(".ODRFieldPermission").click(function() {

        if ( $(this).hasClass('fa-muted') )
            return;

        // Determine if datatype is editable
        var can_edit_datatype = true;
        var datatype_id_data = $(this).parent().parent().parent().attr('id').split(/_/);
        var datatype_id = datatype_id_data[1];
        if ( $("#DataTypeTools_" + datatype_id).children('.ODREditPermission').first().hasClass('fa-lock') )
            can_edit_datatype = false;

        // Determine if theme element is editable
        var theme_element_visible = true;
        var theme_element_id_data = $(this).parent().parent().attr('id').split(/_/);
        var theme_element_id = theme_element_id_data[1];
        if ( $("#ThemeElementTools_" + theme_element_id).find('.ODRThemeElementVisible').first().hasClass('fa-eye-slash') )
            theme_element_visible = false;

//alert( $(this).attr('id') + ' ' + can_edit_datatype + ' ' + theme_element_visible );

        if ( $(this).hasClass('ODREditableDatafield') ) {
            // switch from view/edit to view/non-edit
            updateDatafieldPermissions( $(this).attr('id'), 'ODRVisibleDatafield' );
        }
        else if ( $(this).hasClass('ODRVisibleDatafield') ) {
            if (theme_element_visible) {
                if (can_edit_datatype) {
                    // switch from view/non-edit to view/edit
                    updateDatafieldPermissions( $(this).attr('id'), 'ODREditableDatafield' );        
                }
                else {
                    /* can't change from view/non-edit to a different state if theme element is visible and user can't edit datatype */
                }
            }
            else {
                // switch from view/non-edit to no-view/non-edit
                updateDatafieldPermissions( $(this).attr('id'), 'ODRBlockedDatafield' );
            }
        }
        else if ( $(this).hasClass('ODRBlockedDatafield') ) {
            if (can_edit_datatype) {
                // switch from no-view/non-edit to view/edit
                updateDatafieldPermissions( $(this).attr('id'), 'ODREditableDatafield' );
            }
            else {
                // switch from no-view/non-edit to view/non-edit
                updateDatafieldPermissions( $(this).attr('id'), 'ODRVisibleDatafield' );
            }
        }

    });

    $(".ODRThemeElementVisible").unbind('click');
    $(".ODRThemeElementVisible").click(function() {

        var theme_element_id = $(this).attr('rel');
        var element = $(this);

        // TODO - Need to warn when changing theme element from not visible to visible...all datafields in theme element set to not visible/editable will get changed to visible??

        var url  = '{{ path('odr_design_visible_theme_element', {'theme_element_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += theme_element_id;

//alert(url);
//return;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    // Toggle muted status
                    var icons = {};
                    if ( $(element).hasClass('fa-eye') ) {
                        // Set to not visible
                        icons = {"ODRThemeElementVisible": 0};
                        setThemeElementIcons(theme_element_id, icons);

                        // Don't need to change any of the datafields' view permissions state
                        // However, Do need to remove fa-muted class because the datafield can now be changed to non-viewable/non-editable
                        $("#ThemeElement_" + theme_element_id).children(".ODRDataField").each(function() {
                            var datafield_overlay_id = $(this).attr('id') + "_overlay";
                            $("#" + datafield_overlay_id).removeClass('fa-muted').addClass('Pointer');
                        });
                    }
                    else {
                        // Set to visible
                        icons = {"ODRThemeElementVisible": 1};
                        setThemeElementIcons(theme_element_id, icons);  // need to update this prior to updateDatafieldPermissions()

                        // Need to set all non-viewable/non-editable datafields to viewable/non-editable
                        $("#ThemeElement_" + theme_element_id).children(".ODRDataField").each(function() {
                            var datafield_overlay_id = $(this).attr('id') + "_overlay";
                            if ( $("#" + datafield_overlay_id).hasClass('ODRBlockedDatafield') ) {
                                updateDatafieldPermissions( datafield_overlay_id, 'ODRVisibleDatafield' );
                            }
                        });
                    }

                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });

    });

    $(".ODREditPermission").unbind('click');
    $(".ODREditPermission").click(function() {
        // Grab ids
        var user_id = $(this).attr('rel');
        var datatype_id = $(this).parent().attr('rel');

        // Determine which value should be saved
        var value = 1;
        if ( $(this).hasClass('fa-unlock') )    // has edit permissions, change so no edit permission
            value = 0;

        var element = $(this);
        var url  = '{{ path('odr_toggle_user_permission', {'user_id': 0, 'datatype_id': 0, 'value': 0, 'permission': ''} ) }}';
        url = url.substring(0,(url.length-6));
        url += user_id + '/' + datatype_id + '/' + value + '/' + 'edit';

//alert(url);
//return;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    var icons = {};
                    if ( $(element).hasClass('fa-unlock') ) {
                        // Set to not editable
                        icons = {"ODREditPermission": 0};
                        setDatatypeIcons(datatype_id, icons);   // icons need to be updated before updateDatafieldPermissions()

                        // Need to set all viewable/editable datafields of this datatype to viewable/non-editable
                        $("#FieldArea_" + datatype_id).children(".ODRThemeElement").children(".ODRDataField").each(function() {
                            var datafield_overlay_id = $(this).attr('id') + "_overlay";
                            if ( $("#" + datafield_overlay_id).hasClass('ODREditableDatafield') ) {
                                updateDatafieldPermissions( datafield_overlay_id, 'ODRVisibleDatafield' );
                            }
                        });
                    }
                    else {
                        // Set to editable
                        icons = {"ODREditPermission": 1};
                        setDatatypeIcons(datatype_id, icons);   // icons need to be updated before updateDatafieldPermissions()

                        // Need to set all viewable/non-editable datafields to viewable/editable
                        $("#FieldArea_" + datatype_id).children(".ODRThemeElement").children(".ODRDataField").each(function() {
                            var datafield_overlay_id = $(this).attr('id') + "_overlay";
                            if ( $("#" + datafield_overlay_id).hasClass('ODRVisibleDatafield') ) {
                                updateDatafieldPermissions( datafield_overlay_id, 'ODREditableDatafield' );
                            }
                        });
                    }

                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });

    });
}

function updateDatafieldPermissions(datafield_overlay_id, desired_state) {

    // Grab datafield_id
    var id_data = datafield_overlay_id.split(/_/);
    var datafield_id = id_data[1];

    // Don't save if the datafield already has this permission
    if ( $(datafield_overlay_id).hasClass(desired_state) ) {
        // Some of the metadata might change though...update the datafield's overlay
        updateOverlayProperties(datafield_overlay_id, desired_state);
        return;
    }

    // Grab user id
    var user_id = {{ user.id }};

    // Grab desired permission
    var permission = 0;
    if (desired_state == 'ODREditableDatafield')
        permission = 2;
    else if (desired_state == 'ODRVisibleDatafield')
        permission = 1;
    else if (desired_state == 'ODRBlockedDatafield')
        permission = 0;


    var url  = '{{ path('odr_save_datafield_permission', {'user_id': 0, 'datafield_id': 0, 'permission': 0} ) }}';
    url = url.substring(0,(url.length - 5));
    url += user_id + '/' + datafield_id + '/' + permission;

//alert( url );
//return;

    var dataType = "json";
    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: dataType,
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
                // Update the datafield's overlay
                updateOverlayProperties(datafield_overlay_id, desired_state);
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {

                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function updateOverlayProperties(datafield_overlay_id, desired_state) {
    var datafield_overlay = $("#" + datafield_overlay_id);

    // Determine if datatype is editable
    var can_edit_datatype = true;
    var datatype_id_data = $(datafield_overlay).parent().parent().parent().attr('id').split(/_/);
    var datatype_id = datatype_id_data[1];
    if ( $("#DataTypeTools_" + datatype_id).children('.ODREditPermission').first().hasClass('fa-lock') )
        can_edit_datatype = false;

    // Determine if theme element is editable
    var theme_element_visible = true;
    var theme_element_id_data = $(datafield_overlay).parent().parent().attr('id').split(/_/);
    var theme_element_id = theme_element_id_data[1];
    if ( $("#ThemeElementTools_" + theme_element_id).find('.ODRThemeElementVisible').first().hasClass('fa-eye-slash') )
        theme_element_visible = false;

//alert( datafield_overlay_id + ' ' + can_edit_datatype + ' ' + theme_element_visible );

    // Change overlay to the desired state
    $(datafield_overlay).removeClass('ODREditableDatafield ODRVisibleDatafield ODRBlockedDatafield Pointer fa-muted').addClass(desired_state);

    // Change title attribute of overlay
    if ( $(datafield_overlay).hasClass('ODREditableDatafield') ) {
        // Can always change to the viewable/editable state from here
        $(datafield_overlay).addClass('Pointer');
        $(datafield_overlay).attr('title', 'This datafield is both viewable and editable by the user');
    }
    else if ( $(datafield_overlay).hasClass('ODRVisibleDatafield') ) {
        if (theme_element_visible) {
            if (can_edit_datatype) {
                // Can switch to viewable/editable state from here
                $(datafield_overlay).addClass('Pointer');
                $(datafield_overlay).attr('title', 'This datafield can be viewed, but not edited by the user');
            }
            else {
                // Stuck in viewable/not-editable state
                $(datafield_overlay).addClass('fa-muted');
                $(datafield_overlay).attr('title', 'The user is not permitted to edit this Datatype, and therefore can only view this Datafield');
            }
        }
        else {
            if (can_edit_datatype) {
                // Can switch to not-viewable/not-editable state from here
                $(datafield_overlay).addClass('Pointer');
                $(datafield_overlay).attr('title', 'This datafield can be viewed, but not edited by the user');
            }
            else {
                // Can switch to not-viewable/not-editable state from here
                $(datafield_overlay).addClass('Pointer');
                $(datafield_overlay).attr('title', 'The user is not permitted to edit this Datatype, and therefore can only view this Datafield');
            }
        }
    }
    else if ( $(datafield_overlay).hasClass('ODRBlockedDatafield') ) {
        // Can always change to the viewable/editable or viewable/non-editable state from here
        $(datafield_overlay).addClass('Pointer');
        $(datafield_overlay).attr('title', 'This datafield is neither viewable nor editable by the user');
    }

}
</script>

{% include 'ODRAdminBundle:Displaytemplate:icon_functions.html.twig' %}

{% endspaceless %}
