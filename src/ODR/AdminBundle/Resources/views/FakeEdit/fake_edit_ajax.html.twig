{% spaceless %}

{% set datatype = datatype_array[initial_datatype_id] %}
{% set datarecord = datarecord_array[initial_datarecord_id] %}
{% set theme = theme_array[initial_theme_id] %}

{% include 'ODRAdminBundle:FakeEdit:fake_edit_area.html.twig' with {
    'datatype_array': datatype_array,
    'datarecord_array': datarecord_array,
    'theme_array': theme_array,

    'initial_datatype_id': initial_datatype_id,
    'initial_datarecord': datarecord,
    'initial_theme_id': initial_theme_id,

    'datatype_permissions': datatype_permissions,
    'datafield_permissions': datafield_permissions,

    'is_top_level': is_top_level,
    'token_list': token_list,
} %}

<script>

$(function() {
    // --------------------
    // Only need to do this stuff once?

    // Resize all elements dependent on window size
    $(window).unbind('resize').resize(function() {
        WindowResizeInterval = window.clearInterval(WindowResizeInterval);    // variable WindowResizeInterval defined in common.js
        WindowResizeInterval = window.setInterval("onWindowResize()", 500);
    });

    // Resize everything prior to divs being hidden
    onWindowResize();

    // Hide divs for accordion purposes
    setupAccordions();
    setupAccordionHighlights();

    // Never want the search sidebar
    disableSearchSidebar();    {# defined in ODRAdminBundle:Default:common_js.html.twig #}

    // --------------------
    initPage();
    $(".MenuDesignArea").remove();
    window.scrollTo(0,0);

    {% if notify_of_sync is defined and notify_of_sync == true %}
    {% include 'ODRAdminBundle:Theme:theme_sync_warning.js.twig' with {
        'datatype_id': datatype.id,
        'theme_id': theme.id,
        'search_key': search_key,
    }%}
    {% endif %}
});

var SaveTimeout = 1000;
function initPage() {
    // Shouldn't be needed, but shouldn't hurt
    hideSearchOverlay();    {# defined in ODRAdminBundle:Default:common_js.html.twig #}

    // Attach click handlers to tags
    setupTagTree( $(".ODRRecord"), 3);    {# defined in ODRAdminBundle:Default:common_js.html.twig #}

    $(".ODRFileDownloadProgress").hide();

    $(".ODRDatePicker").datepicker({
        dateFormat: 'yy-mm-dd',
        changeMonth: true,
        changeYear: true,
        yearRange: "1800:+10",
        onClose: function() {
            $(this).blur();
        }
    });

    $(".ODRDatePicker_clear").unbind('click').click(function() {
        $(this).parent().parent().find(".ODRDatePicker").datepicker('setDate', null);
    });

    $(".ODRDataField").children("form").submit(function(event) {
        event.preventDefault();
    });

    $("#ODRFakeEdit_save").unbind('click').click(function(event) {
        event.preventDefault();

        SaveAsNew();
    });

    $(".ODRTagEdit").unbind('click').click(function() {
        // Not going to actually save anything here, but the tag collapsing works better if classes
        //  get updated when the user clicks stuff
        var tag_input = $(this);

        if ( $(tag_input).is(':checked') ) {
            // If this tag is now selected, then the tag showing/hiding needs to be aware of it
            $(tag_input).parents('.ODRTagItem').addClass('ODRTagSelected');
            // console.log('adding .ODRTagSelected');
        }
        else {
            // Tags without children should always lose the "ODRTagSelected" class...
            var tag = $(tag_input).parent().parent();
            if ( $(tag).children('.ODRTagGroup').length === 0 ) {
                $(tag).removeClass('ODRTagSelected');
                // console.log('tag has no children, removing .ODRTagSelected from', tag);
            }
            else {
                // Tags with children need to check whether any of them are selected...
                var child_is_selected = false;
                $(tag).children('.ODRTagGroup').children('.ODRTagItem').each(function(index,elem) {
                    if ( $(elem).hasClass('ODRTagSelected') ) {
                        child_is_selected = true;
                        return false;
                    }
                });

                // ...if not, then this tag can lose the class
                if ( !child_is_selected ) {
                    $(tag).removeClass('ODRTagSelected');
                    // console.log('tag has no selected children, removing .ODRTagSelected from', tag);
                }
                // else {
                //     console.log('tag has selected children, not removing .ODRTagSelected from', tag);
                // }
            }

            // Since this tag is now unselected, need to recursively check whether every
            //  ancestor of this tag still needs the "ODRTagSelected" class
            UpdateParentTagClass( $(tag) );
        }
    });

    var context = $(".ODRRecord");
    var tag_filter_interval = [];
    $(context).find(".ODRSearchDatafieldFilter").unbind('change').unbind('keyup').unbind('paste').on('keyup paste', function() {
        var df = $(this).parents('.ODRDataField');
        var id_data = $(df).attr('id').split(/_/);
        var dr_id = id_data[1];
        var df_id = id_data[2];

        if ( tag_filter_interval[df_id] !== undefined )
            clearTimeout( tag_filter_interval[df_id] );

        tag_filter_interval[df_id] = setTimeout(function() {
            filterFakeEditTagField(context, dr_id, df_id);
        }, 750);
    });

    $('#ODRHelpButton').unbind('click').click(function() {
        ODRFakeEdit_startIntroJS();
    });
    ODRFakeEdit_setupIntroJS();
}

{# None of these should be accessible, but just incase... #}
function AddChildRecord(child_datatype_id, fake_dr_id) {
    alert('Record must be saved before child records can be created');
}
function AddLinkedRecord(parent_datatype_id, child_datatype_id, fake_dr_id) {
    alert('Record must be saved before it can be linked to other records');
}
function OpenLinkSearchPage(ancestor_datatype_id, descendant_datatype_id, parent_datarecord_id) {
    alert('Record must be saved before it can be linked to other records');
}
function ChangeRecordPublicStatus(datarecord_id) {
    alert('Record must be saved before public status can be changed');
}
function DeleteChildRecord(datarecord_id) {
    alert('Record must be saved before it can be deleted');
}
function DeleteLinkedRecord(datarecord_id) {
    alert('Not allowed to delete a linked record from here');
}
function CheckRecordData(form_id, interval) {
    alert('Changes do not automatically save');
}

/**
 * Filters the displayed options/tags for a field in FakeEdit mode.
 *
 * @param {HTMLElement} context
 * @param {number} dr_id
 * @param {number} df_id
 */
function filterFakeEditTagField(context, dr_id, df_id) {
    var filter_element = $(context).find("#edit_df_" + df_id + "_filter").first();
    // var fieldtype = $(filter_element).attr('rel');
    var filter_text = $(filter_element).val().trim().toLowerCase();

    // Tag fields could have a hierarchy...
    var tags = $(context).find("#Field_" + dr_id + '_' + df_id).find(".ODRTagItem");

    if ( filter_text == '' ) {
        // If no text in the filter, revert back to "partially collapsed" status
        $(tags).each(function(index,elem) {
            // Tags with this class, or top-level tags, should be the only ones visible after the
            //  filter gets cleared
            if ( $(elem).hasClass('ODRTagSelected') || !$(elem).parent().parent().hasClass('ODRTagItem') ) {
                $(elem).show();
                $(elem).children('ul.ODRTagGroup').show();
            }
            else {
                $(elem).hide();
                $(elem).children('ul.ODRTagGroup').hide();
            }

            // The indicator icon should also be reset
            $(elem).children('.ODRTagParent').each(function(index,span) {
                $(span).removeClass('ODRTagCollapsed').addClass('ODRTagPartialCollapsed');
                $(span).children('i').removeClass('fa-caret-down fa-caret-right').addClass('fa-ellipsis-h');
            });
        });
    }
    else {
        $(tags).each(function(index,elem) {
            // If this tag has children, then the indicator icon should be forced into "fully visible" status
            $(elem).children('.ODRTagParent').each(function(index,span) {
                $(span).removeClass('ODRTagPartialCollapsed ODRTagCollapsed');
                $(span).children('i').removeClass('fa-ellipsis-h fa-caret-right').addClass('fa-caret-down');
                $(span).next().next().show();
            });

            // The tag's name needs to be converted to lower case...
            var tag_name = $(elem).children('label').text().toLowerCase();

            // ...so it can get compared against the provided filter text
            if ( tag_name.indexOf(filter_text) === -1 ) {
                $(elem).hide();
            }
            else {
                // Display the tag even if it was initially hidden
                $(elem).removeAttr('style');

                // Also need to ensure that all parents of this tag are visible
                $(elem).parents('.ODRTagItem').removeAttr('style');
            }
        });
    }
}

/**
 * Recursively checks whether every ancestor of the given tag still need the "ODRTagSelected" class.
 *
 * @param {HTMLElement} tag
 */
function UpdateParentTagClass(tag)
{
    // console.log('UpdateParentTagClass() called with', tag);
    // If this is a top-level tag, do nothing
    if ( !$(tag).parent().parent().hasClass('ODRTagItem') ) {
        // console.log('tag is top-level, exiting recursion');
        return;
    }

    // If this tag is already selected, do nothing
    if ( $(tag).children('.ODRTagLabel').children('input').is(':checked') ) {
        // console.log('tag is selected, exiting recursion');
        return;
    }

    // Need to determine whether any of the given tag's siblings are still selected
    var sibling_tags = $(tag).parent().children('li.ODRTagItem');
    // console.log('sibling tags: ', sibling_tags);

    var is_selected = false;
    $.each(sibling_tags, function(index,elem) {
        if ( $(elem).hasClass('ODRTagSelected') ) {
            is_selected = true;
            return false;
        }
    });
    // console.log('is_selected', is_selected);

    // If none of this tag's siblings are selected...
    if ( !is_selected ) {
        // ...then the parent tag should only have the "ODRTagSelected" class if it's actually selected
        var parent_tag = $(tag).parent().parent();
        if ( $(parent_tag).children('.ODRTagLabel').children('input').is(':checked') ) {
            // console.log('parent_tag is selected, exiting recursion');
            return;
        }
        else {
            $(tag).parent().parent().removeClass('ODRTagSelected');
            // console.log('removing ODRTagSelected class from', $(tag).parent().parent());

            // Check whether the parent tag needs to update its parent too
            UpdateParentTagClass( $(tag).parent().parent() );
        }
    }
}

/**
 * Saves the data on the FakeEdit page as a new record.
 */
function SaveAsNew() {
    // Only save if there are no input errors...
    var has_errors = false;
    $(".ODRInputError").each(function(index, elem) {
        if ( $(elem).is(':visible') )
            has_errors = true;
    });
    if ( has_errors ) {
        alert('At least one field has a problem that must be fixed before saving.');

        $(".ODRInputError").each(function(index, elem) {
            if ( $(elem).is(':visible') )
                $(elem).effect("highlight", {}, 2000).effect("highlight", {}, 2000);
        });

        return;
    }

    // ...and the user wants to
    // if ( !confirm('Are you sure you want to save this data as a new record?') )
    //     return;

    // Going to manually create a form from all fields...
    var form_data = {};
    form_data.datatype_id = {{ initial_datatype_id }};
    form_data.datarecord_id = '{{ initial_datarecord_id }}';
    form_data.datafields = {};
    form_data.tokens = {};
    form_data.special_tokens = {};

    // For each datafield on the page...
    $(".ODRDataField").each(function(index, df) {
        var df_id_data = $(df).attr('id').split(/_/);
        var df_id = df_id_data[2];

        // ...that has a form (markdown fields don't)...
        $(df).children('form').each(function(index, form) {
            // console.log( $(form).attr('id') );

            var token = $(form).children("input[type=hidden]").val();
            var fieldset = $(form).children('fieldset').first();    // should only be one

            // ...determine what kind of field this is...
            if ( $(fieldset).find("div.ODRRadioOptionsEdit").length > 0 ) {
                // Single/Multiple Radio field, and Multiple Select
                $(fieldset).find("input:checked").each(function(index, ro) {
                    var ro_id_data = $(ro).attr('id').split(/_/);
                    var ro_id = ro_id_data[3];

                    if ( ro_id !== '0') {
                        if (form_data.datafields[df_id] === undefined)
                            form_data.datafields[df_id] = {};

                        form_data.datafields[df_id][ro_id] = 1;
                        form_data.tokens[df_id] = token;
                    }
                });
            }
            else if ( $(fieldset).children("div.ODRTagWrapper").length > 0 ) {
                // Tag field
                $(fieldset).find("input:checked").each(function(index, tag) {
                    var tag_id_data = $(tag).attr('id').split(/_/);
                    var tag_id = tag_id_data[3];

                    if ( tag_id !== '0') {
                        if (form_data.datafields[df_id] === undefined)
                            form_data.datafields[df_id] = {};

                        form_data.datafields[df_id][tag_id] = 1;
                        form_data.tokens[df_id] = token;
                    }
                });
            }
            else if ( $(fieldset).children("select").length > 0 ) {
                // Single Select
                var selected = $(fieldset).children("select").children("option:selected");
                if ( $(selected).length > 0 ) {
                    var ro_id_data = $(selected).attr('id').split(/_/);
                    var ro_id = ro_id_data[1];

                    if ( ro_id !== '0' ) {
                        form_data.datafields[df_id] = {};
                        form_data.datafields[df_id][ro_id] = 1;
                        form_data.tokens[df_id] = token;
                    }
                }
            }
            else if ( $(fieldset).children(".ODRFieldWrapper").children("textarea").length > 0 ) {
                // Paragraph text
                var textarea = $(fieldset).find("textarea");
                // console.log( $(textarea).attr('id') );

                var val = $(textarea).val().trim();
                if (val !== '') {
                    form_data.datafields[df_id] = val;
                    form_data.tokens[df_id] = token;
                }
            }
            else if ( $(fieldset).children(".ODRFieldWrapper").children("input").length > 0 ) {
                var input = $(fieldset).find("input");
                // console.log( $(input).attr('id') );

                if ( $(input).is(":checkbox") ) {
                    // Boolean field
                    if ( $(input).is(":checked") ) {
                        form_data.datafields[df_id] = 1;
                        form_data.tokens[df_id] = token;
                    }
                }
                else {
                    // Text/number/datetime fields
                    var val = $(input).val().trim();
                    if (val !== '') {
                        form_data.datafields[df_id] = val;
                        form_data.tokens[df_id] = token;
                    }
                }
            }
            else {
                // Image or File field, ignore
            }
        });
    });

    // For each special datafield on the page...
    $(".ODRFakeEdit_autogenerate").each(function(index, df) {
        var df_id = $(df).attr('rel');
        var token = $(df).val();

        form_data.special_tokens[df_id] = token;
    });

    // Now that the form data has been built...
    // console.log(form_data);    return;
    var url  = '{{ path('odr_save_fake_record') }}';
    $.ajax({
        cache: false,
        type: 'POST',
        data: form_data,
        url: url,
        dataType: "json",
        success: function(data, textStatus, jqXHR) {
            // Extract the new datarecord's id
            var new_record_id = data.d.new_datarecord_id;

            // Generate the correct URL to edit the new datarecord
            var new_url = '{{ path('odr_record_edit', {'datarecord_id': 0}) }}';
            new_url = new_url.substring(0, new_url.length-1);
            new_url += new_record_id;

            // Replace the "fake record" page with the correct edit page in the browser's history
            history.replaceState({}, '', '#' + new_url);

            // Redirect the user to the newly created datarecord
            UpdateURL(new_url);
        },
        error: function(jqXHR, textStatus, errorThrown) {
            // Don't need to do anything specific on an error
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

/**
 * Not strictly necessary to have this off in its own function, but it makes more sense this way.
 */
function ODRFakeEdit_setupIntroJS() {
    // Setup IntroJS Walkthrough
    $('#ODRHelpButton')
        .attr('data-step', '1')
        .attr('data-intro', 'Welcome to the ODR Help System.  This system will guide you through the features of this page.<br><br>For quicker navigation, use your left and right arrow keys to go through the tutorial.');

    $('#ODRFakeEdit_save').parent()
        .attr('data-step', '2')
        .attr('data-intro', 'The main purpose of the "Add New Record" page is to prevent users from accidentally creating blank records.<br><br>It might look similar to a regular "Edit" page, but there are several important differences.');

    // Want to find sevarl types of fields to attach steps to
    var regular_field = null;
    var unique_field = null;
    var file_image_field = null;
    $('.ODRDataField').each(function(index,elem) {
        if ( unique_field === null && $(elem).find('input[type=text]').length > 0 && $(elem).find('label.ODRInputError').length > 0 )
            unique_field = $(elem);
        if ( regular_field === null && $(elem).find('input[type=text]').length > 0 && $(elem).find('label.ODRInputError').length === 0 )
            regular_field = $(elem);

        if ( file_image_field === null && ($(elem).find('input#FileForm__token').length > 0 || $(elem).find('input#ImageForm__token').length > 0) )
            file_image_field = $(elem);
    });

    $(regular_field)
        .attr('data-step', '3')
        .attr('data-intro', "You don't necessarily have to fill in all the fields at this point, although you can if you want to and have the data available.<br><br>However, you will need to fill out at least one field on the page before you can save the new record.");
    $(unique_field)
        .attr('data-step', '4')
        .attr('data-intro', "Certain fields in the database may require a value before you can save the new record.");
    $(file_image_field)
        .attr('data-step', '5')
        .attr('data-intro', "As mentioned in the header, Files or Images can't be uploaded at this point.  The record doesn't actually \"exist\" yet, so ODR can't properly save files or images.");

    $('#ODRFakeEdit_save')
        .attr('data-step', '6')
        .attr('data-intro', 'After entering data in at least one field and ensuring no warnings are displayed on the page, click here to save the new record.');
}

/**
 * Begins the introJS tour for ODR's FakeEdit page.
 */
function ODRFakeEdit_startIntroJS() {
    introJs().setOption("disableInteraction", true)
        .start();
}

</script>
{% endspaceless %}
