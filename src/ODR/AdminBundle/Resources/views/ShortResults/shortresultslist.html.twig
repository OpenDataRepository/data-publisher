{% spaceless %}

{% set datatype = datatype_array[initial_datatype_id] %}

{% set can_edit_datarecord = false %}
{% set is_datatype_admin = false %}

{% if user_permissions[ datatype.id ] is defined and user_permissions[ datatype.id ][ 'dr_edit' ] is defined %}
    {% set can_edit_datarecord = true %}
{% endif %}
{% if user_permissions[ datatype.id ] is defined and user_permissions[ datatype.id ][ 'dt_admin' ] is defined %}
    {% set is_datatype_admin = true %}
{% endif %}

{% import "ODRAdminBundle:Default:load_datarecord_js.html.twig" as js %}
{{ js.write(target, search_key, offset) }}

<div class="ODRFormWrap">
    <div class="header">
    {% if datatype != null %}
        {% if target == "results" %}
            <h2>Display Records - {{ datatype.dataTypeMeta.shortName }}</h2>
        {% else %}
            <h2>Edit Records - {{ datatype.dataTypeMeta.shortName }}</h2>
        {% endif %}
    {% endif %}
    </div>

{% if count > 0 %}
    <div class="ODRShortResultWrapper">
        {{ pagination_html | raw }}
        {% include 'ODRAdminBundle:ShortResults:shortresults_ajax.html.twig' with {
            'datatype_array': datatype_array,
            'datarecord_array': datarecord_array,
            'theme_id': theme_id,
            'initial_datatype_id': initial_datatype_id,
            'offset': offset
        } %}
    </div>
{% elseif logged_in %}
    No Datarecords found
{% else %}
    No Datarecords found...try logging in.
{% endif %}

</div><!-- End of .ODRFormWrap -->

{% set user_role = '' %}
{% if user != 'anon.' %}
    {% for role in user.getroles %}
        {% if role == 'ROLE_ADMIN' %}
            {% set user_role = 'ROLE_ADMIN' %}
        {% endif %}
    {% endfor %}
{% endif %}
{% if user_role == 'ROLE_ADMIN' and count > 0 %}
<div class="ODRExportButtons Cursor">
    {% if can_edit_datarecord or is_datatype_admin %}
    <button class="pure-button pure-button-primary" type="button" onclick="doMassEdit();">Mass Edit all these datarecords</button>
    &nbsp;&nbsp;&nbsp;
    {% endif %}
    <button class="pure-button pure-button-primary" type="button" onclick="doCSVExport();">Mass Export these datarecords into CSV file</button>
</div>
{% endif %}

<style type="text/css">
    .ShortResults_offset {
        min-height: 10px;
    }
    .ODREditLink {
        float: right;
    }
</style>

<script>

    $(function() {
        $(".MenuDesignArea").remove();

        var prevent_scroll = false;
        ShortResults_initPage(prevent_scroll);

        // Need a tab id in html5 sessionStorage if one doesn't exist
        if ( !window.sessionStorage.getItem('odr_tab_id') )
            window.sessionStorage.setItem('odr_tab_id', '{{ odr_tab_id }}');
    });

    function ReloadDatafield(datarecord_id, datafield_id) {

        var datafield_div = $("#Field_" + datarecord_id + "_" + datafield_id);
        var theme_id = $(datafield_div).attr('rel');

        var url = '{{ path('odr_display_reload_datafield', { 'datarecord_id': 0, 'datafield_id': 0, 'theme_id': 0 }) }}';
        url = url.substring(0, (url.length - 5));
        url += datarecord_id + '/' + datafield_id + '/' + theme_id;

//alert( url );
//return;

        $(datafield_div).children('form').each(function () {
            $(this).fadeOut();
            $(this).remove();
        });

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                if (data.r == 0) {
                    $(datafield_div).append(data.d.html);
                    initPage();
                }
                else {
                    alert(data.d);
                }
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    function ShortResults_initPage(prevent_scroll) {
        // Resize all elements dependent on window size
        $(window).unbind('resize');
        $(window).resize(function() {
            WindowResizeInterval = window.clearInterval(WindowResizeInterval);
            WindowResizeInterval = window.setInterval("onWindowResize()", 500);
        });

        // Resize everything prior to divs being hidden
        onWindowResize();

        // Set up image galleries
        setupImageGalleries();

{% if not can_edit_datarecord %}
        // Remove links to edit mode
        $(".ODREditLink").remove();
{% else %}
        $(".ODREditLink").unbind('click').click(function(event) {
            // Don't load view mode for Datarecord
            event.stopImmediatePropagation();
            // Load edit mode of Datarecord instead
            loadDataRecord( $(this).attr('rel'), 'edit' );
        });
{% endif %}

        $(".ODRFileDownloadProgress").hide();

        $("a.ODRFileDownload").unbind('click').click(function(event) {
            // Grab necessary attributes
            var file_id = $(this).attr('rel');
            var href = $(this).attr('href');

            // Prevent the click handler for <tr> elements from firing if a file download href is clicked
            var short_form = true;
            var can_cancel = true;
            handleFileDownload(event, file_id, href, short_form, can_cancel);    // defined in Default::file_handling.html.twig
        });

        $(".ODRDownloadAllFiles").unbind('click').click(function() {

            if ( $(this).hasClass('fa-muted') )
                return;

            // Grab necessary attributes
            var element = $(this);

            var id_data = $(this).closest(".ODRDataField").first().attr('id').split(/_/);
            var datarecord_id = id_data[1];
            var datafield_id = id_data[2];

            if ( $(this).closest(".pure-table").find("a.ODRFileDownload").length > 0 ) {

                var url = '{{ path('odr_download_all_files', { 'datarecord_id': 0, 'datafield_id': 0 }) }}';
                url = url.substring(0, (url.length-3));
                url += datarecord_id + '/' + datafield_id;

//alert(url);
//return;

                var label_div = $("#ODRDownloadAllLabel_" + datarecord_id + "_" + datafield_id);

                $.fileDownload(url, {
                    prepareCallback: function(url) {
                        $(label_div).show();
                        $(element).addClass('fa-muted');
                    },
                    successCallback: function (url) {
                        $(label_div).hide();
                        $(element).removeClass('fa-muted');
                    },
                    failCallback: function (responseHtml, url, error) {
                        // Something went wrong...
                        $(label_div).hide();
                        $(element).removeClass('fa-muted');

                        responseHtml = responseHtml.substring(5);
                        responseHtml = responseHtml.substring(0, (responseHtml.length-6));

                        var jsonResponse = jQuery.parseJSON(responseHtml);
                        alert (jsonResponse.d );
                    }
                });
            }
        });

        // Hide empty fieldareas
        $(".ODRFieldArea").each(function() {
            var max_height = 0;

            $(this).find(".ODRDataField").each(function() {
                var position = $(this).position();
                var element_offset = position.top + $(this).height();

                if (element_offset > max_height)
                    max_height = element_offset;
            });

            if (max_height > 0) {
//                $(this).css('height', max_height + 'px');
//                $(this).css('min-height', max_height + 'px');
//                $(this).parents('.ChildDataType').css('height', max_height + 'px');
            }
        });

{% if scroll_target != '' %}
//alert( {{ scroll_target }} );
        if (!prevent_scroll) {
            var datarecord = '.DataRecord_' + {{ scroll_target }};
            if ( $(datarecord) !== null && $(datarecord) !== undefined && $(datarecord).parent().prev().offset() !== null ) {
                $('html, body').animate({
                    scrollTop: $(datarecord).parent().prev().offset().top
                }, 500);
            }
        }
{% endif %}

    }

{% if count > 0 and user_role == 'ROLE_ADMIN' %}
    {% if can_edit_datarecord or is_datatype_admin %}
    function doMassEdit() {
        var url = '{{ path('odr_mass_edit_render', { 'datatype_id': 0, 'search_key': '', 'offset': '' }) }}';
        url = url.substr(0, url.length-2);
        url += '{{ datatype.id }}' + '/' + '{{ search_key }}' + '/' + '{{ offset }}';

        UpdateURL(url);
    }
    {% endif %}

    function doCSVExport() {
        var url = '{{ path('odr_csv_export_render', { 'datatype_id': 0, 'search_key': '', 'offset': '' }) }}';
        url = url.substr(0, url.length-2);
        url += '{{ datatype.id }}' + '/' + '{{ search_key }}' + '/' + '{{ offset }}';

        UpdateURL(url);
    }
{% endif %}
</script>
{% endspaceless %}

