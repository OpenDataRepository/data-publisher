<h3>Manage Database</h3>
{% spaceless %}

    {% set level = 0 %}
    {% for role in user.getroles %}
        {% if role == 'ROLE_SUPER_ADMIN' %}
            {% set level = level + 4 %}
        {% elseif role == 'ROLE_ADMIN' %}
            {% set level = level + 2 %}
        {% elseif role == 'ROLE_USER' %}
            {% set level = level + 1 %}
        {% endif %}
    {% endfor %}



    {% set hidden_datatype_count = 0 %}
    {% for datatype in datatype_array %}

        {% set datatype_meta = datatype.dataTypeMeta %}

        {% set datatype_baseurl = path('odr_search', { 'search_slug': datatype_meta.searchSlug } ) %}
        {% if datatype_meta.searchSlug == '' %}
            {# this shouldn't be an issue anymore, but keep around just in case #}
            {% set datatype_baseurl = path('odr_admin_homepage') %}
        {% endif %}

        {# Pre-determine which permissions user has for this datatype... #}
        {% set can_view_datatype = false %}
        {% set can_view_datarecord = false %}
        {% set can_edit_datarecord = false %}
        {% set can_add_datarecord = false %}
        {% set can_delete_datarecord = false %}
        {% set is_datatype_admin = false %}

        {% if datatype_permissions[ datatype.id ] is defined %}

            {% if datatype_permissions[ datatype.id ][ 'dt_view' ] is defined %}
                {% set can_view_datatype = true %}
            {% endif %}
            {% if datatype_permissions[ datatype.id ][ 'dr_view' ] is defined %}
                {% set can_view_datarecord = true %}
            {% endif %}
            {% if datatype_permissions[ datatype.id ][ 'dr_edit' ] is defined %}
                {% set can_edit_datarecord = true %}
            {% endif %}
            {% if datatype_permissions[ datatype.id ][ 'dr_add' ] is defined %}
                {% set can_add_datarecord = true %}
            {% endif %}
            {% if datatype_permissions[ datatype.id ][ 'dr_delete' ] is defined %}
                {% set can_delete_datarecord = true %}
            {% endif %}
            {% if datatype_permissions[ datatype.id ][ 'dt_admin' ] is defined %}
                {% set is_datatype_admin = true %}
            {% endif %}
        {% endif %}

        {% set hidden_datatype = false %}
        {% if not (can_view_datatype or can_view_datarecord or can_edit_datarecord or can_add_datarecord or can_delete_datarecord or is_datatype_admin) %}
            {% set hidden_datatype = true %}
            {% set hidden_datatype_count = hidden_datatype_count + 1 %}
        {% endif %}

        {% if can_view_datatype or datatype_meta.publicDate|is_public == true %}
            <div {% if hidden_datatype %}class="ODRPublicDatatype ODRHidden"{% endif %}>
                {{ datatype.id }}
                <span class="ODRDatatypeInfoDiv">
                            <i class="fa fa-lg fa-info-circle"></i>
                            <span class="ODRDatatypeInfo">
                                <div>
                                    <b>Created By: </b>{{ datatype.createdBy|user_string }}
                                    <b> on </b>{{ datatype.created|date('Y-m-d') }}
                                </div>
                                <div>
                                    <b>Description: </b>{{ datatype_meta.description }}
                                </div>
                            </span>
                        </span>
                <div id="ODRDatarecordList_{{ datatype.id }}_name">{{ datatype_meta.longName }}</div>


                {# number of datarecords for this datatype #}
                {% set datarecord_count = 0 %}
                {% if metadata[ datatype.id ] is defined %}
                    {% set datarecord_count = metadata[ datatype.id ] %}
                {% endif %}
                <div id="ODRDatarecordList_{{ datatype.id }}_count">{{ datarecord_count }}</div>


                {# link to search this datatype #}
                <div>
                    {% if datarecord_count == 0 %}
                        {# don't display link, nothing to view #}
                    {% elseif datatype.setup_step == 'operational' %}
                        <a id="ODRDatarecordList_{{ datatype.id }}_search" href="{{ datatype_baseurl }}"
                           title="Search {{ datatype_meta.shortName }} DataRecords"><i class="fa fa-lg fa-search"></i>&nbsp;Search</a>
                    {% elseif is_datatype_admin %}
                        <a id="ODRDatarecordList_{{ datatype.id }}_search" class="ODRMissingSearchTheme"
                           rel="{{ datatype.id }}" title="Search {{ datatype_meta.shortName }} DataRecords"><i
                                    class="fa fa-lg fa-search"></i>&nbsp;Search</a>
                    {% else %}
                        {# missing templates to display search results, and user doesn't have permission to make any...do nothing #}
                    {% endif %}
                </div>

                {# add/import links for this datatype #}
                <div>
                    {% if can_add_datarecord %}
                        <a id="ODRDatarecordList_{{ datatype.id }}_add" class="Pointer"
                           onclick="addDataRecord('{{ datatype_baseurl }}',{{ datatype.id }});"><i
                                    class="fa fa-lg fa-plus-circle"></i>&nbsp;Add New Record</a>
                    {% endif %}
                </div>

                {# CSV import link for this datatype #}
                <div>
                    {% if is_datatype_admin %}
                        <a class="address"
                           href="{{ datatype_baseurl }}#{{ path('odr_csv_import', { 'datatype_id': datatype.id }) }}"><i
                                    class="fa fa-lg fa-upload"></i>&nbsp;Import</a>
                    {% endif %}
                </div>

                {# master layout designer link #}
                <div>
                    {% if is_datatype_admin %}
                        <a id="ODRDatatypeList_{{ datatype.id }}_master_layout"
                           class="address"
                           href="{{ datatype_baseurl }}#{{ path('odr_design_master_theme', { 'datatype_id': datatype.id }) }}"
                           title="Edit {{ datatype_meta.shortName }} Master Layout"
                        >
                            <i class="fa fa-lg fa-pencil"></i>&nbsp;Edit Database
                        </a>
                    {% endif %}
                </div>

                {# metadata layout designer link #}
                <div>
                    {% if is_datatype_admin %}
                        <a id="ODRDatatypeList_{{ datatype.id }}_master_layout"
                           class="address"
                           href="{{ datatype_baseurl }}#{{ path('odr_design_master_theme', { 'datatype_id': datatype.id }) }}"
                           title="Edit {{ datatype_meta.shortName }} Master Layout"
                        >
                            <i class="fa fa-lg fa-pencil"></i>&nbsp;Edit Properties
                        </a>
                    {% endif %}
                </div>

                {# Group management link for this datatype #}
                <div>
                    {% if is_datatype_admin %}
                        <a id="ODRDatatypeList_{{ datatype.id }}_manage_groups" class="address"
                           href="{{ datatype_baseurl }}#{{ path('odr_manage_groups', { 'datatype_id': datatype.id }) }}"><i
                                    class="fa fa-lg fa-cog"></i>&nbsp;Manage Groups</a>
                    {% endif %}
                </div>

                {# deletion link for this datatype #}
                <div>
                    {% if is_datatype_admin %}
                        <a id="ODRDatatypeList_{{ datatype.id }}_delete" class="Pointer"
                           onclick="deleteDataType({{ datatype.id }});"><i class="fa fa-lg fa-trash-o"></i>&nbsp;Delete</a>
                    {% endif %}
                </div>

            </div>
        {% endif %}
    {% endfor %}
    </div>

    <div id="histogram_demo">

    </div>

    <script>
        $(function () {
            {% if hidden_datatype_count == 0 %}
            $("#ODRDatatypeToggleDiv").remove();
            {% else %}
            $("#all_datatypes_toggle").unbind('change').change(function () {
                if ($(this).is(":checked")) {
                    $(".ODRPublicDatatype").each(function () {
                        $(this).removeClass('ODRHidden');
                    });
                }
                else {
                    $(".ODRPublicDatatype").each(function () {
                        $(this).addClass('ODRHidden');
                    });
                }
            });
            {% endif %}

            histogramExample();

            $(".ODRMissingSearchTheme").unbind('click').click(function (event) {
                // These shouldn't be needed, but making sure...
                event.preventDefault();
                event.stopImmediatePropagation();

                var datatype_id = $(this).attr('rel');

                var url = '{{ path('odr_design_derivative_themes', { 'datatype_id': 0 }) }}';
                url = url.substring(0, (url.length - 1));
                url += datatype_id;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function (data, textStatus, jqXHR) {
                        // Redirect to the datatype's search page
                        window.location = data.d.url;
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function (jqXHR, textStatus) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                        }
                    }
                });
            });
        });

        function addDataRecord(urlpath, datatype_id) {
            if (confirm('Are you sure you want to create a new Datarecord?')) {
                var url = '{{ path('odr_record_add', { 'datatype_id': 0 }) }}';
                url = url.substring(0, (url.length - 1));
                url += datatype_id;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function (data, textStatus, jqXHR) {
                        // Reload this area of the page
                        var datarecord_id = data.d.datarecord_id;

                        var url = urlpath + '#{{ path('odr_record_edit', { 'datarecord_id': 0 }) }}';
                        url = url.substring(0, (url.length - 1));
                        url += datarecord_id;

                        window.location = url;
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function (jqXHR, textStatus) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                        }
                    }
                });
            }
        }

        function deleteDataType(datatype_id) {
            var datatype_name = $("#ODRDatarecordList_" + datatype_id + "_name").html();

            if (confirm("Are you sure you want to delete the \"" + datatype_name + "\" datatype and all associated datarecords?")) {
                // Delete the datatype selected
                var url = '{{ path('odr_design_delete_datatype', { 'datatype_id': 0 }) }}';
                url = url.substring(0, (url.length - 1));
                url += datatype_id;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function (data, textStatus, jqXHR) {
                        // Reload this area of the page
                        window.location.reload(true);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function (jqXHR, textStatus) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                        }
                    }
                });
            }
        }

        function histogramExample() {
            var x1 = [];
            var x2 = [];
            for (var i = 0; i < 500; i++) {
                x1[i] = Math.random();
                x2[i] = Math.random();
            }

            var trace1 = {
                x: x1,
                type: "histogram",
            };
            var trace2 = {
                x: x2,
                type: "histogram",
            };
            var data = [trace1, trace2];
            var layout = {barmode: "stack"};
            Plotly.newPlot("histogram_demo", data, layout);
        }
    </script>

{% endspaceless %}
