{% spaceless %}
<h1 class="grid_12 no-margin-top-phone">
    <span>Datatype Properties for {{ datatype.shortname }}</span>
    <span id="saved">&nbsp;&nbsp;&nbsp;SAVED</span>
</h1>

{% include 'ODRAdminBundle:Displaytemplate:datatype_properties_form.html.twig' with {'site_baseurl': site_baseurl, 'datatype': datatype, 'datatype_form': datatype_form, 'for_slideout': false, 'is_top_level': true, 'datatree': null, 'datatree_form': null, 'force_multiple': null} %}

<div id="ODRTextResultsDesign" class="ODRFormWrap">

    <div id="TextResults_design" class="row">
        <div>
            <h1>Available Fields</h1>
        </div>
        <div id="TextResults_start" class="TextResults_design">
        {% for datafield in textresults_datafields %}
            <div id="DataField_{{ datafield.id }}" class="DraggableField TextResults_DataField{% if datafield.getdisplayorder > 0 %} TextResults_hidden{% endif %}">{{ datafield.getfieldname }}</div>
        {% endfor %}
        </div>

        <div>
            <h1>Field Order</h1>
        </div>
        <div id="TextResults_order" class="TextResults_design SortableArea SortableArea_design">
        {% for datafield in textresults_datafields %}
            {% if datafield.getdisplayorder > 0 %}<span id="DataField_{{ datafield.id }}_design" class="TextResults_DataField">{{ datafield.getfieldname }}</span>{% endif %}
        {% endfor %}
        </div>

        <div>
            <h1>Do Not Display</h1>
        </div>
        <div id="TextResults_delete" class="TextResults_design SortableArea"></div>
    </div>

</div>

{% if can_view_permissions %}
    {% include 'ODRAdminBundle:Datatype:user_permissions_list.html.twig' with {'all_datatypes': all_datatypes, 'all_permissions': all_permissions} %}
{% endif %}

<style type="text/css">
    .ODRFormWrap {
        padding-top: 25px;
    }
    .TextResults_design {
        border: 1px solid #FF0000;
        min-height: 100px;
        position: relative;
        width: 900px;
        /*z-index: -1;*/
        clear: right;
    }
    #TextResults_design>div {
        float: none;
    }
    .TextResults_hidden {
        display: none !important;
    }
    .TextResults_DataField {
        /*position: relative;*/
        display: inline-block;
        border: 1px solid #0000FF;
        margin: 10px;
        padding: 10px;
        cursor: pointer;
        /*top: 25px;*/
    }
</style>

<script>

    var SaveTimeout = 1000;

    $(function() {

        $("#saved").hide();
        $(".MenuDesignArea").remove();

        // Listen for changes to the various fields of the Datatype form...
        $("#DatatypePropertiesForm_{{ datatype.id }}").find('select').each(function() {
            var datatype_id = {{ datatype.id }};

            $(this).unbind('change');
            $(this).change(function() {
                SaveDataTypeInterval = window.clearInterval(SaveDataTypeInterval);
                SaveDataTypeInterval = window.setInterval('SaveDatatypeProperties("' + datatype_id + '","")', SaveTimeout);
            });
        });

        // Need to watch the search slug field...
        $("#DatatypePropertiesForm_{{ datatype.id }}").find( $("#{{ datatype_form.searchSlug.vars.id }}")).each(function() {
            var datatype_id = {{ datatype.id }};

            $(this).unbind('keyup');
            $(this).unbind('paste');
            $(this).on('keyup paste', function() {
                SaveDataTypeInterval = window.clearInterval(SaveDataTypeInterval);
                SaveDataTypeInterval = window.setInterval('SaveDatatypeProperties("' + datatype_id + '","")', SaveTimeout);
            });
        });

        var draggable_id = null;
        $(".DraggableField").draggable({

            // Need to use this combination of settings so datafield visually shows on top of all theme elements
            appendTo: $("#ODRTextResultsDesign.ODRFormWrap"),
            helper: "clone",
            zIndex: 1000,

            start: function() {
                // Save the ID of the field that's being dragged around
                draggable_id = $(this).attr('id');
            },
            stop: function (event, ui) {
                // jQuery sortable's stop event appears to fire before draggable's stop event...don't want this ID anymore
                draggable_id = null;
            },
            grid: [ 2, 2 ],
            connectToSortable: ".SortableArea_design"
        });


        $(".SortableArea").sortable({

//            cancel: ".DraggableField",
//            axis: "x",

            start: function( event, ui ) {

                // Style the placeholder to more closely match the datafield being drug around
//                $(ui.placeholder).addClass( $(ui.helper).attr('class') );

                $(ui.placeholder).removeAttr('style');
                $(ui.placeholder).css( 'max-height', $(ui.helper).height() );
                $(ui.placeholder).css( 'width', $(ui.helper).width() * 0.95 );
                $(ui.placeholder).css( 'padding', '10px' );
                $(ui.placeholder).css( 'margin', '10px' );

//                $(ui.placeholder).css( 'top', '100px' );
//                $(ui.placeholder).css( 'display', 'inline-block' );
//                $(ui.placeholder).css( 'visibility', 'visible' );
            },
            stop: function( event, ui ) {
                // Determine where the sortable field ended up
                var ending_div_id = $(ui.item).parent().attr('id');

                // If the item ended up in the delete box...
                if (ending_div_id === 'TextResults_delete') {
                    // Remove the item
                    var item_id = $(ui.item).attr('id').split(/_/);
                    $(ui.item).remove();

                    // Re-show the original DraggableField
                    var original_id = '#' + item_id[0] + '_' + item_id[1];
                    $(original_id).removeClass('TextResults_hidden');
                }
                // If a draggable was dropped into here...
                else if (draggable_id !== null) {
                    // The new item in the SortableArea has the old DraggableField properties...fix that
                    $(ui.item).removeClass('DraggableField ui-draggable');
                    $(ui.item).attr('id', draggable_id + '_design');
                    $(ui.item).draggable('destroy');
                    $(ui.item).css('display', '');

                    // Hide the old DraggableField
                    $('#'+draggable_id).addClass('TextResults_hidden');

                    // Refresh the SortableArea so the new item can be sorted
                    $(".SortableArea").sortable('refresh');
                }

                // Reset the placeholder
                $(ui.item).removeAttr('style');

                // Save the changes
                SaveFieldOrder();
            },
            connectWith: ".SortableArea",
            grid: [ 2, 2 ]
        });
        $(".SortableArea").disableSelection();

    });

    function notifySaved() {
        $('#saved').fadeIn();
        setTimeout(function() {
            $('#saved').fadeOut();
        }, 1500);
    }

    function SaveFieldOrder() {

        var unused_field_ids = '';
        $('#TextResults_start').find('.TextResults_DataField').not('.TextResults_hidden').each(function() {
            var id_data = $(this).attr('id').split(/_/);
            unused_field_ids += id_data[1] + ',';
        });

        var used_field_ids = '';
        $('#TextResults_order').find('.TextResults_DataField').each(function() {
            var id_data = $(this).attr('id').split(/_/);
            var id =  id_data[1];
            used_field_ids += id + ',';
        });

        unused_field_ids = unused_field_ids.substring(0, unused_field_ids.length-1);
        used_field_ids = used_field_ids.substring(0, used_field_ids.length-1);

        var url = '{{ path('odr_textresults_field_order', { 'unused_field_ids': 0, 'used_field_ids': 0 } ) }}';
        url = url.substring(0, (url.length - 3));
        url += unused_field_ids + '/' + used_field_ids;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    notifySaved();
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    var SaveDataTypeInterval = null;
    function SaveDatatypeProperties(datatype_id) {
        if (SaveDataTypeInterval != undefined)
            SaveDataTypeInterval = window.clearInterval(SaveDataTypeInterval);

        var url = '{{ path('odr_design_get_datatype_properties', { 'datatype_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datatype_id;

//alert( url );
//return;

        var form_data = $("#DatatypePropertiesForm_" + datatype_id).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    notifySaved();
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);

                    // Forcibly reload page
                    window.location.reload(true);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }
</script>
{% endspaceless %}
