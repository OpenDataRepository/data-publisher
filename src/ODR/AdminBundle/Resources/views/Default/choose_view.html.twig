{% spaceless %}

{% if page_type == '' %}
<div>
    <label for="ODRChooseView_PageType">
        Mode Selection:
    </label>
    <select id="ODRChooseView_PageType">
    {% for key,label in available_page_types %}
        <option value="{{ key }}">{{ label }}</option>
    {% endfor %}
    </select>
</div>
{% endif %}

{% if page_type != '' and show_context_checkbox %}
<span id="ODRChooseView_contextspan">
    <label id="ODRChooseView_contextlabel" for="ODRChooseView_context">
        <input id="ODRChooseView_context" type="checkbox"/>&nbsp;Show all layouts
    </label>
</span>
{% endif %}

<ul id="ODRChooseView" class="pure-u-1">
    {% if user != "anon." %}<h4>To create a new view, copy an existing view and modify it.</h4>{% endif %}

    {# The user's currently selected theme goes at the top of the list... #}
    {% for theme_data in available_themes %}
        {% if theme_data.id == selected_theme_id %}
            {% include 'ODRAdminBundle:Default:choose_view_details.html.twig' with {
                'theme': theme_data,
                'user': user,
                'selected_theme_id': selected_theme_id,

                'is_datatype_admin': is_datatype_admin,
                'is_super_admin': is_super_admin,
                'formatted_page_type': formatted_page_type,
                'available_page_types': available_page_types,
            } %}
        {% endif %}
    {% endfor %}

    {# ...all other themes come after the currently selected theme #}
    {% for theme_data in available_themes %}
        {% if theme_data.id != selected_theme_id %}
            {% include 'ODRAdminBundle:Default:choose_view_details.html.twig' with {
                'theme': theme_data,
                'user': user,
                'selected_theme_id': selected_theme_id,

                'is_datatype_admin': is_datatype_admin,
                'is_super_admin': is_super_admin,
                'formatted_page_type': formatted_page_type,
                'available_page_types': available_page_types,
            } %}
        {% endif %}
    {% endfor %}
</ul>

<script>
    $(function() {
{% if page_type != '' and show_context_checkbox %}
        $("#ODRChooseView_context").unbind('change').change(function() {
            if ( $(this).prop('checked') == true ) {
                $(".ODRHiddenLayout").removeClass('ODRHidden');
                resetRemodalInnerHeight();
            }
            else {
                $(".ODRHiddenLayout").addClass('ODRHidden');
                resetRemodalInnerHeight();
            }
        });
{% endif %}

        $(".ODRMakeCurrentView").unbind('click').click(function() {
            // Reading properties of the modal has to come before calling setModalMessage()
{% if page_type == '' %}
            var selected_page_type = $("#ODRChooseView_PageType").children(":selected").val();
{% else %}
            var selected_page_type = '';
{% endif %}
            var theme_id = $(this).parent().closest('li').attr('data-theme-id');

            setModalMessage("Setting view for session.");

            {% if formatted_page_type == '' %}
            window.ODRChooseView_applyredirectcallback = function() {};
            {% endif %}

            var redirect = true;
            var persist = false;
            applyView(theme_id, redirect, persist, selected_page_type);
        });

        $(".ODRDefaultPersonal").unbind('click').click(function() {
            // Reading properties of the modal has to come before calling setModalMessage()
{% if page_type == '' %}
            var selected_page_type = $("#ODRChooseView_PageType").children(":selected").val();
{% else %}
            var selected_page_type = '';
{% endif %}
            var theme_id = $(this).parent().closest('li').attr('data-theme-id');

            setModalMessage("Setting view as personal default.");

            {% if formatted_page_type == '' %}
            window.ODRChooseView_applyredirectcallback = function() {};
            {% endif %}

            var redirect = true;
            var persist = true;
            applyView(theme_id, redirect, persist, selected_page_type);
        });

        $(".ODRMakeViewShared").unbind('click').click(function() {
            // Reading properties of the modal has to come before calling setModalMessage()
            var theme_id = $(this).parent().closest('li').attr('data-theme-id');

            setModalMessage("Toggling public status of view.");

            makeViewShared(theme_id);
        });


        $(".ODRDefaultDatabase").unbind('click').click(function() {
            // Reading properties of the modal has to come before calling setModalMessage()
{% if page_type == '' %}
            var selected_page_type = $("#ODRChooseView_PageType").children(":selected").val();
{% else %}
            var selected_page_type = '';
{% endif %}
            var theme_id = $(this).parent().closest('li').attr('data-theme-id');

            setModalMessage("Setting view as database default.");

            makeDatabaseDefault(theme_id, selected_page_type);
        });


        $(".ODRModifyTheme").unbind('click').click(function() {
            var theme_id = $(this).parent().closest('li').attr('data-theme-id');
            // Do not set this theme as the user's default for this datatype
            openModifyThemeEditor(theme_id, false);
        });

        $(".ODRCopyModifyTheme").unbind('click').click(function() {
            // Reading properties of the modal has to come before calling setModalMessage()
            var theme_id = $(this).parent().closest('li').attr('data-theme-id');

            setModalMessage("Copying selected theme, please wait...");

            copyAndModifyView(theme_id);
        });

        $(".ODRDeleteTheme").unbind('click').click(function() {
            // Reading properties of the modal has to come before calling setModalMessage()
            var theme_id = $(this).parent().closest('li').attr('data-theme-id');

            setModalMessage("Deleting view...");

            deleteView(theme_id);
        });


        $(".ODRUnsetDefaultPersonal").unbind('click').click(function() {
            var theme_id = $(this).parent().closest('li').attr('data-theme-id');
            var selected_page_type = $(this).attr('rel').toLowerCase().replaceAll(' ', '_');

            unsetPersonalDefaultView(theme_id, selected_page_type);
        });

        $(".ODRUnsetDefaultDatabase").unbind('click').click(function() {
            var theme_id = $(this).parent().closest('li').attr('data-theme-id');
            var selected_page_type = $(this).attr('rel').toLowerCase().replaceAll(' ', '_');

            unsetDatabaseDefaultView(theme_id, selected_page_type);
        });
    });

    /**
     * Triggers a change to the user's current theme.
     *
     * @param {number} theme_id The theme to use
     * @param {boolean} redirect If true, reloads the page to immediately use the selected theme
     * @param {boolean} persist If true, then the database is updated to indicate the user prefers to use the selected theme
     * @param {string} [selected_page_type]
     */
    function applyView(theme_id, redirect, persist, selected_page_type = '') {
        if (persist)
            persist = 1;
        else
            persist = 0;

        if ( selected_page_type == '' ) {
{% if page_type != '' %}
            // If a page type isn't provided, then set it based on where this is being called from
            selected_page_type = '{{ page_type }}';
{% else %}
            // If a page type isn't provided, then this is being called from the datatype landing page
            //  and there's nothing to store the theme under...return without saving anything
            return;
{% endif %}
        }

        var url = '{{ path('odr_apply_theme', { 'datatype_id': datatype.id, 'page_type': '', 'theme_id': 0, 'persist': 0 }) }}';
        url = url.substr(0, (url.length - 4)) + selected_page_type + "/" + theme_id + "/" + persist;

        // alert(url);  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                if (redirect) {
                    // What to do after selecting a theme depends on which page the user is on...
                    //  ...due to an ajax call and symfony being between the page and the rendering,
                    //  the pages have to set a global variable for this function to use
                    if ( window.ODRChooseView_applyredirectcallback )
                        ODRChooseView_applyredirectcallback(theme_id);
                    else
                        alert('missing redirect callback');

                    closeODRRemodal();
                }

                // Without redirect, this just sets the view preference
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Toggles whether the given theme is shared or not.
     *
     * @param {number} theme_id
     */
    function makeViewShared(theme_id) {
        var url = '{{ path('odr_toggle_theme_shared', { 'theme_id': 0 }) }}';
        url = url.substr(0, (url.length - 1)) + theme_id;

        // alert(url);  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                // Close modal
                closeODRRemodal();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Sets the given theme as its datatype's default theme for the current page_type (display, edit,
     * search results, etc)
     *
     * @param {number} theme_id
     * @param {string} selected_page_type
     */
    function makeDatabaseDefault(theme_id, selected_page_type) {

        if ( selected_page_type == '' )
            selected_page_type = '{{ page_type }}';

        var url = '{{ path('odr_make_default_theme', { 'page_type': '', 'theme_id': 0 }) }}';
        url = url.substr(0, (url.length - 2)) + selected_page_type + "/" + theme_id;

        // alert(url);  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                {% if formatted_page_type == '' %}
                window.ODRChooseView_applyredirectcallback = function() {};
                {% endif %}

                // Apply view for session and redirect
                var redirect = true;
                var persist = true;
                applyView(theme_id, redirect, persist, selected_page_type);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Triggers a copy of the selected theme, then redirects to the design page for the new theme.
     *
     * @param {number} theme_id
     */
    function copyAndModifyView(theme_id) {
        var url = '{{ path('odr_clone_theme', { 'theme_id': 0 }) }}';
        url = url.substr(0, (url.length - 1)) + theme_id;

        // alert(url);  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                // Open the edit page for the new theme
                // This will also make the new theme the user's default for this datatype
                openModifyThemeEditor(data.d.new_theme_id, true);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Opens the design page for the given theme.
     *
     * @param {number} theme_id
     * @param {boolean} persist
     */
    function openModifyThemeEditor(theme_id, persist = false) {
        // Set view for session
        var redirect = false;
        applyView(theme_id, redirect, persist);    // Don't necessarily have a page_type available here...could be coming from the landing page

        // Open View Editor
{% if page_type == '' or page_type == 'display' or page_type == 'edit' %}
        var url = '{{ path('odr_modify_theme', { 'datatype_id': datatype.id, 'theme_id': 0 }) }}';
        url = url.substr(0, url.length-1);
        url += theme_id;
{% else %}
        var url = '{{ path('odr_modify_theme', { 'datatype_id': datatype.id, 'theme_id': 0, 'search_key': '' }) }}';
        url = url.substr(0, url.length-1);
        url += theme_id + '/' + '{{ search_key }}';
{% endif %}

        // alert(url);  return;

        // Hash change event will load theme...
        window.location.hash = url;
        // ...but need to close the modal
        closeODRRemodal();
    }

    /**
     * Deletes the given theme.
     *
     * @param {number} theme_id
     */
    function deleteView(theme_id) {
        var url = '{{ path('odr_delete_custom_theme', { 'theme_id': 0 }) }}';
        url = url.substr(0, (url.length - 1)) + theme_id;

        // alert(url);  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
{% if page_type == '' %}
                // Just close the modal when running on the landing page
{% elseif page_type == 'display' or page_type == 'edit' %}
                {# Don't change the URL when viewing a single datarecord #}
                reloadPage();
{% else %}
                {# Need to extract the offset, then redirect to a URL with the desired theme id #}
                var hash = window.location.hash;
                var offset = hash.substr(hash.lastIndexOf('/') + 1);
                if ( isNaN(offset) )
                    offset = '1';

                var url = '{{ path('odr_search_render', { 'search_theme_id': 0, 'search_key': '', 'offset': 0 }) }}';
                url = url.substr(0, url.length-4);
                url += '0' + '/' + '{{ search_key }}' + '/' + offset;

                UpdateURL(url);
{% endif %}
                closeODRRemodal();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Updates the given theme so it's no longer considered the default for a user.
     *
     * @param {number} theme_id
     * @param {string} selected_page_type
     */
    function unsetPersonalDefaultView(theme_id, selected_page_type) {

        var url = '{{ path('odr_unset_personal_theme', { 'page_type': '', 'theme_id': 0 }) }}';
        url = url.substr(0, (url.length - 2)) + selected_page_type + '/' + theme_id;

        // alert(url);  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                // Do not apply view to user's session or redirect
                closeODRRemodal();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Updates the given theme so it's no longer considered the default for a database.
     *
     * @param {number} theme_id
     * @param {string} selected_page_type
     */
    function unsetDatabaseDefaultView(theme_id, selected_page_type) {

        if ( selected_page_type == '' )
            selected_page_type = '{{ page_type }}';

        var url = '{{ path('odr_unset_default_theme', { 'page_type': '', 'theme_id': 0 }) }}';
        url = url.substr(0, (url.length - 2)) + selected_page_type + '/' + theme_id;

        // alert(url);  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                // Do not apply view to user's session or redirect
                closeODRRemodal();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }
</script>

{% endspaceless %}
