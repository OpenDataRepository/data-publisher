{% spaceless %}

{% set title = "Search Result" %}
{% if page_type == "display" %}
    {% set title = "View Record" %}
{% elseif page_type == "edit" %}
    {% set title = "Edit Record" %}
{% endif %}

{# Determine user permissions for this datatype... #}
{% set can_add_record = false %}
{% set can_edit_datatype = false %}
{% set is_datatype_admin = false %}
{% if user_permissions is defined %}
    {% if user_permissions[ datatype.id ] is defined and user_permissions[ datatype.id ][ 'dr_add' ] is defined %}
        {% set can_add_record = true %}
    {% endif %}

    {% if user_permissions[ datatype.id ] is defined and user_permissions[ datatype.id ][ 'dr_edit' ] is defined %}
        {% set can_edit_datatype = true %}
    {% endif %}

    {% if user_permissions[ datatype.id ] is defined and user_permissions[ datatype.id ][ 'dt_admin' ] is defined %}
        {% set is_datatype_admin = true %}
    {% endif %}
{% endif %}

{# ...then determine which of the additional controls to render on the page #}
{% set display_editable_records_toggle = false %}
{% if (has_search_restriction is defined and has_search_restriction)
    and (page_type == 'search_results' or page_type == 'table') %}
    {% set display_editable_records_toggle = true %}
{% endif %}

{% set display_add_record = false %}
{% if (display_export_options is defined and display_export_options == true)
    and intent == 'searching' and can_add_record == true %}
    {% set display_add_record = true %}
{% endif %}

{% set display_mass_edit = false %}
{% if (display_export_options is defined and display_export_options == true)
    and intent == 'searching' and has_datarecords and can_edit_datatype == true %}
    {% set display_mass_edit = true %}
{% endif %}

{% set display_csv_export = false %}
{% if (display_export_options is defined and display_export_options == true)
    and intent == 'searching' and has_datarecords %}
    {% set display_csv_export = true %}
{% endif %}

{% set display_tracking = false %}
{% if can_edit_datatype == true %}
    {% set display_tracking = true %}
{% endif %}

{% set display_download_files = false %}
{% if can_edit_datatype == true and has_datarecords %}
    {% set display_download_files = true %}
{% endif %}

{% if notitle is defined %}
{% else %}
    <h1 class="no-margin-top-phone">
        <span>{{ title }} &raquo; <span class="ODRRecordName">{{ datatype.dataTypeMeta.shortName }}</span></span>
        {% if page_type != 'edit' %}
        <a id="ODRPageSelectSettings"><i class="fa fa-md fa-fw fa-cog"></i></a>
        {% endif %}
    </h1>
{% endif %}

    {# Record View Menu #}
    <div id="page_settings_menu" class="pure-u-1 pure-menu-horizontal" style="display:none;">
        <ul class="pure-menu-list">
        {% if display_editable_records_toggle %}
            <li class="pure-menu-item SpacerRight">
                <label for="display_only_editable_toggle" class="pure-button">
                    <input type="checkbox" id="display_only_editable_toggle" class="ODRDisplayOnlyEditable" style="margin-right: 5px;" />
                    Only show editable records
                </label>
            </li>
        {% endif %}

        {% if page_type != 'edit' %}
            <li class="pure-menu-item SpacerRight">
                <label id="ChooseView" class="pure-button">
                    Choose View
                </label>
            </li>
        {% endif %}

        {% if display_add_record %}
            <li class="pure-menu-item SpacerRight">
                <label id="ODRAddRecord" class="pure-button">
                    Add Record
                </label>
            </li>
        {% endif %}

        {% if display_mass_edit %}
            <li class="pure-menu-item SpacerRight">
                <label id="ODRMassEdit" class="pure-button">
                    Mass Edit Records
                </label>
            </li>
        {% endif %}

        {% if display_csv_export %}
            <li class="pure-menu-item SpacerRight">
                <label id="ODRCSVExport" class="pure-button">
                    Export Records (CSV)
                </label>
            </li>
        {% endif %}

        {% if display_tracking %}
            <li class="pure-menu-item SpacerRight">
                <label id="ODRTracking" class="pure-button">
                    View Recent Changes
                </label>
            </li>
        {% endif %}

        {% if display_download_files %}
            <li class="pure-menu-item SpacerRight">
                <label id="ODRMassFileDownload" class="pure-button">
                    Download Files
                </label>
            </li>
        {% endif %}
        </ul>
{#
    {% if display_export_options is defined and display_export_options == true and intent == 'searching' and has_datarecords %}
        {% if use_jupyterhub %}
            <div class="FRight">
                <span id="jupyterhub_app_list" style="padding-right: 10px;"></span>

                <form target="_blank" action="{{ path('odr_jupyterhub_export') }}" method="post" style="display: inline;">
                    <input type="hidden" name="datatype_id" value="{{ datatype.id }}" />
                    <input type="hidden" name="search_key" value="{{ search_key }}" />
                    <input type="hidden" name="app_id" id="jupyterhub_app_id" />

                    <button id="ODRRunApp" type="submit" class="pure-button">Run this Jupyterhub app on these search results</button>
                </form>
            </div>
        {% endif %}
    {% endif %}
#}
    </div>

<script>

    $(function() {
        initViewManager();

{% if display_add_record %}
        $("#ODRAddRecord").unbind('click').click(function() {
            var url = '{{ path('odr_edit_fake_record', { 'datatype_id': datatype.id}) }}';
            UpdateURL(url);
        });
{% endif %}

{% if display_mass_edit %}
        $("#ODRMassEdit").unbind('click').click(function() {
            var url = '{{ path('odr_mass_edit_render', { 'search_theme_id': search_theme_id, 'datatype_id': datatype.id, 'search_key': search_key, 'offset': offset }) }}';
            UpdateURL(url);
        });
{% endif %}

{% if display_csv_export %}
        $("#ODRCSVExport").unbind('click').click(function() {
            var url = '{{ path('odr_csv_export_render', { 'search_theme_id': search_theme_id, 'datatype_id': datatype.id, 'search_key': search_key, 'offset': offset }) }}';
            UpdateURL(url);
        });
{% endif %}

{% if display_tracking %}
        $("#ODRTracking").unbind('click').click(function() {
            var url = '{{ path('odr_track_search_result_changes', { 'search_key': search_key }) }}';
            UpdateURL(url);
        });
{% endif %}

{% if display_download_files %}
        $("#ODRMassFileDownload").unbind('click').click(function() {
            {# defined in ODRAdminBundle:Default:mass_download_dialog.html.twig #}
            openMassDownloadDialog("{{ search_key }}");
        });
{% endif %}

{#
    {% if has_datarecords and use_jupyterhub %}
        // Get the app list to display on the page
        $.ajax({
            cache: false,
            type: 'GET',
            url: "{{ path('odr_jupyterhub_app_list', {'datatype_id': datatype.id}) }}",
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if ( parseInt(jqXHR.status) === 200 ) {
                    $("#jupyterhub_app_list").html(data.html);

                    $("#jupyterhub_app_selector").unbind('change').change(function() {
                        var selected = $(this).val();
                        $("#jupyterhub_app_id").val(selected);
                    });

                    // Store the value of the first option in the form
                    $("#jupyterhub_app_id").val( $("#jupyterhub_app_selector option:first").val() );
                }
            }
        });
    {% endif %}
#}

{% if display_editable_records_toggle %}
        {% if editable_only is not defined or editable_only == true %}
        $("#display_only_editable_toggle").prop('checked', true);
        {% endif %}

        $(".ODRDisplayOnlyEditable").unbind('click').click(function(event) {

            var toggle_data = {
                'odr_tab_id': window.sessionStorage.getItem('odr_tab_id'),
                'datatype_id': {{ datatype.id }}
            };

            var url = '{{ path('odr_session_toggle_show_editable') }}';

            $.ajax({
                cache: false,
                type: 'POST',
                url: url,
                dataType: "json",
                data: toggle_data,
                // data: encodeURIComponent(toggle_data),
                success: function (data, textStatus, jqXHR) {
                    // Easier to just reload the page...
                    reloadPage();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything on error
                },
                complete: function (jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                    }
                }
            });
        });
{% endif %}
    });

    /**
     * Attaches the slide open/shut to the "view options" icon.
     */
    function initViewManager() {
        // Setup Theme System
        setupThemeSystem();

        $("#ODRPageSelectSettings").unbind('click').click(function(event) {
            $("#page_settings_menu").toggle('fast');
        });
    }

    /**
     * Attaches the correct click handler to the "Choose View" button.
     */
    function setupThemeSystem() {
        // Init the choose view button
        $("#ChooseView").unbind('click').click(function(event) {
            chooseView();
        });
    }

    /**
     * Opens the modal for users to view/select available themes for this datatype.
     */
    function chooseView() {
        modal_options = {
            title: "Choose from available views:",
            // body: "<div>Loading will not display if body is set.</div>",
            // loading: true,  // Force loading to display
        };
        openODRRemodal(modal_options);
{% if page_type != 'linking' %}
        var url = '{{ path('odr_get_available_themes', { 'datatype_id': datatype.id, 'page_type': page_type }) }}';
{% else %}
        var url = '{{ path('odr_get_available_themes', { 'datatype_id': datatype.id, 'page_type': 'table' }) }}';
{% endif %}

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                $(".ODRRemodalBody").html( data.d );
                $(".ODRRemodalLoading").fadeOut('150', function() {
                    $(".ODRRemodalBody").show();
                    resetRemodalInnerHeight();
                    initChooseViewButtons();
                });
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Attaches click handlers to all the buttons inside the "available themes" modal.
     */
    function initChooseViewButtons() {
        $(".ODRDeleteTheme").unbind('click').click(function() {
            // Show loading with "Deleting" text
            setODRRemodalLoadingText("deleting");
            $(".ODRRemodalBody").hide();
            $(".ODRRemodalLoading").show();
            resetRemodalInnerHeight();

            var theme_id = $(this).parent().parent().parent().parent().attr('data-theme-id');
            deleteView(theme_id);
        });

        $(".ODRDefaultPersonal").unbind('click').click(function() {
            setModalMessage("Setting view as personal default.");

            var theme_id = $(this).parent().parent().parent().attr('data-theme-id');
            var redirect = true;
            var persist = true;
            applyView(theme_id, redirect, persist);
        });

        $(".ODRMakeCurrentView").unbind('click').click(function() {
            setModalMessage("Setting view for session.");

            var theme_id = $(this).parent().parent().parent().attr('data-theme-id');
            var redirect = true;
            var persist = false;
            applyView(theme_id, redirect, persist);
        });

        $(".ODRCopyModifyTheme").unbind('click').click(function() {
            var theme_id = $(this).parent().parent().parent().parent().attr('data-theme-id');
            copyAndModifyView(theme_id);
        });

        $(".ODRModifyTheme").unbind('click').click(function() {
            var theme_id = $(this).parent().parent().parent().parent().attr('data-theme-id');
            // Do not set this theme as the user's default for this datatype
            openModifyThemeEditor(theme_id, false);
        });

        $(".ODRDefaultDatabase").unbind('click').click(function() {
            setModalMessage("Setting view as database default.");

            var theme_id = $(this).parent().parent().parent().attr('data-theme-id');
            makeDatabaseDefault(theme_id);
        });

        $(".ODRMakeViewPublic").unbind('click').click(function() {
            setModalMessage("Toggling public status of view.");

            var theme_id = $(this).parent().parent().parent().attr('data-theme-id');
            makeViewPublic(theme_id);
        });
    }

    /**
     * Triggers a change to the user's current theme.
     *
     * @param {number} theme_id The theme to use
     * @param {bool} redirect If true, reloads the page to immediately use the selected theme
     * @param {bool} persist If true, then the database is updated to indicate the user prefers to use the selected theme
     */
    function applyView(theme_id, redirect, persist) {
        if (persist)
            persist = 1;
        else
            persist = 0;

        var url = '{{ path('odr_apply_theme', { 'datatype_id': datatype.id, 'theme_id': 0, 'persist': 0 }) }}';
        url = url.substr(0, (url.length - 3)) + theme_id + "/" + persist;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                if (redirect) {
                    closeODRRemodal();
{% if page_type == 'display' or page_type == 'edit' or page_type == 'linking' %}
                    // If viewing a single datarecord, reload the search content...the correct theme
                    //  will be pulled from the user's session
                    reloadPage();
{% else %}
                    // Need to extract the offset, then redirect to a URL with the desired theme id
                    var hash = window.location.hash;
                    var offset = hash.substr(hash.lastIndexOf('/') + 1);
                    if ( isNaN(offset) )
                        offset = '1';

                    // Ensure the search sidebar doesn't revert back to the previous theme if the
                    //  Search button is clicked
                    $("#selected_theme_id").val(theme_id);

                    // Reload the search results list with the newly selected theme
                    var url = '{{ path('odr_search_render', { 'search_theme_id': 0, 'search_key': '', 'offset': 0 }) }}';
                    url = url.substr(0, url.length-4);
                    url += theme_id + '/' + '{{ search_key }}' + '/' + offset;

                    UpdateURL(url);
{% endif %}
                }

                // Without redirect, this just sets the view preference
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Triggers a copy of the selected theme, then redirects to the design page for the new theme.
     *
     * @param {number} theme_id
     */
    function copyAndModifyView(theme_id) {
        var url = '{{ path('odr_clone_theme', { 'theme_id': 0 }) }}';
        url = url.substr(0, (url.length - 1)) + theme_id;

        setModalMessage("Copying selected theme, please wait...");

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                // Open the edit page for the new theme
                // This will also make the new theme the user's default for this datatype
                openModifyThemeEditor(data.d.new_theme_id, true);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Opens the design page for the given theme.
     *
     * @param {number} theme_id
     * @param {bool} persist
     */
    function openModifyThemeEditor(theme_id, persist = false) {
        // Set view for session
        var redirect = false;
        applyView(theme_id, redirect, persist);

        closeODRRemodal();

        // Open View Editor
{% if page_type == 'display' or page_type == 'edit' %}
        var url = '{{ path('odr_modify_theme', { 'datatype_id': datatype.id, 'theme_id': 0 }) }}';
        url = url.substr(0, url.length-1);
        url += theme_id;
{% else %}
        var url = '{{ path('odr_modify_theme', { 'datatype_id': datatype.id, 'theme_id': 0, 'search_key': '' }) }}';
        url = url.substr(0, url.length-1);
        url += theme_id + '/' + '{{ search_key }}';
{% endif %}

        // Hash change event will load theme
        window.location.hash = url;
    }

    /**
     * Toggles the public status of the given theme.
     *
     * @param {number} theme_id
     */
    function makeViewPublic(theme_id) {
        var url = '{{ path('odr_toggle_theme_public', { 'theme_id': 0 }) }}';
        url = url.substr(0, (url.length - 1)) + theme_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                // Close modal
                closeODRRemodal();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Sets the given theme as its datatype's default theme (for the inferred context...display,
     *  table, search_results, etc)
     *
     * @param {number} theme_id
     */
    function makeDatabaseDefault(theme_id) {
        var url = '{{ path('odr_make_default_theme', { 'theme_id': 0 }) }}';
        url = url.substr(0, (url.length - 1)) + theme_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                // Apply view for session and redirect
                var redirect = true;
                var persist = true;
                applyView(theme_id, redirect, persist);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Deletes the given theme.
     *
     * @param {number} theme_id
     */
    function deleteView(theme_id) {
        var url = '{{ path('odr_delete_custom_theme', { 'theme_id': 0 }) }}';
        url = url.substr(0, (url.length - 1)) + theme_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                $(".ODRRemodalLoading").hide();
                resetODRRemodalLoadingText();
                setModalMessage("View deleted.");

                // Close modal and reload page
                closeODRRemodal();
{% if page_type == 'display' or page_type == 'edit' or page_type == 'linking' %}
                {# Don't change the URL when viewing a single datarecord #}
                reloadPage();
{% else %}
                {# Need to extract the offset, then redirect to a URL with the desired theme id #}
                var hash = window.location.hash;
                var offset = hash.substr(hash.lastIndexOf('/') + 1);
                if ( isNaN(offset) )
                    offset = '1';

                var url = '{{ path('odr_search_render', { 'search_theme_id': 0, 'search_key': '', 'offset': 0 }) }}';
                url = url.substr(0, url.length-4);
                url += '0' + '/' + '{{ search_key }}' + '/' + offset;

                UpdateURL(url);
{% endif %}
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to create a jGrowl because exception handlers will automatically
                //  display. Close the dialog so it's not in some half-initialized state.
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }
</script>

{% endspaceless %}
