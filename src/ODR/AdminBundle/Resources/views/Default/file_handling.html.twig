{% spaceless %}
<script>
    var initial_decrypt_check_timeout = 250;
    var decrypt_check_timeout = 1500;
    var encrypt_check_timeout = 1500;

    var pending_file_decryptions = {};

    /**
     * Attempts to download a file from a datafield, setting up a decryption progress tracker if
     * needed.
     *
     * @param {Event} event
     * @param {number} file_id
     */
    function handleFileDownload(event, file_id) {
        // Prevent a normal file download
        event.preventDefault();

        // Don't start a new download if one is already in progress
        if ( pending_file_decryptions[file_id] != null
            || pending_file_decryptions[file_id] != undefined
            || file_decrypt_timeouts[file_id] != null
            || file_decrypt_timeouts[file_id] != undefined
        ) {
            //alert('download in progress already');
            return false;
        }

        var download_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
        var decrypt_progress = $("#ODRFileDecrypt_" + file_id + "_progress");

        var url = '{{ path('odr_file_download_start', {'file_id': 0}) }}';
        url = url.substring(0, (url.length-1));
        url += file_id;


        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                // Handle successful responses
                var status_code = jqXHR.status;
                if (status_code == 200) {
                    // Hide div for decryption progress
                    $(download_div).css('visibility', 'hidden');
                    $(decrypt_progress).css('width', '0');

                    // File exists and is ready to download
                    window.setTimeout( "downloadFile(" + file_id + ");", initial_decrypt_check_timeout );
                }
                else if (status_code == 202) {
                    // Show div for decryption progress
                    $(download_div).css('visibility', 'visible');
                    $(decrypt_progress).css('width', '100%');

                    // File needs to be decrypted first
                    window.setTimeout( "createFileDecryptProgressCheck(" + file_id + ", 1);", initial_decrypt_check_timeout );  // download the file after it finishes decrypting
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Handle errors
                pending_file_decryptions[ file_id ] = null;
                file_decrypt_timeouts[ file_id ] = null;
                file_decrypt_progress[ file_id ] = null;
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Triggers a download of the requested file from the server.
     *
     * @param {number} file_id
     */
    function downloadFile(file_id) {

        var href = '{{ path('odr_file_download', {'file_id': 0}) }}';
        href = href.substring(0, (href.length-1));
        href += file_id;

        var download_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
        var decrypt_progress = $("#ODRFileDecrypt_" + file_id + "_progress");

        var download = $.fileDownload(href, {
            // Instruct ODR to send any errors back as json
            data: {
                'error_type': 'json'
            },
            prepareCallback: function(url) {
{#
//console.log('prepare for file ' + file_id);
                if (can_cancel) {
                    // Activate the cancel button for this file decryption...
                    $(cancel_button).unbind('click');
                    $(cancel_button).click(function (event) {
                    // If using ShortResults, this click will trigger a load of the datarecord this file belongs to...prevent that
                        if (short_form)
                            event.stopImmediatePropagation();

                        cancelFileDecryption(download, file_id);
                    });
                }
                else {
                    // Not allowed to cancel this decryption, hide the button
                    $(cancel_button).hide();
                }
#}
            },
            successCallback: function (url) {
//console.log('success for file ' + file_id);
                // File is finished downloading
                pending_file_decryptions[ file_id ] = null;
                file_decrypt_timeouts[ file_id ] = null;
                file_decrypt_progress[ file_id ] = null;
{#
                // Download is done, No longer need these
                $(cancel_button).show();
                $(cancel_button).unbind('click');
#}
                $(download_div).css('visibility', 'hidden');
                $(decrypt_progress).css('width', '0');
            },
            failCallback: function (responseHtml, url, error) {
//console.log('fail for file ' + file_id);
                // Something went wrong...
                pending_file_decryptions[ file_id ] = null;
                file_decrypt_timeouts[ file_id ] = null;
                file_decrypt_progress[ file_id ] = null;

                // Convert response to json, and display error message
                var response = $.parseJSON(responseHtml);
                createJGrowlError(response);
{#
                // Download is done, No longer need these
                $(cancel_button).show();
                $(cancel_button).unbind('click');
#}
                $(download_div).css('visibility', 'hidden');
                $(decrypt_progress).css('width', '0');
            }
        });
    }

    // TODO - All of these setTimeout calls need to be intervals. So they can be destroyed properly.
    var file_decrypt_timeouts = {};
    var file_decrypt_progress = {};

    /**
     * Ensure that at most a single progress request is active for a file decryption at any given
     * time.
     *
     * @param {number} file_id
     * @param {number} download_file_after If "1", then trigger a file download once the decryption
     *                                     is complete.
     */
    function createFileDecryptProgressCheck(file_id, download_file_after) {
        // Ensure that at most a single timeout is running for a given file at any given time
        if ( file_decrypt_timeouts[ file_id ] == null || file_decrypt_timeouts[ file_id ] == undefined ) {
            file_decrypt_timeouts[ file_id ] = download_file_after;
            window.setTimeout( "checkFileDecryptProgress(" + file_id + ");", decrypt_check_timeout );
        }
    }

    /**
     * Queries the server for the decryption progress on the given file.
     *
     * @param {number} file_id
     */
    function checkFileDecryptProgress(file_id) {
        // Get progress of file encryption from server
        var url = "{{ path('odr_get_file_decrypt_progress', {'file_id': 0}) }}";
        url = url.substr(0, url.length-1);
        url += file_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                var current_value = parseFloat(data.d.current_value);   // already a percentage of max_value
                var max_value = parseFloat(data.d.max_value);

                var download_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
                var decrypt_progress = $("#ODRFileDecrypt_" + file_id + "_progress");

                if ( !$(download_div).is(':visible') ) {
//console.log('stopping timeout cycle for file ' + file_id);
                    /* element got hidden already, do nothing */
                    file_decrypt_timeouts[ file_id ] = null;
                    file_decrypt_progress[ file_id ] = null;

                    // Ensure progress bar isn't displayed anymore
                    $(download_div).css('visibility', 'hidden');
                    $(decrypt_progress).css('width', '0');
                }
                else if ( file_decrypt_timeouts[ file_id ] != null ) {
//console.log('progress for file ' + file_id + ': ' + current_value + '%');

                    // Check whether this decryption has made any progress...
                    if ( file_decrypt_progress[ file_id ] === undefined
                        || file_decrypt_progress[ file_id ] === null
                        || current_value !== file_decrypt_progress[ file_id ]['value']
                    ) {
                        // File decryption just started, or progress was made
                        file_decrypt_progress[ file_id ] = {
                            'count': 0,
                            'value': current_value,
                        };
                    }
                    else {
                        // File decryption has made no progress...keep track of how long it's
                        //  been stalled
                        file_decrypt_progress[ file_id ]['count'] += decrypt_check_timeout;

                        // If it's been stalled for more than 15 seconds...
                        if ( file_decrypt_progress[ file_id ]['count'] > 15000 ) {
                            // ...assume that the decryption has failed, and notify the user
                            var error_text = '<div class="ODRNotificationHeader">500 Internal Server Error -- 0xb02c7e53</div>';
                            error_text += '<div class="ODRNotificationText">No apparent progress being made on decryption of File ' + file_id + ', aborting download</div>';

                            $.jGrowl(
                                error_text,
                                {
                                    theme: "ODRNotification",
                                    sticky: true,
                                    openDuration: 250,
                                    closeDuration: 250
                                }
                            );

                            // Stop querying server for progress
                            file_decrypt_timeouts[ file_id ] = null;
                            file_decrypt_progress[ file_id ] = null;

                            // Hide the css for the progressbar
                            $(download_div).css('visibility', 'hidden');
                            $(decrypt_progress).css('width', 0);

                            return false;
                        }
                    }

                    if (current_value < 100) {
                        // Update the progressbar
                        $(download_div).css('visibility', 'visible');
                        if ( current_value > 0 )
                            $(decrypt_progress).css('width', current_value + '%');

                        // Schedule the next decrypt check
                        window.setTimeout( "checkFileDecryptProgress(" + file_id + ");", decrypt_check_timeout );
                    }
                    else {
                        // Save whether the user needed to download this file after decryption or not
                        var download_file_after = file_decrypt_timeouts[ file_id ];

                        // File is fully decrypted, stop querying server for progress
                        file_decrypt_timeouts[ file_id ] = null;
                        file_decrypt_progress[ file_id ] = null;

                        // Hide the css for the progressbar
                        $(download_div).css('visibility', 'hidden');
                        $(decrypt_progress).css('width', 0);

                        if (download_file_after == 1) {
                            // Download the file
                            downloadFile(file_id);
                        }
                    }
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Handle errors
            }
        });
    }

    var file_encrypt_timeouts = {};

    /**
     * Ensure that at most a single progress request is active for a file encryption at any given
     * time.
     *
     * @param {number} file_id
     * @param {number} datarecord_id
     * @param {number} datafield_id
     */
    function createFileEncryptProgressCheck(file_id, datarecord_id, datafield_id) {
        if ( file_encrypt_timeouts[ file_id ] == null || file_encrypt_timeouts[ file_id ] == undefined ) {
            file_encrypt_timeouts[ file_id ] = 1;
            window.setTimeout( "checkFileEncryptProgress(" + file_id + ", " + datarecord_id + ", " + datafield_id + ");", encrypt_check_timeout );
        }
    }

    /**
     * Queries the server for the encryption progress on the given file
     *
     * @param {number} file_id
     * @param {number} datarecord_id
     * @param {number} datafield_id
     */
    function checkFileEncryptProgress(file_id, datarecord_id, datafield_id) {
        // Get progress of file encryption from server
        var url = "{{ path('odr_get_file_encrypt_progress', {'file_id': 0}) }}";
        url = url.substr(0, url.length-1);
        url += file_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                var current_value = parseInt(data.d.current_value);   // already a percentage of max_value
                var max_value = parseInt(data.d.max_value);

                var file_encrypt_progress_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
                var file_encrypt_progress_bar = $("#ODRFileDecrypt_" + file_id + "_progress");

                if (file_encrypt_progress_bar == null || file_encrypt_progress_bar == undefined || file_encrypt_progress_bar[0] == null || file_encrypt_progress_bar[0] == undefined) {
                    /* element no longer exists, do nothing */
                    file_encrypt_timeouts[ file_id ] = null;

                    $(file_encrypt_progress_bar).css('width', 0);
                    $(file_encrypt_progress_div).css('visibility', 'hidden');
                }
                else if (current_value == 100) {
                    // Stop checking for progress updates
                    file_encrypt_timeouts[ file_id ] = null;

                    // Hide the css for the progressbar
                    $(file_encrypt_progress_bar).css('width', 0);
                    $(file_encrypt_progress_div).css('visibility', 'hidden');
                }
                else if (file_encrypt_timeouts[ file_id ] != null) {
                    // Update the progressbar
                    window.setTimeout( "checkFileEncryptProgress(" + file_id + ", " + datarecord_id + ", " + datafield_id + ");", encrypt_check_timeout );

                    $(file_encrypt_progress_div).css('visibility', 'visible');
                    $(file_encrypt_progress_bar).css('width', current_value + '%');
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Handle errors
            }
        });
    }

    var zip_archive_timeouts = {};

    /**
     * Ensure that at most a single progress request is active for a given zip archive at any given
     * time.
     *
     * @param {string} archive_filename
     * @param {string} archive_size
     * @param {string} form_id
     */
    function createZipArchiveProgressCheck(archive_filename, archive_size, form_id) {
        if ( zip_archive_timeouts[ archive_filename ] == null || zip_archive_timeouts[ archive_filename ] == undefined ) {
            zip_archive_timeouts[ archive_filename ] = 1;
            window.setTimeout( "checkZipArchiveProgress('" + archive_filename + "', '" + archive_size + "', '" + form_id + "');", decrypt_check_timeout );
        }
    }

    /**
     * Queries the server for the progress on the construction of the requested zip archive, and
     * triggers a download of the archive when it's complete.
     *
     * @param {string} archive_filename
     * @param {string} archive_size
     * @param {string} form_id
     */
    function checkZipArchiveProgress(archive_filename, archive_size, form_id) {
        // Get progress of zip archive from server
        var url = "{{ path('odr_get_zip_archive_progress', {'archive_filename': 0}) }}";
        url = url.substr(0, url.length-1);
        url += archive_filename;

        archive_size = parseInt(archive_size);

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                var archive_filecount = parseInt(data.d.archive_filecount);

                // Update the progress indicator
                $('#ODRFileDownloadForm_current').html(archive_filecount);


                if ( archive_size == archive_filecount ) {
                    // Reset and close the file download dialog form
                    $('#ODRFileDownloadForm_progress').hide();
                    var inst = $('[data-remodal-id=ODRRemodal]').remodal();
                    inst.close();

                    // Construct the URL to download the archive
                    var download_url = "{{ path('odr_download_zip_archive', {'archive_filename': 0}) }}";
                    download_url = download_url.substr(0, download_url.length-1);
                    download_url += archive_filename;

                    // Start downloading the archive
                    var download = $.fileDownload(download_url, {
                        // Instruct ODR to send any errors back as json
                        data: {
                            'error_type': 'json'
                        },
                        prepareCallback: function(url) {

                        },
                        successCallback: function (url) {
                            // File is finished
                            zip_archive_timeouts[ archive_filename ] = null;
                        },
                        failCallback: function (responseHtml, url, error) {
                            // Something went wrong...
                            zip_archive_timeouts[ archive_filename ] = null;

                            // Convert response to json, and display error message
                            var response = $.parseJSON(responseHtml);
                            createJGrowlError(response);
                        }
                    });
                }
                else {
                    window.setTimeout( "checkZipArchiveProgress('" + archive_filename + "', '" + archive_size + "', '" + form_id + "');", decrypt_check_timeout );
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                zip_archive_timeouts[ archive_filename ] = null;
                // Close modal
                var inst = $('[data-remodal-id=ODRRemodal]').remodal();
                inst.close();
                // Show growl
                var response = $.parseJSON(jqXHR.responseText);
                createJGrowlError(response);
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }
</script>
{% endspaceless %}
