{% spaceless %}
<script>
    var initial_decrypt_check_timeout = 250;
    var decrypt_check_timeout = 1500;
    var encrypt_check_timeout = 1500;

    var pending_file_decryptions = {};
{#
    $(window).unload(function() {
        jQuery.each(pending_file_decryptions, function(file_id, download) {
            if (download != null)
                cancelFileDecryption(download, file_id);
        });
    });
#}
    function handleFileDownload(event, file_id, href, short_form, can_cancel) {
        // Prevent a normal file download
        event.preventDefault();
        // If using ShortResults, this click will trigger a load of the datarecord this file belongs to...prevent that
        if (short_form)
            event.stopImmediatePropagation();

//console.log(pending_file_decryptions);
//console.log(file_decrypt_timeouts);

        // Don't start a new download if one is already in progress
        if ( pending_file_decryptions[file_id] != null || pending_file_decryptions[file_id] != undefined || file_decrypt_timeouts[file_id] != null || file_decrypt_timeouts[file_id] != undefined) {
            //alert('download in progress already');
            return false;
        }

        {#var cancel_button = $("#ODRFileDownload_" + file_id + "_cancel");#}
        var download_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
        var decrypt_progress = $("#ODRFileDecrypt_" + file_id + "_progress");

        var url = '{{ path('odr_file_download_start', {'file_id': 0}) }}';
        url = url.substring(0, (url.length-1));
        url += file_id;

        pending_file_decryptions[ file_id ] = 1;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                // If some sort of error returned from server...
                if (data != undefined && data.r == 1) {
                    pending_file_decryptions[ file_id ] = null;
                    alert( data.d );
                    return;
                }

                var status_code = jqXHR.status;
                if (status_code == 200) {
                    // Hide div for decryption progress
                    $(download_div).css('visibility', 'hidden');
                    $(decrypt_progress).css('width', '0');

                    // File exists and is ready to download
                    window.setTimeout( "downloadFile(" + file_id + ");", initial_decrypt_check_timeout );
//console.log('file already exists');
                }
                else if (status_code == 202) {
                    // Show div for decryption progress
                    $(download_div).css('visibility', 'visible');
                    $(decrypt_progress).css('width', '100%');

                    // File needs to be decrypted first
                    window.setTimeout( "createFileDecryptProgressCheck(" + file_id + ", 1);", initial_decrypt_check_timeout );  // download the file after it finishes decrypting
//console.log('creating initial file decrypt check');
                }
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    function downloadFile(file_id) {

        var href = '{{ path('odr_file_download', {'file_id': 0}) }}';
        href = href.substring(0, (href.length-1));
        href += file_id;

        var download_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
        var decrypt_progress = $("#ODRFileDecrypt_" + file_id + "_progress");

        var download = $.fileDownload(href, {
            prepareCallback: function(url) {
//console.log('prepare for file ' + file_id);
{#
                if (can_cancel) {
                    // Activate the cancel button for this file decryption...
                    $(cancel_button).unbind('click');
                    $(cancel_button).click(function (event) {
                    // If using ShortResults, this click will trigger a load of the datarecord this file belongs to...prevent that
                        if (short_form)
                            event.stopImmediatePropagation();

                        cancelFileDecryption(download, file_id);
                    });
                }
                else {
                    // Not allowed to cancel this decryption, hide the button
                    $(cancel_button).hide();
                }
#}
            },
            successCallback: function (url) {
//console.log('success for file ' + file_id);
                // File is finished
                pending_file_decryptions[ file_id ] = null;
                file_decrypt_timeouts[ file_id ] = null;
{#
                // Download is done, No longer need these
                $(cancel_button).show();
                $(cancel_button).unbind('click');
#}
                $(download_div).css('visibility', 'hidden');
                $(decrypt_progress).css('width', '0');
            },
            failCallback: function (responseHtml, url, error) {
//console.log('fail for file ' + file_id);
                // Something went wrong...
                pending_file_decryptions[ file_id ] = null;
                file_decrypt_timeouts[ file_id ] = null;

                alert(responseHtml);
{#
                // Download is done, No longer need these
                $(cancel_button).show();
                $(cancel_button).unbind('click');
#}
                $(download_div).css('visibility', 'hidden');
                $(decrypt_progress).css('width', '0');
            }
        });
    }
{#
    function cancelFileDecryption(download, file_id) {
//console.log('cancel for file ' + file_id);
        var url = "{{ path('odr_cancel_file_decrypt', {'file_id': 0}) }}";
        url = url.substr(0, url.length-1);
        url += file_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json"
        });

        // This will trigger failCallback for this download
        download.abort();
    }
#}
    var file_decrypt_timeouts = {};
    function createFileDecryptProgressCheck(file_id, download_file_after) {
        // Ensure that at most a single timeout is running for a given file at any given time
        if ( file_decrypt_timeouts[ file_id ] == null || file_decrypt_timeouts[ file_id ] == undefined ) {
            file_decrypt_timeouts[ file_id ] = download_file_after;
            window.setTimeout( "checkFileDecryptProgress(" + file_id + ");", decrypt_check_timeout );
        }
    }

    function checkFileDecryptProgress(file_id) {
        // Get progress of file encryption from server
        var url = "{{ path('odr_get_file_decrypt_progress', {'file_id': 0}) }}";
        url = url.substr(0, url.length-1);
        url += file_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if (data.r == 0) {
                    var current_value = parseFloat(data.d.current_value);   // already a percentage of max_value
                    var max_value = parseFloat(data.d.max_value);

                    var download_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
                    var decrypt_progress = $("#ODRFileDecrypt_" + file_id + "_progress");

                    if ( !$(download_div).is(':visible') ) {
//console.log('stopping timeout cycle for file ' + file_id);
                        /* element got hidden already, do nothing */
                        file_decrypt_timeouts[ file_id ] = null;

                        // Ensure progress bar isn't displayed anymore
                        $(download_div).css('visibility', 'hidden');
                        $(decrypt_progress).css('width', '0');
                    }
                    else if ( file_decrypt_timeouts[ file_id ] != null ) {
//console.log('progress for file ' + file_id + ': ' + current_value + '%');

                        if (current_value < 100) {
                            // Update the progressbar
                            $(download_div).css('visibility', 'visible');
                            $(decrypt_progress).css('width', current_value + '%');

                            // Schedule the next decrypt check
                            window.setTimeout( "checkFileDecryptProgress(" + file_id + ");", decrypt_check_timeout );
                        }
                        else {
                            // Save whether the user needed to download this file after decryption or not
                            var download_file_after = file_decrypt_timeouts[ file_id ];

                            // File is fully decrypted, stop querying server for progress
                            file_decrypt_timeouts[ file_id ] = null;

                            // Hide the css for the progressbar
                            $(download_div).css('visibility', 'hidden');
                            $(decrypt_progress).css('width', 0);

                            if (download_file_after == 1) {
                                // Download the file
                                downloadFile(file_id);
                            }
                        }
                    }

                }
                else {
                    alert( data.d );
                }
            }
        });
    }

    var file_encrypt_timeouts = {};
    function createFileEncryptProgressCheck(file_id, datarecord_id, datafield_id) {
        // Ensure that at most a single timeout is running for a given file at any given time
        if ( file_encrypt_timeouts[ file_id ] == null || file_encrypt_timeouts[ file_id ] == undefined ) {
            file_encrypt_timeouts[ file_id ] = 1;
            window.setTimeout( "checkFileEncryptProgress(" + file_id + ", " + datarecord_id + ", " + datafield_id + ");", encrypt_check_timeout );
        }
    }

    function checkFileEncryptProgress(file_id, datarecord_id, datafield_id) {
        // Get progress of file encryption from server
        var url = "{{ path('odr_get_file_encrypt_progress', {'file_id': 0}) }}";
        url = url.substr(0, url.length-1);
        url += file_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                if (data.r == 0) {
                    var current_value = parseInt(data.d.current_value);   // already a percentage of max_value
                    var max_value = parseInt(data.d.max_value);

                    var file_encrypt_progress_div = $("#ODRFileDecrypt_" + file_id + "_overlay");
                    var file_encrypt_progress_bar = $("#ODRFileDecrypt_" + file_id + "_progress");

                    if (file_encrypt_progress_bar == null || file_encrypt_progress_bar == undefined || file_encrypt_progress_bar[0] == null || file_encrypt_progress_bar[0] == undefined) {
                        /* element no longer exists, do nothing */
                        file_encrypt_timeouts[ file_id ] = null;

                        $(file_encrypt_progress_bar).css('width', 0);
                        $(file_encrypt_progress_div).css('visibility', 'hidden');
                    }
                    else if (current_value == 100) {
                        // Stop checking for progress updates
                        file_encrypt_timeouts[ file_id ] = null;

                        // Hide the css for the progressbar
                        $(file_encrypt_progress_bar).css('width', 0);
                        $(file_encrypt_progress_div).css('visibility', 'hidden');
                    }
                    else if (file_encrypt_timeouts[ file_id ] != null) {
                        // Update the progressbar
                        window.setTimeout( "checkFileEncryptProgress(" + file_id + ", " + datarecord_id + ", " + datafield_id + ");", encrypt_check_timeout );

                        $(file_encrypt_progress_div).css('visibility', 'visible');
                        $(file_encrypt_progress_bar).css('width', current_value + '%');
                    }

                }
                else {
                    alert( data.d );
                }
            }
        });
    }

    var zip_archive_timeouts = {};
    function createZipArchiveProgressCheck(archive_filename, archive_size) {
        // Ensure that at most a single timeout is running for a given zip archive at any given time
        if ( zip_archive_timeouts[ archive_filename ] == null || zip_archive_timeouts[ archive_filename ] == undefined ) {
            zip_archive_timeouts[ archive_filename ] = 1;
            window.setTimeout( "checkZipArchiveProgress('" + archive_filename + "', '" + archive_size + "');", decrypt_check_timeout );
        }
    }

    function checkZipArchiveProgress(archive_filename, archive_size) {
        // Get progress of zip archive from server
        var url = "{{ path('odr_get_zip_archive_progress', {'archive_filename': 0}) }}";
        url = url.substr(0, url.length-1);
        url += archive_filename;

        archive_size = parseInt(archive_size);

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                // If some sort of error returned from server...
                if (data != undefined && data.r == 1) {
                    zip_archive_timeouts[ archive_filename ] = null;
                    alert( data.d );
                    return;
                }

                var archive_filecount = parseInt(data.d.archive_filecount);

                var download_url = "{{ path('odr_download_zip_archive', {'archive_filename': 0}) }}";
                download_url = download_url.substr(0, download_url.length-1);
                download_url += archive_filename;

                if ( archive_size == archive_filecount ) {
                    var download = $.fileDownload(download_url, {
                        prepareCallback: function(url) {

                        },
                        successCallback: function (url) {
                            // File is finished
                            zip_archive_timeouts[ archive_filename ] = null;
                        },
                        failCallback: function (responseHtml, url, error) {
                            // Something went wrong...
                            zip_archive_timeouts[ archive_filename ] = null;

                            alert(responseHtml);
                        }
                    });
                }
                else {
                    window.setTimeout( "checkZipArchiveProgress('" + archive_filename + "', '" + archive_size + "');", decrypt_check_timeout );
                }
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }
</script>
{% endspaceless %}
