{% macro write(logged_in, site_baseurl, odr_wordpress_integrated) %}
<script>
    {# This is intentionally placed outside the $(function() {...} block #}
    {# jquery3 modified how the 'load' event was handled, and firefox wouldn't trigger this reliably #}
    $(window).on('load', function() {
        if ( window.location.hash !== '') {
            // window.location.hash doesn't preserve url encoding...
            var tmp = window.location.href.split('#');
            var url = tmp[1];
            // console.log( 'window.onload: LoadContentFullAjax("' + url + '")' );
            LoadContentFullAjax( url );
        }
{% if logged_in == true %}
        else {
            if ( window.location.href.split("/").reverse()[0] === 'admin' ) {
                // User attempted to visit something like  odr.io/admin  ...redirect to database list
                // console.log( 'window.onload: LoadContentFullAjax("<<dashboard>>")' );
                UpdateURL('{{ path('odr_list_types', {'section': 'databases'}) }}');
            }
            else {
                /* do nothing, which will allow the search system to perform the automatic search */
            }
        }
{% endif %}
    });

    $(function() {
        // Define a global error handler for ajax calls
        // TODO - jquery 1.12 seems to be autoparsing every json response, and therefore throws ajax errors whenever ODR returns an empty response body
        $(document).ajaxError(function( event, jqxhr, settings, exception ) {
            switch( jqxhr.status ) {
                case 401:
                    ODRLogin();
                    break;

                default:    /* 400, 403, 404, 405, 500, etc */
                    if ( jqxhr.responseText !== undefined ) {
                        var response = $.parseJSON(jqxhr.responseText);
                        createJGrowlError(response);
                    }
                    break;
            }
        });

        // Custom AJAX history stuff
        $(window).off("hashchange");
        $(window).on("hashchange", function(event) {
            // Needed, unfortunately...
            event.preventDefault();

            // Close Menu
            $("#ODRNav").hide();
            $(".overhang").remove();

            // If the hashchange event is manually triggered, event.originalEvent won't be defined...
            var url = '';
            if ( event.originalEvent !== undefined && event.originalEvent.newURL !== undefined ) {
                // Grab the URL from the hashchange event
                var new_url = event.originalEvent.newURL.split('#');
                url = new_url[1];
                if ( url !== undefined ) {
                    // Load the URL as usual
                    // console.log( 'window.hashchange: LoadContentFullAjax("' + url + '")' );
                    LoadContentFullAjax( url );
                }
                else {
                    // Attempt to move back/forward to the homepage...just refresh
                    {#location.replace("{{ path('odr_admin_homepage') }}");#}
                    // console.log( 'window.hashchange: location.replace("' + new_url[0] + '")' );
                    location.replace( new_url[0] );
                }
            }
            else {
                // Grab the URL from the browser and reload it
                url = window.location.hash.substr(1);
                if ( url !== '' ) {
                    // Load the URL as usual
                    // console.log( 'window.hashchange (event undefined): LoadContentFullAjax("' + url + '")' );
                    LoadContentFullAjax( url );
                }
                else {
                    // Attempt to move back/forward to the homepage...just refresh
                    // console.log( 'window.hashchange (event undefined): location.replace("<<dashboard>>")' );
                    location.replace("{{ path('odr_admin_homepage') }}");
                }
            }

            // Locate the <a> element that spawned this event
            $("a.address").each(function() {
                if ( $(this).attr('href') !== undefined ) {
                    var attr_url = $(this).attr('href').substr(1);
                    if ( attr_url == url ) {
                        // Failsafe incase title attribute doesn't exist
                        if ( $(this).attr('title') !== undefined )
                            document.title = $(this).attr('title');
                        else
                            document.title = 'ODR Admin';

                        // Abort loop
                        return false;
                    }
                }
            });
        });

        $("a.address").off("click");
        $("a.address").on("click", function(event) {
            // Needed?
            event.preventDefault();

            // Grab the URL
            var data = $(event.delegateTarget).attr("href").split('/');
            var url = data.join('/');
            url = url.replace('#', '');

            // Update the URL and hash
            // console.log( 'a.address: UpdateUrl("' + url + '")' );
            UpdateURL(url);
        });

        $("#ODRSearchSidebar").on("click", ".ODRSearchToggle", function() {
            searchToggle();

            // If there are any interactive graphs on the page, get plotly to resize them
            if ( typeof page_plots !== 'undefined' ) {
                waitForFinalEvent(function() {
                    for(var x in page_plots) {
                        Plotly.Plots.resize(page_plots[x]);
                    }
                }, 500, "plotly_window_resize")
            }
        });

        // Start with Search Hidden...
        searchToggle();

        {% if logged_in == true %}
        updateDashboardLink();
        {% endif %}
    });

    /**
     * Updates the href property of the Dashboard "button" to point to the correct landing page.
     */
    function updateDashboardLink() {
        // Don't run when nothing to update
        if ( $('#ODRDatabaseLanding').length === 0 )
            return;

        // Extract unique id
        var current_url = window.location.href;
        var url_data = current_url.split('#');
        var url_bits = url_data[0].split('/');

        // Unique ID is the last bit
        var unique_id = url_bits[(url_bits.length - 1)];
        // There won't be anything to find in this case
        if (unique_id === 'admin') {
            $('#ODRDatabaseLanding').children('a').first().prop("href", "{{ path('odr_admin_homepage') }}");
            return;
        }

        // NOTE - despite being named as unique_ids, this also works with search slugs
        var url = '{{ path('odr_datatype_find_landing', { 'datatype_unique_id': 0 }) }}';
        url = url.substring(0, (url.length - 1));
        url += unique_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                // Get new URL and replace
                $('#ODRDatabaseLanding').children('a').first().prop("href", data.d);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
                console.log(errorThrown);
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Creates a notification popup from the given error response.
     *
     * @param {object} response
     */
    function createJGrowlError(response) {
        var error_text = '<div class="ODRNotificationHeader">' + response.error.code + ' ' + response.error.status_text + ' -- ' + response.error.exception_source + "</div>";
        error_text += '<div class="ODRNotificationText">' + response.error.message + '</div>';

        $.jGrowl(
            error_text,
            {
                theme: "ODRNotification",
                sticky: true,
                openDuration: 250,
                closeDuration: 250
            }
        );
    }

    /**
     * Creates a popup for notifying of saved changes.
     */
    function notifySaved() {
        $.jGrowl('SAVED');
    }

    /**
     * Redirects an anonymous user to ODR's login page.
     */
    {% if odr_wordpress_integrated %}
    function ODRLogin() {
        let current_page = window.location.href
        window.location.href = '/wp-login.php?redirect_to=' + current_page;
    }
    {% else %}
    function ODRLogin() {
        // Extract the current base url
        var baseurl = window.location.href;
        var fragment = '';
        if ( baseurl.indexOf('#') !== -1 ) {
            var pieces = baseurl.split('#');
            baseurl = pieces[0];
            fragment = pieces[1];
        }

        // Save the "app_dev.php" part of the url if needed
        var redirect_url = '/app_dev.php';
        if ( baseurl.indexOf('app_dev.php') === -1 )
            redirect_url = '/login';
        else
            redirect_url += '/login';

        redirect_url = '{{ site_baseurl }}{{ path('fos_user_security_login') }}';
        // alert(redirect_url);

        // Append the fragment if it exists
        if (fragment !== '')
            redirect_url += '#' + fragment;

        // Redirect to the login page after saving the base url
        $.ajax({
            cache: false,
            type: 'GET',
            url: '{{ path('odr_save_url') }}',
            dataType: 'json',
            data: {'url': baseurl},
            success: function(data, textStatus, jqXHR) {
                window.location.href = redirect_url;
            }
        });
    }
    {% endif %}

    /**
     * Forces a complete AJAX reload of the current page.
     */
    function reloadPage() {
        // TODO - should check if URL has hash value...
        var url = window.location.hash.substr(1);
        LoadContentFullAjax( url );
    }

    /**
     * Updates the URL hash so ODR loads content to insert into the page.
     * i.e  going from https://odr.io/admin to https://odr.io/admin#/admin/type/list/databases
     *
     * @param {string} url
     */
    function UpdateURL(url) {
        // Update the URL and hash
        var current_hash = window.location.hash.substr(1);
        if ( current_hash !== url ) {
            // Just change the hash to the desired link
            // console.log( 'UpdateUrl("' + url + '")' );
            window.location.hash = url;
        }
        else {
            // Force a hashchange event because we want the AJAX to fire again
            // console.log( 'UpdateUrl(): forced hashchange' );
            $(window).hashchange();
        }
    }

    var xhr = null;
    var timer = null;

    /**
     * Replaces all content on the page based off the given url.
     * i.e.  going from https://odr.io/admin to https://odr.io/chemin
     *
     * @param {string} url
     * @param {boolean} [use_fade]
     */
    function LoadContentFullAjax(url, use_fade) {
        if (timer)
            window.clearTimeout(timer);

        // Default use_fade to 1
        if (use_fade === undefined)
            use_fade = true;

        // TODO Determine if this HACK is needed
        // Delete the DataTables fixed headers and bindings.
 	    jQuery(window).unbind('scroll');
 	    jQuery('.fixedHeader-floating').remove();

        var faded_opacity = 0.15;
        if (!use_fade)
            faded_opacity = 1;

        // console.log( 'LoadContentFullAjax("' + url + '")' );

        // Disable scroll handlers
        $(window).off('scroll');
        $("#ODRSearchContent").fadeTo(200, faded_opacity, function() {
            // Abort any LoadContentFullAjax() call that's currently in progress
            if (xhr != null)
                xhr.abort();

            // Append the tab's id to the get request if it exists
            var data = '';
            if ( window.sessionStorage.getItem('odr_tab_id') )
                data = {'odr_tab_id': window.sessionStorage.getItem('odr_tab_id')};

            // Load to Content area
            xhr = $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                data: data,
                success: function(data, textStatus, jqXHR) {
                    xhr = null;

                    if ( data.r == 2 ) {   // for redirects to another url
                        UpdateURL( data.d.url );
                    }
                    else {
                        $("#ODRSearchContent").html(data.d.html).fadeTo(200, 1.0);
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                    }
                }
            });
        });
    }

    /**
     * Hides the search sidebar so that users can't see or expand it.
     */
    function disableSearchSidebar() {
        $("#ODRSearchContent").addClass("ODRSearchResultsWide");
        $("#ODRSearchSidebar").addClass("ODRHidden");
    }

    /**
     * Ensures the search sidebar is available and that it's displaying the search layout for the
     * given search key.
     *
     * @param {string} [search_key]
     * @param {boolean} [force_visible]
     * @param {string} [intent]
     */
    function enableSearchSidebar(search_key, force_visible, intent) {
        if (force_visible === undefined || force_visible === null)
            force_visible = false;
        // Ensure the sidebar is up to date first...
        if (intent === undefined || intent === null)
            intent = 'searching';

        updateSearchSidebar(search_key, force_visible, intent);
    }

    /**
     * Reloads and reinitializes the content of the search sidebar.
     *
     * @param {string} [search_key]
     * @param {boolean} [force_visible]
     * @param {string} [intent]
     */
    function updateSearchSidebar(search_key, force_visible, intent) {
        var force_rebuild = false;
        if ( $("#ODRSidebarSearchKey").val() !== search_key || $("#ODRSearchSidebar").html() === '' )
            force_rebuild = true;

        if ( search_key !== '' && search_key !== undefined && $("#ODRSidebarSearchKey").val() !== search_key ) {
            var url = '{{ path('odr_reload_search_sidebar', {'force_rebuild': 0, 'search_key': '', 'intent': ''}) }}';
            url = url.substr(0, url.length - 3);

            if ( force_rebuild ) {
                // TODO - this doesn't solve the problem of not having the search javascript...
                 url += '1/';
            }
            else {
                url += '0/';
            }

            url += search_key + '/' + intent;

            $.ajax({
                type: 'GET',
                url: url,
                dataType: 'json',
                success: function (data) {
                    if ( data.d.html !== '' ) {
                        $("#ODRSearchSidebar").html(data.d.html);
                        InitSearchSidebar();

                        if ( data.d.num_params <= 1 ) {
                            // Close all accordions, then re-open the first one (target datatype)
                            $(".ODRAdvSearch_header").trigger('click');
                            $(".ODRAdvSearch_default").prev().trigger('click');
                            // Default to not-advanced search
                            $(".ODRAdvSearch_header").parent().hide();
                        }
                        else {
                            // Close all accordions...those with search params will remain partially open
                            $(".ODRAdvSearch_header").trigger('click');
                            // Hide the advanced search div...
                            $(".ODRAdvSearch_header").parent().hide();
                            // ...then switch back to advanced search
                            changeSearch();
                        }
                    }

                    // Need to this to execute after the sidebar gets initialized
                    console.log('SEARCH TOGGLE 1')
                    searchToggle(force_visible);
                }
            });
        }
        else {
            // Don't need to initialize the sidebar, so execute this instead
            console.log('SEARCH TOGGLE 2')
            // searchToggle(force_visible);
        }
    }

    /**
     * Toggles the search sidebar between "visible" and "expanded".
     */
    function searchToggle(force_visible) {
        if (force_visible === undefined || force_visible === null)
            force_visible = false;

        var sidebar = $("#ODRSearchSidebar");
        var searchToggle = $(".ODRSearchToggle");
        var searchContent = $("#ODRSearchContent");

        if (force_visible || $(sidebar).hasClass('ODRSearchHidden')) {
            // Open the search sidebar
            $(sidebar).removeClass("ODRSearchHidden").addClass("ODRSearchVisible");
            $(searchContent).removeClass("ODRSearchResultsWide");

            $(searchToggle).find(".fa-arrow-circle-left").addClass('hidden');
            $(searchToggle).find(".fa-arrow-circle-right").addClass('hidden');
            $(searchToggle).find(".fa-arrow-circle-left").removeClass('hidden');
        }
        else {
            // This hides the search sidebar
            $(sidebar).removeClass("ODRSearchVisible").addClass("ODRSearchHidden");
            $(searchContent).addClass("ODRSearchResultsWide");

            $(searchToggle).find(".fa-arrow-circle-right").addClass('hidden');
            $(searchToggle).find(".fa-arrow-circle-left").addClass('hidden');
            $(searchToggle).find(".fa-arrow-circle-right").removeClass('hidden');
        }

        // Adding/removing the class .ODRSearchResultsWide triggers a 0.25s transition
        // Have to wait for that to finish before recalculating the width of datatables objects
        setTimeout("recalcDatatablesWidths()", 100);
    }

    /**
     * If the current page's content includes a dataTables.js instance (i.e. search result lists),
     * then expanding/shrinking the search sidebar requires that instance to redraw itself so it
     * will take up the correct amount of the page width.
     */
    function recalcDatatablesWidths() {
        // Force the datatables.js FixedHeader and Responsive plugins to redraw if they exist
        var datatables_instances = $(".ODRDatatableInstance");
        if ( datatables_instances.length > 0 ) {
            // Could be more than one table on screen...
            $.each(datatables_instances, function(index, elem) {
                // The table also may not be initialized yet...
                if ( $.fn.DataTable.isDataTable(elem) ) {
                    // ...but if it is, redo the Responsive and FixedHeader calculations
                    $(elem).DataTable().responsive.recalc();
                    $(elem).DataTable().fixedHeader.adjust();
                }
            });
        }
    }

    /**
     * Displays an overlay on the page so the user can't click anything while searches are running.
     *
     * @param {string} [intent]
     */
    function showSearchOverlay(intent) {
        $("#loading-overlay").fadeIn('fast');
        $("#loading").html('<span>Searching...</span>');
        $("#loading").fadeIn('fast');

        if (intent === undefined || intent === null)
            intent = 'searching';

        if ( intent === 'searching' )
            $("#ODRSearchContent").html('');
    }

    /**
     * Hides the search overlay.
     */
    function hideSearchOverlay() {
        $("#loading-overlay").fadeOut('fast');
        $("#loading").html('<span>Loading...</span>');
        $("#loading").fadeOut('fast');
    }

    function setupAccordionHighlights() {
         $("#odr_content > #ODRSearchContent > .ODRFormWrap > .ODRDataType > .ODRAccordionWrapper > .ODRFieldArea > .ODRThemeElement > .ODRInnerBox > .ODRChildDatatype > .ODRDataType > .ODRAccordionWrapper > h3")
            .alternateNestedBgColor(".ODRThemeElement > .ODRInnerBox > .ODRChildDatatype > .ODRDataType > .ODRAccordionWrapper > h3", ['ODRAccordionPrimary', 'ODRAccordionSecondary']);
        // console.log('accordion highlight')
    }

    /**
     * Attaches click handlers to the accordion, tabbed, and dropdown header display_types.
     */
    function setupAccordions() {
        // Setup click handlers for Accordions
        $(".ODRFormAccordion").children("h3").each(function() {
            $(this).unbind('click').click(function() {
                // When a header is clicked, hide each of the content divs
                $(this).parent().children(".accordion-content").each(function() {
                    if ( !$(this).is(":hidden") ) {
                        $(this).hide();
                        // console.log( '.ODRFormAccordion: hiding', $(this) );
                    }
                    $(this).prev().removeClass('ODRAccordionSelected');
                });

                // After that, show the selected content div
                $(this).next().fadeIn();
                {# ODR_scrollIntoView( $(this).next() ); #}
                $(this).addClass('ODRAccordionSelected');

                setupAccordionHighlights();
                // Resize any elements that were revealed
                onWindowResize();
            });
        });

        // Setup Accordion
        $(".ODRChildDatatype").each(function() {
            var prev_selection = false;
            // console.log( 'child_datatype_id ' + $(this).attr('id') );

            // ...hide all but the first accordion entries
            $(this).children().children(".ODRFormAccordion").children("h3").each(function() {
                if ( !$(this).hasClass("ODRAccordionSelected") ) {
                    // Ensure that all child/linked records are hidden, unless user has already
                    //  selected one of them
                    $(this).next().hide();
                    // console.log( '.ODRChildDatatype: hiding ', $(this).next() );
                }
                else {
                    // User already selected a child/linked record for this child/linked datatype
                    prev_selection = true;
                }
            });

            // If the user hadn't selected a child/linked record for this child/linked datatype...
            if ( !prev_selection ) {
                // ...then hide all the child/linked records except the first
                $(this).children().children(".ODRFormAccordion").children("h3").each(function(index,elem) {
                    if ( index === 0 ) {
                        // console.log('showing: ', $(elem).next());
                        $(elem).next().show();
                    }
                    else {
                        // console.log('hiding: ', $(elem).next());
                        $(elem).next().hide();
                    }
                });
            }
        });

        // Setup Tabs
        $(".ODRTabAccordion").each(function() {
            // Tabs are stored a level below the tab accordion
            var wrapper_div = $(this);
            var tab_div = $(wrapper_div).children(".ODRTabButtonHeader").first();  // should only be one tab div here

            // Need to check whether a tab was already selected...
            var prev_selection = false;

            // Ensure click handlers are attached to all the buttons in this tab div
            $(tab_div).children(".ODRTabButton").each(function() {
                // If this button already has this class, then it was selected previously somehow
                if ( $(this).hasClass('pure-button-active') )
                    prev_selection = true;

                $(this).unbind('click').click(function() {
                    // Ensure the button that just got clicked is marked as "active", while all the
                    //  other buttons are not
                    $(tab_div).children(".ODRTabButton").removeClass('pure-button-active');
                    $(this).addClass('pure-button-active');

                    // Store which content div should be selected
                    var selected_dr = "FieldArea_" + $(this).attr('rel');

                    // Hide all the content divs except the one that was selected
                    $(wrapper_div).children(".accordion-content").each(function() {
                        if ( $(this).attr('id') !== selected_dr ) {
                            $(this).hide();
                            // console.log( '.ODRTabAccordion button: hiding ', $(this) );
                        }
                        else {
                            $(this).show();
                            // console.log( '.ODRTabAccordion button: showing ', $(this) );
                        }
                    });

                    // Resize any elements that were revealed
                    setupAccordionHighlights();
                    onWindowResize();
                });
            });

            // If a tab hasn't already been selected...
            if (!prev_selection) {
                // ...ensure the first tab is marked as "active"...
                $(tab_div).children(".ODRTabButton").first().addClass('pure-button-active');

                // ...and the first content div is the only one visible
                $(wrapper_div).children(".accordion-content").each(function() {
                    $(this).hide();
                    // console.log( '.ODRTabAccordion: hiding ', $(this) );
                });
                $(wrapper_div).children(".accordion-content").first().show();
            }
        });

        // Setup Dropdown
        $(".ODRDropdownAccordion").each(function() {
            // console.log('in .ODRDropdownAccordion for ' + $(this).parent().attr('id') );

            // Hide all content divs except the first
            var wrapper_div = $(this);
            $(wrapper_div).children(".accordion-content").each(function(index,elem) {
                if ( index > 0 ) {
                    $(elem).hide();
                    // console.log( '.ODRDropdownAccordion: hiding child ' + index, $(elem) );
                }
                else {
                    $(elem).show();
                    // console.log( '.ODRDropdownAccordion: showing child ' + index, $(elem) );
                }
            });

            // Attach the click handler to this dropdown
            var select = $(wrapper_div).children('h3').children("span.AccordionSelect").children('select');
            $(select).unbind('change').change(function() {
                // Store which content div should be selected
                var selected_dr = "FieldArea_" + $(this).val();

                // Hide all the content divs except the one that was selected
                $(wrapper_div).children(".accordion-content").each(function() {
                    if ( $(this).attr('id') !== selected_dr ) {
                        $(this).hide();
                        // console.log( '.ODRDropdownAccordion select: hiding ', $(this) );
                    }
                    else {
                        $(this).show();
                        // console.log( '.ODRDropdownAccordion select: showing ', $(this) );
                    }
                });

                // Resize any elements that were revealed
                setupAccordionHighlights();
                onWindowResize();
            });
        });
    }

    var WindowResizeInterval = "";

    /**
     * Forces textarea elements to display all their contents.
     */
    function onWindowResize() {
        // Clear the interval so these resizes only happen once
        if (WindowResizeInterval != "")
            WindowResizeInterval = window.clearInterval(WindowResizeInterval);

        // Resize all textarea elements
        $("textarea").not(":hidden").each(function() {
            var el = $(this);

            // Remove any pre-existing height/width from the textarea
            $(el).removeAttr('style');

            // Set the height of the textarea so all its content is visible
            var scrollHeight = $(el).prop('scrollHeight') + 1;
            $(el).height(scrollHeight);
        });
    }

    /**
     * Initializes the click handlers used for ODR's image gallery.
     */
    function setupImageGalleries() {
        // Set up image galleries
        $(".ODRImageGallery").not(".ODRImageGallery_ready").each(function() {
            var id_data = $(this).attr('id').split(/_/);
            var datafield_id = id_data[1];
            var datarecord_id = id_data[2];

            var count = 0;
            var images_per_row = parseInt( $("#imagestorage_" + datafield_id + "_" + datarecord_id).attr('rel') );

//            var width = $("#imagegallery_" + datafield_id + "_" + datarecord_id).find(".ODRImageGalleryImage").width();
//            var height = width * 0.75;
//            $("#imagegallery_" + datafield_id + "_" + datarecord_id).find(".ODRImageGalleryImage").css('width', width);
//            $("#imagegallery_" + datafield_id + "_" + datarecord_id).find(".ODRImageGalleryImage").css('height', height);

            $("#imagestorage_" + datafield_id + "_" + datarecord_id).children(".ODRImage").each(function() {
//                $(this).find("img").css('max-width', width);
//                $(this).find("img").css('max-height', height);

                if ( count < images_per_row ) {
                    $(this).remove().appendTo($("#imagegallery_" + datafield_id + "_" + datarecord_id).find(".ODRImageGalleryImage"));
                }
                count++;
            });

            if (count <= images_per_row) {
                $("#ODRImageLeft_" + datafield_id + "_" + datarecord_id).hide();
                $("#ODRImageRight_" + datafield_id + "_" + datarecord_id).hide();

                if (count == 0)
                    $(this).html('<center><strong>No Images Found</strong></center>');
            }

            $(this).addClass("ODRImageGallery_ready");
        });

        $(".ODRGalleryLeftArrow").unbind('click').click(function(event) {
            // Stop other click events from firing when this is clicked
            event.stopImmediatePropagation();

            var id_data = $(this).attr('rel');
            var gallery = "#imagegallery_" + id_data + " .ODRImageGalleryImage";
            var storage = "#imagestorage_" + id_data;

            $(gallery).children(".ODRImage").first().remove().prependTo(storage);
            $(storage).children(".ODRImage").last().remove().appendTo(gallery);
        });

        $(".ODRGalleryRightArrow").unbind('click').click(function(event) {
            // Stop other click events from firing when this is clicked
            event.stopImmediatePropagation();

            var id_data = $(this).attr('rel');
            var gallery = "#imagegallery_" + id_data + " .ODRImageGalleryImage";
            var storage = "#imagestorage_" + id_data;

            $(gallery).children(".ODRImage").last().remove().appendTo(storage);
            $(storage).children(".ODRImage").first().remove().prependTo(gallery);
        });

        // Need this for reloading attempts on images which aren't decrypted
        $("div.ODRImage").find("img").on('error', function() {
            setupDecryptWait( $(this) );
        });
    }

    /**
     * Initializes the click handlers used for ODR's tag datafields.
     * @param {HTMLElement} context
     * @param {number} states
     */
    function setupTagTree(context = null, states = 2) {
        if ( context === null )
            context = $("#odr_content");

        {# TODO - modify so this uses event bubbling instead? #}
        $(context).find(".ODRTagParent").unbind('click').click(function(event) {
            event.stopImmediatePropagation();

            // The Tag Design modal needs to be able to prevent collapsing/expanding
            var tag_item = $(this).parents(".ODRTagItem").first();
            if ( $(tag_item).find(".ODRTagHighlight").length > 0 )
                return false;

            // This div is guaranteed to be a sibling of the div that holds child tags, but there's
            //  an uknown number of other HTML elements "in the way"...
            var tag_children_div = $(tag_item).children('.ODRTagGroup').first();
            var icon_div = $(this).children(".fa").first();

            if ( states === 2 ) {
                if ( $(this).hasClass('ODRTagCollapsed') ) {
                    $(tag_children_div).show();
                    $(icon_div).removeClass("fa-caret-right").addClass("fa-caret-down");
                }
                else {
                    $(tag_children_div).hide();
                    $(icon_div).removeClass("fa-caret-down").addClass("fa-caret-right");
                }

                $(this).toggleClass('ODRTagCollapsed');
            }
            else if ( states === 3 ) {
                if ( $(this).hasClass('ODRTagCollapsed') && $(this).parent().hasClass('ODRTagSelected') ) {
                    // This tag is currently collapsed, and has selected children...go from collapsed
                    //  to only partially collapsed
                    $(tag_children_div).show();
                    $(tag_children_div).children('li.ODRTagItem').not('.ODRTagSelected').hide();

                    $(icon_div).removeClass("fa-caret-right").addClass("fa-ellipsis-h");

                    $(this).removeClass('ODRTagCollapsed').addClass('ODRTagPartialCollapsed');
                }
                else if ( $(this).hasClass('ODRTagCollapsed') && !$(this).parent().hasClass('ODRTagSelected') ) {
                    // This tag is currently collapsed, but has no selected children...there's no
                    //  point going to partially collapsed, since nothing will change, so instead
                    //  show everything
                    $(tag_children_div).show();
                    $(tag_children_div).children('li.ODRTagItem').show();
                    $(icon_div).removeClass("fa-caret-right").addClass("fa-caret-down");

                    $(this).removeClass('ODRTagCollapsed');
                }
                else if ( $(this).hasClass('ODRTagPartialCollapsed') ) {
                    // This tag is partially collapsed...go to showing everything
                    $(tag_children_div).children('li.ODRTagItem').show();
                    $(icon_div).removeClass("fa-ellipsis-h").addClass("fa-caret-down");

                    $(this).removeClass('ODRTagPartialCollapsed');
                }
                else {
                    // This tag is showing everything...go back to completely collapsed
                    $(tag_children_div).hide();
                    $(icon_div).removeClass("fa-caret-down").addClass("fa-caret-right");

                    $(this).addClass('ODRTagCollapsed');
                }
            }
        });
    }

    /**
     * Resizes the currently open modal.
     *
     * @param {boolean} ignore_content_height if true, modal attempts to take up the entire window regardless of content size
     *
     * @returns {number}
     */
    function resetRemodalInnerHeight(ignore_content_height = false) {
        var modal = $("#ODRRemodal");
        var modal_inner = modal.find(".ODRRemodalInner");
        var modal_inner_content = modal.find(".ODRRemodalInnerContent");

        // Get Scroll height of inner, plus some extra for the scrollbars
        var content_height = modal_inner_content.prop('scrollHeight') + 50;
        // console.log('content_height: ' + content_height);

        var modal_height =  $(window).height()
            - modal.find(".ODRRemodalButtons").height()
            - modal.find(".ODRRemodalTitle").height();

        if ( $(window).width() >= 568 )
            modal_height -= 30;
        // console.log('modal_height: ' + modal_height);

        // Just show content if smaller than window height
        if (!ignore_content_height && content_height < modal_height)
            modal_height = content_height;
        // console.log('adjusted_height: ' + modal_height);

        // Ensure it looks okay
        modal_height -= 40;
        if (modal_height < 200)
            modal_height = 200;
        // console.log('final_height: ' + modal_height);

        modal_inner.animate(
            {height: modal_height},
            {
                duration: 400,
                easing: "swing"
            }
        );

        return modal_height;
    }

    {# This is apparently only used in ODROpenRepositoryGraphBundle:Base:Graph/graph.html.twig #}
    var waitForFinalEvent = (function () {
        var timers = {};
        return function (callback, ms, uniqueId) {
            if (!uniqueId) {
                uniqueId = "Don't call this twice without a uniqueId";
            }
            if (timers[uniqueId]) {
                clearTimeout (timers[uniqueId]);
            }
            timers[uniqueId] = setTimeout(callback, ms);
        };
    })();

    $.fn.alternateNestedBgColor = function(subselect, colors) {
        var l = colors.length;

        // Itterate over all element in possible array
        // jQuery best practice to handle initializing multiple elements at once
        return this.each(function() {
            var $sub = $(this), i = 0;

            // Executes code, at least once
            do {
                // Set bg color for current $sub element
                $sub.addClass(colors[i++ % l]);
                // console.log($sub.next().attr('id'))
                // Set $sub to direct children matching given selector
                $sub = $sub.next().find(subselect);
                // console.log('Found subs: ', $sub.length);

                // Will repeat the do section if the condition returns true
                // console.log('Repeat sub: ', i)
            } while ($sub.length > 0);
        });
    };

    /**
     * Scrolls to the given element on the page, if possible.
     *
     * @param {HTMLElement} element
     * @param {HTMLElement} [container]
     */
    function ScrollHighlight(element, container) {
        var obj = $(element);
        if (container === undefined) {
            container = $('html, body');

            // Only Scroll to element if it is not visible
            if ( !obj.isInViewport() ) {
                container.animate({
                    scrollTop: obj.offset().top + obj.height() - 50
                }, 1000)
            }
        }
        else {
            container.animate({
                scrollTop: obj.prop('offsetTop')
            }, 1000)
        }
        // Highlight after scrolling
        obj.effect("highlight", {}, 3000);
    }

    $.fn.isInViewport = function() {
        var elementTop = $(this).offset().top;
        var elementBottom = elementTop + $(this).outerHeight();

        var viewportTop = $(window).scrollTop();
        var viewportBottom = viewportTop + $(window).height();

        return (elementBottom > viewportTop) && (elementTop < viewportBottom);
    };

    $.fn.isOverflowHiddenY = function(container) {
        var element = $(this);
        // console.log(element.offset());
        // console.log(container.prop('scrollHeight'));
        // console.log(container.height());
        return (element.offset().top > container.height());
    };

    /**
     * Scrolls to and displays the requested datarecord.
     *
     * @param {string|number} datarecord_id
     */
    function selectRecordFieldArea(datarecord_id) {
        // console.log('attempting to focus on datarecord: ' + datarecord_id);

        var field_area = $("#FieldArea_" + datarecord_id);

        if ( field_area.parent().hasClass("ODRFormAccordion") ) {
            // Accordion displayType
            field_area.prev().click();
        }
        else if (field_area.parent().hasClass("ODRTabAccordion")) {
            // Tab displayType
            field_area.parent().children(".ODRTabButtonHeader").find(".ODRTabButton").each(function() {
                if ($(this).attr('rel').toString() === datarecord_id.toString()) {
                    $(this).click();
                }
            });
        }
        else if ( field_area.parent().hasClass("ODRDropdownAccordion") ) {
            // Dropdown displayType
            field_area.parent().children(".ui-accordion-header").children(".ODRSelectWrap").find(".ODRSelect").val(datarecord_id).change();
        }
        else {
            // List displayType
            ScrollHighlight( $(field_area) );
        }
    }

    /**
     * Sets up the timing/timeout for use when a decrypted version of an image doesn't exist.
     *
     * @param {HTMLElement} elem
     */
    function setupDecryptWait(elem) {
        var parent = $(elem).closest('div');
        var img_id = $(parent).attr('rel');

        if ( !missing_images.hasOwnProperty(img_id) ) {
            missing_images[img_id] = 1;

            // Hopefully there aren't too many images that need decrypting, so try the first reload
            //  relatively quickly...
            setTimeout( 'waitForDecrypt("' + $(parent).attr('id') + '")', 500 );
        }
        else if ( missing_images[img_id] < 10 ) {
            missing_images[img_id]++;

            // If the first reload didn't work, then try again after a delay
            // NOTE: it seems as if the browser doesn't follow the timing "to the letter"...setting
            //  this to a short delay doesn't actually mean the timeout will load faster
            setTimeout( 'waitForDecrypt("' + $(parent).attr('id') + '")', 2000 );
            // NOTE: decryption is also fairly slow, so hammering the requests won't help
        }
    }

    /**
     * Triggers a reload of a (hopefully no longer) missing decrypted image that pheanstalk has
     * (hopefully) already been ordered to rebuild.
     *
     * @param {string} image_id
     */
    function waitForDecrypt(image_id) {
        var image_elem = $("#" + image_id).find('img');
        var old_src = $(image_elem).attr('src');
        // console.log( 'old_src: ', old_src );

        var new_src = '';
        if ( old_src.indexOf('#') === -1 )
            new_src = old_src + '#' + new Date().getTime();
        else
            new_src = old_src.substring(0, old_src.indexOf('#') ) + '#' + new Date().getTime();
        // console.log( 'new_src: ', new_src );

        $(image_elem).attr( 'src', new_src );
    }

</script>

{% include 'ODRAdminBundle:Default:file_handling.html.twig' %}
{% include 'ODRAdminBundle:Flow:flow_common.html.twig' %}

{% endmacro %}
