{% spaceless %}

<!-- ODR Modal Dialog -->
<div class="ODRRemodal" data-remodal-id="ODRRemodal" id="ODRRemodal">
    <h3 class="ODRRemodalTitle"></h3>
    <button data-remodal-action="close" class="remodal-close" onclick="closeODRRemodal();"></button>
    <div class="ODRRemodalInner form_contents pure-u-1">
        <div class="ODRRemodalInnerContent">
            <div class="ODRRemodalLoading pure-u-1 ODRHidden">
                <div class="loading-container">
                    <div class="loading"></div>
                    <div class="loading-text">Loading...</div>
                </div>
            </div>
            <div class="ODRRemodalBody ODRHidden"></div>
        </div>
    </div>
    <div class="ODRRemodalButtons ODRHidden"></div>
</div>
<!-- End ODR Modal Dialog -->

<script>

    /**
     * Shows the loading blurb of the remodal and hides the body instead
     */
    function showODRRemodalLoading() {
        var modal = $('[data-remodal-id=ODRRemodal]');
        modal.find(".ODRRemodalBody").addClass('ODRHidden');
        modal.find(".ODRRemodalLoading").removeClass('ODRHidden');
    }

    /**
     * Hides the loading blurb of the remodal and shows the body instead
     */
    function hideODRRemodalLoading() {
        var modal = $('[data-remodal-id=ODRRemodal]');
        modal.find(".ODRRemodalLoading").addClass('ODRHidden');
        modal.find(".ODRRemodalBody").removeClass('ODRHidden');
    }

    /**
     * Changes the modal dialog's "loading" message text to something else.
     *
     * @param {string} message
     */
    function setODRRemodalLoadingText(message) {
        var loading_text = $(".ODRRemodalLoading").find(".loading-text");
        loading_text.html(message);
    }

    /**
     * Resets the modal dialog's "loading" message text back to the default.
     */
    function resetODRRemodalLoadingText() {
        var loading_text = $(".ODRRemodalLoading").find(".loading-text");
        loading_text.html("Loading...");
    }

    /**
     * Closes the current modal.
     */
    function closeODRRemodal() {
        var inst = $('[data-remodal-id=ODRRemodal]').remodal();

        var state = inst.getState();
        if (state === 'opened') {
            inst.close();
        }
        else if (state === 'opening') {
            // Apparently calling the close() function on a remodal that is still "opening" won't
            //  actually do anything...so give it a moment to fully open
            setTimeout(closeODRRemodal, 100);
        }
    }

    /**
     * Changes the loading message in the modal's body.
     *
     * @param {string} message
     * @param {string} [message_type]
     */
    function setModalMessage(message, message_type = '') {
        var modal_body = $(".ODRRemodalBody");
        if (message_type === undefined) {
            modal_body.html(
                '<h4>' + message + '<h4>'
            );
        }
        else if (message_type === "raw") {
            modal_body.html( message );
        }
        modal_body.removeClass('ODRHidden');
        resetRemodalInnerHeight();
    }

    /**
     * @typedef {Object} odr_remodal_options
     * @type {object}
     * @property {string} title - The title for the remodal
     * @property {string} [body] - The body for the remodal.  If not provided, then displays the 'loading' blurb
     * @property {boolean} [loading] - If true, then forces the 'loading' blurb to be visible
     * @property {string} [loading_text] - If true, then forces the 'loading' blurb to be visible
     * @property {odr_remodal_button[]} [buttons] - An optional array of buttons to be placed at the bottom of the remodal
     * @property {boolean} [no_resize] - If true, then does not attempt to resize the modal to fit the content
     */

    /**
     * @typedef {Object} odr_remodal_button
     * @type {object}
     * @property {string} id - The new button's id
     * @property {string} text - The new button's text
     * @property {string} [title] - If provided, the new button's 'title' attribute
     * @property {boolean} [secondary] - If true, then the new button has the 'pure-button-secondary' class
     * @property {boolean} [disabled] - If true, then the new button is disabled at first
     * @property {function} [click_handler] - If provided, then the button's click handler is set to this
     */

    /**
     * Opens ODR's modal dialog with the given options.
     *
     * The second parameter should almost never have anything specified...
     *
     * @param {odr_remodal_options} options
     * @param {Object} [remodal_options]
     */
    function openODRRemodal(options, remodal_options) {
        if (remodal_options === undefined
            || !_.isObject(remodal_options)
            || _.isEmpty(remodal_options)
        ) {
            remodal_options = {
                hashTracking: false,
                closeOnOutsideClick: true
            };
        }
        // always disable hash tracking
        remodal_options.hashTracking = false;


        // Setup the modal
        var modal = $('[data-remodal-id=ODRRemodal]');
        var inst = modal.remodal(remodal_options);

        var title_div = modal.find(".ODRRemodalTitle");
        var loading_div = modal.find(".ODRRemodalLoading");
        var body_div = modal.find(".ODRRemodalBody");
        var buttons_div = modal.find(".ODRRemodalButtons");

        // Set title
        $(title_div).html(options.title);

        // Set loading
        if (options.loading_text !== undefined && options.loading_text !== '')
            setODRRemodalLoadingText(options.loading_text)
        else
            resetODRRemodalLoadingText();

        // Set body
        var body_html = '';
        if (options.body !== undefined)
            body_html = options.body;
        updateODRRemodalBody(body_html);

        // Override body visibility if options.loading is set to true
        if ( options.loading !== undefined && options.loading ) {
            $(body_div).addClass('ODRHidden');
            $(loading_div).removeClass('ODRHidden');
        }

        // Delete any existing buttons in the remodal
        $(buttons_div).addClass('ODRHidden');
        $(buttons_div).empty();

        // Add any required buttons to the remodal
        if (!_.isEmpty(options.buttons)) {
            for (var i = (options.buttons.length - 1); i >= 0; i--) {
                var button = options.buttons[i];

                var button_html = '<button ' +
                    'id="' + button.id +'" ' +
                    'class="pure-button ODRSubmitButton ';

                if (button.secondary !== undefined && button.secondary)
                    button_html += ' pure-button-secondary"';
                else
                    button_html += ' pure-button-primary"';

                if (button.title !== undefined)
                    button_html += ' title="' + button.title + '"';

                if (button.disabled !== undefined && button.disabled)
                    button_html += 'disabled>' + button.text + '</button>';
                else
                    button_html += '>' + button.text + '</button>';

//                console.log(button_html)
                $(buttons_div).prepend(button_html);

                // Setup click handler
                if (button.click_handler !== undefined)
                    $("#" + button.id).unbind('click').click(button.click_handler);
            }

            $(buttons_div).removeClass('ODRHidden');
        }

        // Open the modal
        inst.open();

        // Reset modal to display content
        if (options.no_resize === undefined)
            resetRemodalInnerHeight();
    }

    /**
     * Updates the body of the remodal with the given html.  Shows the 'loading' blurb if given the
     * empty string, hides the 'loading' blurb otherwise.
     *
     * @param {string} html
     * @param {('normal'|'full'|'none')} [resize='normal'] - If 'normal', then attempt to fit the remodal to the contents.
     *                                                       If 'full', then attempt to take up the entire screen.
     *                                                       if 'none', then do not attempt to resize the remodal.
     */
    function updateODRRemodalBody(html, resize = 'normal') {
        var modal = $('[data-remodal-id=ODRRemodal]');
        var body_div = modal.find(".ODRRemodalBody");

        $(body_div).html(html);

        if (html.length > 0) {
            hideODRRemodalLoading();

            if (resize === 'normal')
                resetRemodalInnerHeight();
            else if (resize === 'full')
                resetRemodalInnerHeight(true);
        }
        else {
            setODRRemodalLoadingText('Loading...');
            showODRRemodalLoading();
        }
    }

    /**
     * Resizes the currently open modal.
     *
     * @param {boolean} ignore_content_height if true, modal attempts to take up the entire window regardless of content size
     *
     * @returns {number}
     */
    function resetRemodalInnerHeight(ignore_content_height = false) {
        var modal = $("#ODRRemodal");
        var modal_inner = modal.find(".ODRRemodalInner");
        var modal_inner_content = modal.find(".ODRRemodalInnerContent");

        // Get Scroll height of inner, plus some extra for the scrollbars
        var content_height = modal_inner_content.prop('scrollHeight') + 100;
        // console.log('content_height:', content_height);

        var modal_height = $(window).height()
            - modal.find(".ODRRemodalButtons").height()
            - modal.find(".ODRRemodalTitle").height();

        // If not ignoring content height, then use that for modal height
        if (!ignore_content_height && content_height < modal_height)
            modal_height = content_height;
        // console.log('adjusted_height:', modal_height);

        // Ensure there's always enough space for the save button
        // console.log('window.screen.availHeight:', window.screen.availHeight);
        if ( (window.screen.availHeight-270) < modal_height ) {
            modal_height = window.screen.availHeight - 270;
            // console.log('adjusted modal height to (window.screen.availHeight-270)', modal_height);
        }

        // Ensure it's not too small
        if (modal_height < 200)
            modal_height = 200;
        // console.log('final_height:', modal_height);

        modal_inner.animate(
            {height: modal_height},
            {
                duration: 400,
                easing: "swing"
            }
        );

        return modal_height;
    }
</script>

{% endspaceless %}
