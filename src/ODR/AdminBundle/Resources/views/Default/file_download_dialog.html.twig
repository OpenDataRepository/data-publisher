{% spaceless %}

<script>
    /**
     * Opens an ODR modal to allow users to pick which files/images they want to download as a zip
     * archive.
     *
     * @param {number} grandparent_datarecord_id
     * @param {number} target_datarecord_id
     * @param {number} target_datafield_id
     */
    function openFileDownloadDialog(grandparent_datarecord_id, target_datarecord_id, target_datafield_id) {
        /** @type {odr_remodal_options} modal_options */
        var modal_options = {
            title: "Select files to download:",
            buttons: [
                {
                    id: 'ODRFileDownloadFormSubmit',
                    text: 'Download Files',
                    // secondary: true,
                    disabled: true,
                    title: 'You must select one or more files before this button becomes active.',
                    click_handler: function() {
                        // Create/send a POST request of file ids
                        submitFileDownloadForm( "#ODRFileDownloadForm" );
                    }
                }
            ]
        };
        openODRRemodal(modal_options);

        var group_by_datafield = 0;    // don't group_by_datafield by default
        loadFileData(grandparent_datarecord_id, group_by_datafield, target_datarecord_id, target_datafield_id);
    }

    /**
     * Requests the tree structure of all files/images uploaded to the given grandparent_datarecord
     * and its descendants.
     *
     * @param {number} grandparent_datarecord_id
     * @param {number} group_by_datafield  0 or 1
     * @param {number} [target_datarecord_id]
     * @param {number} [target_datafield_id]
     */
    function loadFileData(grandparent_datarecord_id, group_by_datafield, target_datarecord_id, target_datafield_id) {
        var url = '{{ path('odr_get_file_list', {'grandparent_datarecord_id': 0}) }}';
        url = url.substring(0, (url.length-1));
        url += grandparent_datarecord_id + '/' + group_by_datafield;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                updateODRRemodalBody(data.d);

                initFileDownloadDialogForm(target_datarecord_id, target_datafield_id);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Close the dialog so it's not in some half-initialized state
                closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Attaches click handlers and selects all files belonging to the given datarecord/datafield if
     * requested.
     *
     * @param {number} [target_datarecord_id]
     * @param {number} [target_datafield_id]
     */
    function initFileDownloadDialogForm(target_datarecord_id, target_datafield_id) {
        $("#ODRFileDownloadForm .ODRTristateCheckbox").unbind('click').click(function() {
            var icon_div = $(this).children('.fa').first();

            if ( $(this).hasClass('binary') ) {
                // This is a file/image-level checkbox
                if ( $(icon_div).hasClass('fa-check') ) {
                    // File/image currently selected, mark as unselected
                    $(icon_div).removeClass('fa-check');
                }
                else {
                    // File/image currently unselected, mark as selected
                    $(icon_div).addClass('fa-check');
                }
            }
            else {
                // This is a datafield/datarecord/datatype-level checkbox
                if ( $(icon_div).hasClass('fa-check') ) {
                    if ( $(icon_div).hasClass('partial') ) {
                        // Currently has some descendants selected...select all descendants
                        $(this).parent().find('.ODRTristateCheckbox .fa').addClass('fa-check').removeClass('partial');
                    }
                    else {
                        // Currently has all descendants selected...deselect all descendants
                        $(this).parent().find('.ODRTristateCheckbox .fa').removeClass('fa-check partial');
                    }
                }
                else {
                    // Currently has no descendants selected...Select all descendants
                    $(this).parent().find('.ODRTristateCheckbox .fa').addClass('fa-check').removeClass('partial');
                }
            }

            // Update classes for parent elements
            FileDownloadDialog_applyToParents( $(this) );

            // If no files/images selected for download, disable the submit button
            if ( $("#ODRFileDownloadForm").find('.fa.fa-check').length > 0 )
                $("#ODRFileDownloadFormSubmit").removeAttr('disabled');
            else
                $("#ODRFileDownloadFormSubmit").attr('disabled', 'disabled');
        });

        if (target_datarecord_id != 0 && target_datafield_id != 0) {
            $("#FileList_" + target_datarecord_id + "_" + target_datafield_id + " > .ODRTristateCheckbox").trigger('click');
        }
    }

    /**
     * Updates the state of the tri-state checkboxes going up the tree.
     *
     * @param {HTMLElement} source_element
     */
    function FileDownloadDialog_applyToParents(source_element) {
        var parent_list_element = $(source_element).parent().parent().parent().not('form');
        if (parent_list_element.length == 0)
            return;

        var parent_checkbox_element = $(parent_list_element).children('.ODRTristateCheckbox').first();

        var selected_count = $(parent_list_element).children('ul').find('.fa-check').length;
        var total_count = $(parent_list_element).children('ul').find('.fa').length;

        if (selected_count == 0) {
            // No children selected, so this one should be unselected too
            $(parent_checkbox_element).children('i').removeClass('fa-check partial');
        }
        else if (selected_count == total_count) {
            // All children selected, so this one should be selected too
            $(parent_checkbox_element).children('i').addClass('fa-check').removeClass('partial');
        }
        else {
            // Some children selected, so this one should be partially selected
            $(parent_checkbox_element).children('i').addClass('fa-check partial');
        }

        FileDownloadDialog_applyToParents(parent_checkbox_element);
    }

    /**
     * Submits which files the user wants to download to the server.
     *
     * @param {string} form_id
     */
    function submitFileDownloadForm(form_id) {
        var file_count = 0;
        $("#ODRFileDownloadForm").find('.binary').each(function() {
            if ( $(this).children('.fa').first().hasClass('fa-check') ) {
                $(this).children('input').prop('disabled', false);
                file_count++;
            }
        });

        var grandparent_datarecord_id = '{{ initial_datarecord_id }}';

        var url = '{{ path('odr_start_zip_archive_download', {'grandparent_datarecord_id': 0}) }}';
        url = url.substring(0, (url.length-1));
        url += grandparent_datarecord_id;

        var file_list = $("#ODRFileDownloadForm").serialize();

        $("#ODRFileDownloadFormSubmit").attr('disabled', 'disabled');

        // Hide before ajax stuff
        $('#ODRFileDownloadFormWrapper').addClass('ODRHidden');
        $('#ODRFileDownloadForm_progress').removeClass('ODRHidden');
        resetRemodalInnerHeight();

        $.ajax({
            type: 'POST',
            url: url,
            dataType: 'json',
            data: file_list,
            success: function(data, textStatus, jqXHR) {
                var archive_filename = data.d.archive_filename;
                var archive_size = data.d.archive_size;

                // Couldn't do this earlier...
                $('#ODRFileDownloadForm_total').html(archive_size);

                createZipArchiveProgressCheck(archive_filename, archive_size, 'ODRRemodal');
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Handle errors
                closeODRRemodal();
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }
</script>

{% endspaceless %}
