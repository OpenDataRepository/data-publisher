{% spaceless %}
    <script>
        var datatype_properties = null;
        var theme_element_properties = null;
        var datafield_properties = null;
    </script>

    {% set datatype = datatype_array[initial_datatype_id] %}

    <h1 class="no-margin-top-phone">
        <span>Search Template Design &raquo; {{ datatype.dataTypeMeta.shortName }}</span>
    </h1>

    {%  if datatype.setup_step != "complete" and display_mode == "wizard" %}
        <ul id="wizardStatus">
            <li class="completed">Step 1. <span class="wizardStatusText">Choose a template.</span></li>
            <li class="completed">Step 2. <span class="wizardStatusText">Database information.</span></li>
            <li class="completed">Step 3. <span class="wizardStatusText">Add or change fields.</span></li>
            <li class="current">Step 4. <span class="wizardStatusText">Setup search templates.</span></li>
            <!-- <li>Step 4. <span class="wizardStatusText">Book/Order repair</span></li> -->
        </ul>

        <div class="ODRContentWrapper pure-u-1">
            <div class="ODRThemeElement pure-u-1">
                <div class="ODRInnerBox pure-u-1">
                    <h3 class="ODRHeader"><i class="fa fa-md fa-info-circle fa-fw"></i> Configure search view.</h3>
                    <div class="ODRBodyContent">
                        <p>
                            Click a field to bring up its configurable properties.  To view hidden fields, toggle the "show hidden elements" checkbox below.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    {% endif %}

    {% if display_mode == "edit" %}
        <div class="ODRContentWrapper pure-u-1">
            <div class="ODRThemeElement pure-u-1">
                <div class="ODRInnerBox pure-u-1">
                    <h3 class="ODRHeader"><i class="fa fa-md fa-info-circle fa-fw"></i> Edit View</h3>
                    <div class="ODRBodyContent pure-u-1">
                        <p>
                            Edit the view and then click the "return to previous page" button below to see
                            the edited view in action.
                        </p>
                        <p>
                            Click a field to bring up its configurable properties.  To view hidden fields, toggle the "show hidden elements" checkbox below.
                        </p>
                        <p>Edit the name and description of the view below:</p>
                        {% include 'ODRAdminBundle:Theme:theme_properties_form.html.twig' with {
                            'theme': theme,
                            'theme_form': theme_form,
                        } %}
                        <div>
                            <button type="button" class="pure-button pure-button-primary ODRReturn">Return to previous page</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    {% endif %}

    <div id="ThemeDesignWrapperMessage">
        <div class="ODRContentWrapper">
            <div class="ODRThemeElement">
                <div class="ODRInnerBox">
                    <h3 class="ODRHeader">Larger Browser Recommended</h3>
                    <div class="ODRBodyContent">
                        <p>To successfully use the design interface, a browser with a
                            width of at least 1500 pixels is recommended.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div id="ThemeDesignWrapper">
        <div id="ThemeLeftColumn" class="ODRContentWrapper">
            <div class="ODRThemeElement">
                <div class="ODRInnerBox">
                    <h3 class="ODRHeader">Theme Styling</h3>
                    <div class="ODRThemeDesignSettings">
                        <div>
                            <label for="ODRThemeShowHidden">
                                Show Hidden Elements:
                            </label>
                            <input type="checkbox" value="0" id="ODRThemeShowHidden" name="ODRThemeShowHidden">
                        </div>
                    </div>
                    <h3 class="ODRHeader">Manage Design</h3>
                    <div class="ODRThemeDesignSettings">
                        <p>Click on an element of your design to manage its settings below.</p>
                        <div id="ODRDatatypeToolsBlock">
                            <p>
                                <a id="ODRDatatype_addTE">
                                    <i class="tooltip fa fa-edit ODRAddThemeElement"></i>
                                    <span class="link-text">Add Group Box</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRDatatype_visibleTE">
                                    <i class="tooltip fa fa-eye fa-inverse ODRVisibleThemeElement"></i>
                                    <span class="link-text"> Group Box is Visible</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRDatatype_visibleTEBorder">
                                    <i class="tooltip fa fa-eye ODRVisibleThemeElementBorder"></i>
                                    <span class="link-text"> Show Group Box Border</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRDatatype_useIcon">
                                    <i class="tooltip fa fa-file ODRToggleFilenameIconUse"></i>
                                    <span class="link-text"> Currently using Filename in Table Layouts</span>
                                </a>
                            </p>
                            <p></p>
                            <p>
                                <a id="ODRDatatype_deleteTE">
                                    <i class="tooltip fa fa-trash ODRDeleteThemeElement"></i>
                                    <span class="link-text"> Delete Group Box</span>
                                </a>
                            </p>
                        </div>
                    </div>
                    <div class="pure-u-1"></div>
                    <div class="pure-u-24-24"><h3 class="ODRHeader">Element Settings</h3></div>
                    <div id="ThemeDesignForm"></div>
                    <div id="ThemeDatafieldDesignForm" class="ODRHidden"></div>
                </div>
            </div>
        </div>

        <div id="ThemeDesignArea">
            {% include 'ODRAdminBundle:Theme:theme_area.html.twig' with {
                'datatype_array': datatype_array,
                'theme_array': theme_array,
                'site_baseurl': site_baseurl,

                'initial_datatype_id': initial_datatype_id,
                'initial_theme_id': theme.id,

                'datatype_permissions': datatype_permissions,
                'is_datatype_admin': is_datatype_admin,
            } %}
        </div>
    </div>

<style>
    /* local overrides for .fa-eye */
    .fa-eye {
        color: red;
    }
    .fa-eye.ODRActiveIcon {
        color: green;
    }
</style>

<script>
    var SaveTimeout = 1500;
    $(function() {
        disableSearchSidebar();    {# defined in ODRAdminBundle:Default:common_js.html.twig #}

        // Initialize the help button
        $("#ODRHelpButton").unbind('click').click(function() {
            ODRTheme_startIntroJS();
        });

        // Initialize the "show hidden" toggle
        $("#ODRThemeShowHidden").unbind('click').click(function() {
            if ( $(this).is(":checked") )
                $(".ODRThemeHiddenElement").addClass("ODRThemeVisibleHiddenElement").removeClass("ODRThemeHiddenElement");
            else
                $(".ODRThemeVisibleHiddenElement").addClass("ODRThemeHiddenElement").removeClass("ODRThemeVisibleHiddenElement");

            clearAllFields();
            ODRTheme_ResetToolSet();
        });

        // Attach handlers to the elements used to change the theme name/description
        $("#ThemePropertiesForm input:text").unbind('keyup').keyup(function() {
            // Only want to execute this save once
            clearTimeout(theme_properties_change);
            theme_properties_change = setTimeout("ODRTheme_SaveThemeProperties()", SaveTimeout);
        });
        $("#ThemePropertiesForm textarea").unbind('keyup').keyup(function() {
            // Only want to execute this save once
            clearTimeout(theme_properties_change);
            theme_properties_change = setTimeout("ODRTheme_SaveThemeProperties()", SaveTimeout);
        });
{# NOTE: want more control over the checkboxes here, so not using a generic handler
        $("#ThemePropertiesForm input:checkbox").unbind('change').change(function() {
            // Only want to execute this save once
            clearTimeout(theme_properties_change);
            theme_properties_change = setTimeout("ODRTheme_SaveThemeProperties()", SaveTimeout);
        });
#}
        {# Actually have access to the form variables here... #}
        $("#{{ theme_form.disableSearchSidebar.vars.id }}").unbind('change').change(function() {
            clearTimeout(theme_properties_change);
            theme_properties_change = setTimeout("ODRTheme_SaveThemeProperties()", SaveTimeout);
        });

        $("#{{ theme_form.themeVisibility.vars.id }}").unbind('change').change(function() {
            clearTimeout(theme_properties_change);
            theme_properties_change = setTimeout("ODRTheme_SaveThemeProperties()", SaveTimeout);
        });

        $("#{{ theme_form.isTableTheme.vars.id }}").unbind('change').change(function() {
            // If the "is_table_theme" checkbox got unselected, then ensure the other two table-specific
            //  options are also unselected
            if ( !$(this).prop('checked') ) {
                $("#{{ theme_form.displaysAllResults.vars.id }}").prop('checked', false);
                $("#{{ theme_form.enableHorizontalScrolling.vars.id }}").prop('checked', false);
            }

            clearTimeout(theme_properties_change);
            theme_properties_change = setTimeout("ODRTheme_SaveThemeProperties()", SaveTimeout);
        });

        $("#{{ theme_form.displaysAllResults.vars.id }}").unbind('change').change(function() {
            // If the "display_all_results" checkbox got selected, then ensure the "is_table_theme"
            //  checkbox is also selected
            if ( $(this).prop('checked') )
                $("#{{ theme_form.isTableTheme.vars.id }}").prop('checked', true);

            clearTimeout(theme_properties_change);
            theme_properties_change = setTimeout("ODRTheme_SaveThemeProperties()", SaveTimeout);
        });

        $("#{{ theme_form.enableHorizontalScrolling.vars.id }}").unbind('change').change(function() {
            // If the "enable_horizontal_scrolling" checkbox got selected, then ensure the "is_table_theme"
            //  checkbox is also selected
            if ( $(this).prop('checked') )
                $("#{{ theme_form.isTableTheme.vars.id }}").prop('checked', true);

            clearTimeout(theme_properties_change);
            theme_properties_change = setTimeout("ODRTheme_SaveThemeProperties()", SaveTimeout);
        });

        // Ensure multiple-allowed child/linked datatypes never appear for a table theme
        ODRTheme_UpdateChildtypeVisibility();

        $(".ODRReturn").unbind('click').click(function() {
{# NOTE: whether ThemeController::modifythemAction() gets a search key depends on the page_type...Display/Edit modes don't pass one in #}
{% if search_key == '' %}
            // Typically want to return to the previous page...
            window.history.back();
{% else %}
            // Want to render the search results list with the theme that was just being modified
            var url = '{{ path('odr_search_render', { 'search_theme_id': 0, 'search_key': '' }) }}';
            url = url.substr(0, url.length-2);
            url += {{ theme.id }} + '/' + '{{ search_key }}' + '/1';

            UpdateURL(url);
{% endif %}
        });

        ODRTheme_InitPage();
    });

    /**
     * Initializes the resizeable and sortable handles for a field, TED, or child datatype.
     *
     * @param {HTMLElement} elem
     * @param {string} element_type
     */
    function ODRTheme_SetupElement(elem, element_type) {
        if (element_type === undefined)
            return;

        // console.log('ODRTheme_SetupElement()', elem, element_type);

        // Fade out all elements other than this one....
        var actual_parent = null;
        var top_level_teds = $("#ODRDatatypeDesign").find("> .ODRDataType > .ODRFieldArea > .ODRThemeElement").not(".ODRThemeHiddenElement").not(".ODRHidden");
        if (
            $(elem).hasClass('ODRDataField')  // Data fields
            || $(elem).parent().hasClass('ODRDataType')  // Child or linked data types
        ) {
            // console.log('ODRTheme_SetupElement(), datafield selected');
            // Set opacity to this TED to 1
            clearAllFields(false);
            var isChildOrLink = true;

            top_level_teds.each(function() {
                if($(this).attr('id') === $(elem).parent().parent().attr('id')) {
                    // console.log('datafield not in child or link.');
                    isChildOrLink = false;
                }
            });


            // Get actual parent and all Teds in between
            if(isChildOrLink) {
                // Display a child/linked datatype warning ???
                $(elem).parents().each(function() {
                    var parent_element = $(this);
                    top_level_teds.each(function () {
                        if ($(this).attr('id') === parent_element.attr('id')) {
                            actual_parent = parent_element;
                            // console.log('actual_parent id', actual_parent.attr('id'));
                        }
                    });
                });

                if(actual_parent !== null) {
                    // console.log('fading teds...');
                    top_level_teds.each(function() {
                        if ($(this).attr('id') !== actual_parent.attr('id')) {
                            $(this).fadeTo(200, '0.25');
                        }
                    });

                    actual_parent.fadeTo(200, 1);
                }
                else {
                    // console.log("No valid parent found!");
                }
            }
            else {
                top_level_teds.each(function() {
                    if ($(this).attr('id') !== $(elem).parent().parent().attr('id')) {
                        // console.log('datafield not in child or link.');
                        $(this).fadeTo(200, '0.25');
                    }
                });
                $(elem).parent().parent().fadeTo(200, 1);
            }
        }
        else {
            // console.log('ODRTheme_SetupElement(), opacity switch');
            clearAllFields(false);
            $(elem).fadeTo(100, '1.0');

            top_level_teds.each(function() {
                if ($(this).attr('id') === $(elem).attr('id')) {
                    actual_parent = $(elem);
                }
            });
            if(actual_parent === null) {
                $(elem).parents().each(function() {
                    var parent_element = $(this);
                    top_level_teds.each(function () {
                        if ($(this).attr('id') === parent_element.attr('id')) {
                            actual_parent = parent_element;
                            // console.log('actual_parent id', actual_parent.attr('id'));
                        }
                    });
                });
            }


            if(actual_parent !== null) {
                // Fade other theme elements to 0.25
                top_level_teds.each(function() {
                    if($(this).attr('id') !== actual_parent.attr('id')) {
                        $(this).fadeTo(200, '0.25');
                    }
                });
                if(actual_parent.css('opacity') < 1) {
                    actual_parent.fadeTo(100, '1.00')
                }
            }
        }

        // Highlight the field
        $(elem).addClass('ODRFieldSelected');
        // console.log('field highlighted.....', $(elem).attr('id'));

        // Attach resizeable handlers to the element if needed
        setupResizeable(elem);    {# defined in Displaytemplate:functions.js.twig #}

        // Attach sortable handlers to the element if needed
        if (element_type === 'theme_element')
            setupSortableThemeElements(elem);    {# defined in Displaytemplate:functions.js.twig #}

        if ( element_type === 'datafield' )
            setupSortableDatafields(elem);    {# defined in Displaytemplate:functions.js.twig #}
    }

    {% include 'ODRAdminBundle:Displaytemplate:functions.js.twig' %}

    /**
     * Resets the various toolset links on the left side of the master layout design page.
     */
    function ODRTheme_ResetToolSet() {
        // Clear the theme form
        $("#ThemeDesignForm").html("");
        $("#ThemeDatafieldDesignForm").html("");

        // console.log('ODRTheme_ResetToolSet()');

        var tools = [];
        tools.add_te     = $("#ODRDatatype_addTE");
        tools.visible_te = $("#ODRDatatype_visibleTE");
        tools.border_te  = $("#ODRDatatype_visibleTEBorder");
        tools.use_icon   = $("#ODRDatatype_useIcon");
        tools.delete_te  = $("#ODRDatatype_deleteTE");

        for (var x in tools) {
            var obj = tools[x];
            obj.addClass('faded');
            obj.find('i').removeClass('ODRActiveIcon');
            obj.unbind('click').click(function () {
                ODRTheme_SidebarDefaultClick();
            });
        }

        // Reset link text
        tools.add_te.find('.link-text').html('Add Group Box');
        tools.visible_te.find('.link-text').html('Group Box is Visible');
        tools.border_te.find('.link-text').html('Show Group Box Border');
        tools.use_icon.find('.link-text').html('Currently using Filename in Table Layouts');
        tools.delete_te.find('.link-text').html('Delete Group Box');

        // Reset tooltips
        // tools.add_te.attr('title', 'Add Group Box');
        // tools.visible_te.attr('title', 'Toggle Group Box Visibility');
        // tools.border_te.attr('title', 'Toggle Group Box Border');
        // tools.delete_te.attr('title', 'Delete Group Box');
    }

    /**
     * Changes the various toolset links on the left side of the master layout design to match the
     * entity that the user is attempting to modify.
     *
     * @param {number} entity_id
     * @param {string} tool_type
     * @param {number} [theme_element_id]
     */
    function ODRTheme_RenderToolSet(entity_id, tool_type, theme_element_id) {

        var tools = [];
        tools.add_te     = $("#ODRDatatype_addTE");
        tools.visible_te = $("#ODRDatatype_visibleTE");
        tools.border_te  = $("#ODRDatatype_visibleTEBorder");
        tools.use_icon   = $("#ODRDatatype_useIcon");
        tools.delete_te  = $("#ODRDatatype_deleteTE");

        ODRTheme_ResetToolSet();

        entity_id = parseInt(entity_id);
        if ( theme_element_id !== undefined && theme_element_id !== '' )
            theme_element_id = parseInt(theme_element_id);
        // console.log('ODRTheme_RenderToolSet()', tool_type, entity_id, 'theme_element_id:', theme_element_id);

        switch(tool_type) {
            case 'datatype':
                var datatype_id = entity_id;
                var dt_props = datatype_properties.get(datatype_id);
                // console.log('ODRTheme_RenderToolSet() datatype', datatype_id, ' Props:', dt_props);

                // ----------------------------------------
                // Add ThemeElement/Group Box is always available...the user has admin permissions
                //  to the local dataype, and is only modifying a copy of the master theme for a
                //  linked/remote datatype
                tools.add_te.removeClass('faded');
                tools.add_te.find('i').addClass('ODRActiveIcon');

                tools.add_te.unbind('click').click(function () {
                    if ( theme_element_id === undefined || theme_element_id === '' )
                        theme_element_id = 0;

                    var dt_theme_ids = dt_props.get('theme_ids');
                    var theme_id = dt_theme_ids.get(theme_element_id);
                    // console.log('adding theme_element to theme ' + theme_id + ', contained inside theme_element_id ' + theme_element_id);
                    ODRTheme_AddThemeElement(theme_id, theme_element_id);
                });

                // ----------------------------------------
                // Not allowed to use any of the other options here

                break;

            case 'theme_element':
                var theme_element_id = entity_id;
                var te_props = theme_element_properties.get(theme_element_id);
                // console.log('ODRTheme_RenderToolSet() theme_element', theme_element_id, ' Props:', te_props);

                var theme_element = $("#ThemeElement_" + theme_element_id);
                var theme_element_is_visible = true;
                if ( $(theme_element).hasClass("ODRThemeHiddenElement") || $(theme_element).hasClass("ODRThemeVisibleHiddenElement") )
                    theme_element_is_visible = false;

                var is_top_level = true;
                if ( $(theme_element).parent().parent().hasClass('ODRChildDatatype') )
                    is_top_level = false;

                var theme_element_border_visible = true;
                if ( $("#ThemeElement_" + theme_element_id + " > .ODRInnerBox").hasClass("ODRInnerBox_HideBorder") )
                    theme_element_border_visible = false;


                // ----------------------------------------
                // Can't add a ThemeElement/Group Box to a ThemeElement

                // ----------------------------------------
                // Can always change visibility of a ThemeElement
                tools.visible_te.removeClass('faded');

                if (theme_element_is_visible) {
                    tools.visible_te.find('i').addClass('ODRActiveIcon');
                    tools.visible_te.find('.link-text').html('Group Box is Visible');
                    tools.visible_te.attr('title', 'This Group Box and its contents will be displayed in the layout if the user is allowed to view it.');
                }
                else {
                    // tools.visible_te.find('i').removeClass('ODRActiveIcon');
                    tools.visible_te.find('.link-text').html('Group Box is Not Visible');
                    tools.visible_te.attr('title', 'This Group Box and its contents will never be displayed.');
                }

                tools.visible_te.unbind('click').click(function () {
                    ODRTheme_ToggleThemeElementVisibility(theme_element_id);
                });

                // ----------------------------------------
                // Can only change visibility of a ThemeElement's border if it's top-level
                if ( is_top_level ) {
                    tools.border_te.removeClass('faded');

                    if (theme_element_border_visible) {
                        tools.border_te.find('i').addClass('ODRActiveIcon');
                        tools.border_te.find('.link-text').html('Group Box Border is Visible');
                        tools.border_te.attr('title', 'The border of this Group Box will be displayed.');
                    }
                    else {
                        // tools.visible_te.find('i').removeClass('ODRActiveIcon');
                        tools.border_te.find('.link-text').html('Group Box Border is Not Visible');
                        tools.border_te.attr('title', 'The border of this Group Box will not be displayed.');
                    }

                    tools.border_te.unbind('click').click(function () {
                        ODRTheme_ToggleThemeElementBorderVisibility(theme_element_id);
                    });
                }

                // ----------------------------------------
                // "Currently using Icon in table layouts" makes no sense for a themeElement

                // ----------------------------------------
                // Delete ThemeElement/Group Box is only available when the themeElement is empty
                // Permissions aren't a factor here, because the user always has permissions to delete
                //  from the local dataype, and is only modifying a copy of the master theme for a
                //  linked/remote datatype
                var has_render_plugin_instance = te_props.get('has_render_plugin_instance');
                var child_is_link = te_props.get('child_is_link');
                var has_childtype = te_props.get('has_childtype');
                var has_datafields = te_props.get('has_datafields');

                if ( !has_render_plugin_instance && !child_is_link && !has_childtype && !has_datafields ) {
                    tools.delete_te.removeClass('faded');
                    tools.delete_te.find('i').addClass('ODRActiveIcon');
                    tools.delete_te.find('.link-text').html('Delete Group Box');
                    tools.delete_te.attr('title', 'Click to delete this group box.');

                    tools.delete_te.unbind('click').click(function () {
                        ODRTheme_DeleteThemeElement(theme_element_id);
                    });
                }
                else {
                    tools.delete_te.attr('title', 'A Group Box can only be deleted if it is empty.  Delete all contents before attempting to delete.');
                }
                break;

            case 'datafield':
                var datafield_id = entity_id;
                var datafield = $("#ThemeElement_" + theme_element_id).find("#Field_" + datafield_id).first();

                var datafield_is_visible = true;
                if ( $(datafield).hasClass("ODRThemeHiddenElement") || $(datafield).hasClass("ODRThemeVisibleHiddenElement") )
                    datafield_is_visible = false;

                var image_header_div = $(datafield).find('.ODRFileImageHeader').first();
                var is_image_datafield = false;
                if ( $(image_header_div).length > 0 )
                    is_image_datafield = true;

                var is_file_datafield = false;
                var file_info_div = $(datafield).find('.ODRFileInfoDiv').first();
                if ( $(file_info_div).length > 0 )
                    is_file_datafield = true;

                // ----------------------------------------
                // Can't add a ThemeElement/Group Box to a Datafield

                // ----------------------------------------
                // Can always change visibility of a Datafield
                tools.visible_te.removeClass('faded');
                if (datafield_is_visible) {
                    tools.visible_te.find('i').addClass('ODRActiveIcon');
                    tools.visible_te.find('.link-text').html('Field is Visible');
                    tools.visible_te.attr('title', 'This field will be displayed in the layout if the user is allowed to view it.');
                }
                else {
                    // tools.visible_te.find('i').removeClass('ODRActiveIcon');
                    tools.visible_te.find('.link-text').html('Field is Not Visible');
                    tools.visible_te.attr('title', 'This field will never be displayed.');
                }

                tools.visible_te.unbind('click').click(function () {
                    ODRTheme_ToggleThemeDatafieldVisibility(theme_element_id, datafield_id);
                });

                // ----------------------------------------
                // Can only change visibility of a datafield's header if it's an image field
                if ( is_image_datafield ) {
                    tools.border_te.removeClass('faded');

                    var image_datafield_header_visible = true;
                    if ( $(image_header_div).hasClass('ODRFileImageHeader_hidden_design') )
                        image_datafield_header_visible = false;

                    if (image_datafield_header_visible) {
                        tools.border_te.find('i').addClass('ODRActiveIcon');
                        tools.border_te.find('.link-text').html('Datafield Header is Visible');
                        tools.border_te.attr('title', 'The header of this Datafield will be displayed.');
                    }
                    else {
                        // tools.visible_te.find('i').removeClass('ODRActiveIcon');
                        tools.border_te.find('.link-text').html('Datafield Header is Not Visible');
                        tools.border_te.attr('title', 'The header of this Datafield will not be displayed.');
                    }

                    tools.border_te.unbind('click').click(function () {
                        ODRTheme_ToggleThemeDatafieldHeaderVisibility(theme_element_id, datafield_id);
                    });
                }

                // ----------------------------------------
                // Can only change whether a field uses a filename or an icon in a table theme if
                //   it's a file field
                if ( is_file_datafield ) {
                    tools.use_icon.removeClass('faded');

                    var use_icon_active = false;
                    if ( $(file_info_div).hasClass('ODRFile_useIconInTables_design') )
                        use_icon_active = true;

                    if (use_icon_active) {
                        tools.use_icon.find('i').removeClass('fa-file-text').addClass('fa-file');
                        tools.use_icon.find('.link-text').html('Currently using Icon in Table Layouts');
                        tools.use_icon.attr('title', 'Click to change to displaying its Filename in Table layouts.');
                    }
                    else {
                        tools.use_icon.find('i').addClass('fa-file-text').removeClass('fa-file');
                        tools.use_icon.find('.link-text').html('Currently using Filename in Table Layouts');
                        tools.use_icon.attr('title', 'Click to change to displaying an Icon in Table layouts.');
                    }

                    tools.use_icon.unbind('click').click(function () {
                        ODRTheme_ToggleThemeDatafieldUseIcon(theme_element_id, datafield_id);
                    });
                }

                // ----------------------------------------
                // Can't delete a datafield from here

                break;

            default:
                break;
        }
    }

    /**
     * Displays a popup notification to the user when they try to click a disabled action for a
     * datafield/datatype on the page...such as attempting to add a child datatype while a datafield
     * is selected, or attempting to delete a datafield that's marked as unique.
     */
    function ODRTheme_SidebarDefaultClick() {
        // console.log('default click');
        if ( $(".ODRFieldSelected").length > 0 )
            $.jGrowl('Unable to perform this action on this element.');
        else
            $.jGrowl('You must first select an element from the page to modify its settings.');
    }

    /**
     * Helper function to ensure multiple-allowed child/linked datatypes never appear for a table theme.
     */
    function ODRTheme_UpdateChildtypeVisibility() {
        // Table themes can't use anything from child/linked datatypes that allow multiple
        //  child/linked datarecords

        // The "Show Hidden Elements" checkbox won't show items with the "ODRHidden" class
        if ( $("#UpdateThemeForm_isTableTheme").is(':checked') ) {
            $(".ODRChildDatatype.ODRMultipleAllowed").each(function() {
                $(this).parents(".ODRThemeElement").first().addClass('ODRHidden');
            });
        }
        else {
            $(".ODRChildDatatype.ODRMultipleAllowed").each(function() {
                $(this).parents(".ODRThemeElement").first().removeClass('ODRHidden');
            });
        }
    }

    /**
     * Performs basic setup of the page.
     *
     * @param {boolean} [reset_tools]
     */
    function ODRTheme_InitPage(reset_tools) {
        if (reset_tools === undefined)
            reset_tools = true;

        // Setup Data Fields
        ODRTheme_SetupDataFields();

        // Resets the sidebar tool set
        if (reset_tools)
            ODRTheme_ResetToolSet();

        // Sets up the object click handlers
        ODRTheme_InitDatatypeTools();

        // Attach click handlers to tags
        setupTagTree();    {# defined in ODRAdminBundle:Default:common_js.html.twig #}

        // Click handler to Reset Opacity
        $("#ODRDatatypeDesign").find("> .ODRDataType > .ODRFieldArea").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ODRTheme_ResetToolSet();
        });

        $("#left-spacer").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ODRTheme_ResetToolSet();
        });

        $("#ODRDatatypeToolsBlock p").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ODRTheme_ResetToolSet();
        });

        $("#ThemeDesignForm").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ODRTheme_ResetToolSet();
        });

        $("#ThemeDesignWrapper").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ODRTheme_ResetToolSet();
        });

        $("#ThemeLeftColumn .ODRInnerBox").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ODRTheme_ResetToolSet();
        });

        $(".ODRDesignTitle").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ODRTheme_ResetToolSet();
        });

        $("#right-spacer").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ODRTheme_ResetToolSet();
        });

        // Don't want to be able to highlight everything...
        $("#odr_content").find(".ODRInnerBox").disableSelection();

        // Need ODRTheme_InitDatatypeTools() to intialize the .ODRThemeElementHandle elements before the
        //  setup for introJS is run...
        ODRTheme_setupIntroJS();
    }

    /**
     * Attaches selection handles to every ThemeElement on the page, and attaches click events to
     * each datatype header so the datatype properties form can be loaded.
     */
    function ODRTheme_InitDatatypeTools() {
        // Attach a selection handle to all ThemeElements on the page
        $("#ThemeDesignArea .ODRThemeElement").each(function() {
            // Only attach this handle to theme elements in the design area
            if ( $(this).parents(".ODRFieldArea").length === 0 )
                return;

            // Only attach this handle if the ThemeElement is lacking one
            if ( $(this).children(".ODRThemeElementHandle").length > 0 )
                return;

            // Add Resize Handles
            var handle_ne = '<span class="ODRThemeElementHandle ui-resizeable-handle ui-resizeable-ne">&#x263e;</span>';

            $(this).prepend(handle_ne);
        });

        // Initialize the handle
        $(".ODRThemeElementHandle").unbind('click').click(function() {
            // Highlight and setup element properties
            if(!$(this).parent().hasClass('ODRFieldSelected')) {
                ODRTheme_SetupElement($(this).parent(), 'theme_element');

                var theme_element_id_data = $(this).parent().attr("id").split(/_/);
                var theme_element_id = theme_element_id_data[1];
                // Prepare the Sidebar Tools
                ODRTheme_RenderToolSet(theme_element_id, 'theme_element');
            }
        });

        // Disable text selection
        $(".ODRFieldArea").disableSelection();

        // Binding for clicking a datatype header
        $(".ODRDatatypeProperties").unbind('click').click(function() {
            // Highlight and setup element properties
            ODRTheme_SetupElement(this, 'datatype');

            // Locate this datatype's id
            var datatype = $(this).parents('.ODRDataType').first();
            var id_data = $(datatype).attr('id').split(/_/);
            var datatype_id = id_data[1];

            // Determine if this Datatype has a parent, and locate its id if possible
            var parent_datatype_id = '';
            var parents = $(datatype).parents('.ODRDataType');
            if ( $(parents).length > 0 ) {
                var id_data = $(parents).first().attr('id').split(/_/);
                parent_datatype_id = id_data[1];
            }

            // Also need the theme_element id when this is a child/linked datatype, since there could
            //  be multiple instances of this datatype on the page
            var theme_element_id = '';
            var theme_element = $(datatype).parents('.ODRThemeElement');
            if ( $(theme_element).length > 0 ) {
                var id_data = $(theme_element).first().attr('id').split(/_/);
                theme_element_id = id_data[1];
            }

            // Prepare the Sidebar Tools
            // console.log('.ODRDatatypeProperties clicked', datatype_id, theme_element_id);
            ODRTheme_RenderToolSet(datatype_id, 'datatype', theme_element_id);    // Need to pass in the theme_element id to distinguish between instances of this datatype

            // Load the ThemeDatatype properties form if the user clicked on a child/linked datatype
            if ( theme_element_id !== '' )
                ODRTheme_LoadThemeDatatypeProperties(theme_element_id, datatype_id);
        });
    }

    /**
     * Attaches a click handler to every Datafield element on the page, so that a properties form
     * can be loaded.
     */
    function ODRTheme_SetupDataFields() {
        // There are several elements on the page that aren't datafields but have the "ODRDataField"
        //  class...so ensure the event only fires on the ones in the layout designer
        $("#ODRDatatypeDesign").find(".ODRDataField").unbind('click').click(function() {
            // Grab datafield id
            var id_data = $(this).attr('id').split(/_/);
            var datafield_id = id_data[1];

            id_data = $(this).parents(".ODRThemeElement").first().attr('id').split(/_/);
            var theme_element_id = id_data[1];

            // Setup Resizeable
            // console.log('.ODRDatafield clicked', datafield_id, theme_element_id);
            ODRTheme_SetupElement(this, 'datafield');

            // Render Tool Set
            ODRTheme_RenderToolSet(datafield_id, 'datafield', theme_element_id);    // Need to pass in the theme_element id to distinguish between instances of this datafield
        });
    }

    var theme_properties_change = null;

    /**
     * Saves the name/description/etc properties for the currently loaded Theme.
     */
    function ODRTheme_SaveThemeProperties() {
        // Clear the save timeout for this action
        window.clearInterval(theme_properties_change);

        var prop_form = $("#ThemePropertiesForm");
        jQuery.ajax({
            type: "POST",
            url: prop_form.attr('action'),
            data: prop_form.serialize(),
            dataType: 'json',
            success: function(data) {
                notifySaved();

                // Ensure multiple-allowed child/linked datatypes never appear for a table theme
                ODRTheme_UpdateChildtypeVisibility();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Saves the width and hidden properties of a theme_element
     *
     * This function is called by setupResizeable() in ODRAdminBundle:DisplayTemplate:functions.js.twig
     *
     * @param {number} theme_element_id
     */
    function SaveThemeElementProperties(theme_element_id) {
        var url = '{{ path('odr_design_get_theme_element_properties', { 'theme_element_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += theme_element_id;

        var form_data = $("#ThemeElementPropertiesForm_" + theme_element_id).serialize();
        // console.log('SaveThemeElementProperties()', form_data);

        $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            dataType: "json",
            success: function() {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Loads a ThemeDatatype form so the user can change display types (accordion, tabbed, etc)
     * of child/linked datatypes.
     *
     * @param {number} theme_element_id
     * @param {number} datatype_id
     */
    function ODRTheme_LoadThemeDatatypeProperties(theme_element_id, datatype_id) {

        var url = '{{ path('odr_design_load_theme_datatype', { 'theme_element_id': 0, 'datatype_id': 0 } ) }}';
        url = url.substring(0, (url.length - 3));
        url += theme_element_id + '/' + datatype_id;

        // alert(url);  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                $("#ThemeDesignForm").html(data.d);
                $("#ThemeDesignForm").fadeIn('fast');

                ODRTheme_InitThemeDatatypePropertiesForm();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Attaches event handlers to the elements in a ThemeDatatype properties form.
     */
    function ODRTheme_InitThemeDatatypePropertiesForm() {
        var tdf_otdpf = $("#ThemeDesignForm .ODRThemeDatatypePropertiesForm");
        tdf_otdpf.find("select").each(function() {
            var id_data = tdf_otdpf.attr('id').split(/_/);
            var theme_element_id = id_data[1];
            var datatype_id = id_data[2];

            $(this).unbind('change').change(function() {
                ODRTheme_SaveThemeDatatypeProperties(theme_element_id, datatype_id);
            });
        });
    }

    /**
     * Saves properties of a theme datatype form, which controls how a child/linked datatype is
     * displayed.
     *
     * @param {number} theme_element_id
     * @param {number} datatype_id
     */
    function ODRTheme_SaveThemeDatatypeProperties(theme_element_id, datatype_id) {

        var url = '{{ path('odr_design_save_theme_datatype', {'theme_element_id': 0, 'datatype_id': 0}) }}';
        url = url.substring(0, (url.length - 3));
        url += theme_element_id + '/' + datatype_id;

        var form_data = $("#ThemeDatatypePropertiesForm_" + theme_element_id + "_" + datatype_id).serialize();
        // console.log('ODRTheme_SaveThemeDatatypeProperties()', form_data);

        $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            dataType: "json",
            success: function() {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Saves the width of a theme_datafield entity
     *
     * This function is called by setupResizeable() in ODRAdminBundle:DisplayTemplate:functions.js.twig
     *
     * @param {number} theme_element_id
     * @param {number} datafield_id
     */
    function SaveThemeDatafieldProperties(theme_element_id, datafield_id) {
        var url = '{{ path('odr_design_save_theme_datafield', {'theme_element_id': 0, 'datafield_id': 0}) }}';
        url = url.substring(0, url.length-3);
        url += theme_element_id + '/' + datafield_id;

        var post_data = $("#ThemeDatafieldPropertiesForm_" + theme_element_id + "_" + datafield_id).serialize();
        // console.log('SaveThemeDatafieldProperties()', post_data);

        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data) {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Toggles the hidden status of the given theme_element.
     *
     * @param {number} theme_element_id
     */
    function ODRTheme_ToggleThemeElementVisibility(theme_element_id) {
        var show_hidden_elements = false;
        if ($("#ODRThemeShowHidden").is(":checked"))
            show_hidden_elements = true;

        var element = $("#ThemeElement_" + theme_element_id);

        var url = '{{ path('odr_design_theme_element_visibility', {'theme_element_id': 0} ) }}';
        url = url.substring(0, (url.length - 1));
        url += theme_element_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function () {
                notifySaved();

                // Toggle hidden status in UI
                if (show_hidden_elements) {
                    $(element).toggleClass('ODRThemeVisibleHiddenElement');

                    // Re-render the tools section
                    ODRTheme_RenderToolSet(theme_element_id, 'theme_element');
                } else {
                    $(element).toggleClass('ODRThemeHiddenElement');

                    // Clear the selected element
                    clearAllFields();
                    ODRTheme_ResetToolSet();
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function (jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Toggles the visibility of the given theme_element's border.
     *
     * @param {number} theme_element_id
     */
    function ODRTheme_ToggleThemeElementBorderVisibility(theme_element_id) {

        var url = '{{ path('odr_design_theme_element_border_visibility', {'theme_element_id': 0} ) }}';
        url = url.substring(0, (url.length - 1));
        url += theme_element_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function () {
                notifySaved();

                // Toggle hidden status of themeElement's border
                $("#ThemeElement_" + theme_element_id + " > .ODRInnerBox").toggleClass("ODRInnerBox_HideBorder");

                // Re-render the tools section
                ODRTheme_RenderToolSet(theme_element_id, 'theme_element');
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function (jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Toggles the hidden status of the given theme_datafield.
     *
     * @param {number} theme_element_id
     * @param {number} datafield_id
     */
    function ODRTheme_ToggleThemeDatafieldVisibility(theme_element_id, datafield_id) {
        var show_hidden_elements = false;
        if ($("#ODRThemeShowHidden").is(":checked"))
            show_hidden_elements = true;

        var element = $("#ThemeElement_" + theme_element_id).find("#Field_" + datafield_id).first();

        var url  = '{{ path('odr_design_theme_datafield_visibility', {'theme_element_id': 0, 'datafield_id': 0} ) }}';
        url = url.substring(0,(url.length-3));
        url += theme_element_id + '/' + datafield_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function() {
                notifySaved();

                // Toggle hidden status in UI
                if ( show_hidden_elements ) {
                    $(element).toggleClass('ODRThemeVisibleHiddenElement');

                    // Re-render the tools section
                    ODRTheme_RenderToolSet(datafield_id, 'datafield', theme_element_id);
                }
                else {
                    $(element).toggleClass('ODRThemeHiddenElement');

                    // Clear the selected element
                    clearAllFields();
                    ODRTheme_ResetToolSet();
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Toggles whether the given theme_datafield displays its header or not.
     *
     * @param {number} theme_element_id
     * @param {number} datafield_id
     */
    function ODRTheme_ToggleThemeDatafieldHeaderVisibility(theme_element_id, datafield_id) {
        // var show_hidden_elements = false;
        // if ($("#ODRThemeShowHidden").is(":checked"))
        //     show_hidden_elements = true;

        var theme_element = $("#ThemeElement_" + theme_element_id);
        var datafield = $(theme_element).find("#Field_" + datafield_id).first();
        var image_header = $(datafield).find(".ODRFileImageHeader");

        var url  = '{{ path('odr_design_theme_datafield_header_visibility', {'theme_element_id': 0, 'datafield_id': 0} ) }}';
        url = url.substring(0,(url.length-3));
        url += theme_element_id + '/' + datafield_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function() {
                notifySaved();

                // Toggle hidden status on page
                $(image_header).toggleClass('ODRFileImageHeader_hidden_design');

                // Clear the selected element
                clearAllFields();
                ODRTheme_ResetToolSet();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Toggles whether the given theme_datafield displays as an icon or a filename in table themes.
     *
     * @param {number} theme_element_id
     * @param {number} datafield_id
     */
    function ODRTheme_ToggleThemeDatafieldUseIcon(theme_element_id, datafield_id) {
        // var show_hidden_elements = false;
        // if ($("#ODRThemeShowHidden").is(":checked"))
        //     show_hidden_elements = true;

        var theme_element = $("#ThemeElement_" + theme_element_id);
        var datafield = $(theme_element).find("#Field_" + datafield_id).first();
        var file_info_div = $(datafield).find(".ODRFileInfoDiv");

        var url  = '{{ path('odr_design_theme_datafield_use_icon', {'theme_element_id': 0, 'datafield_id': 0} ) }}';
        url = url.substring(0,(url.length-3));
        url += theme_element_id + '/' + datafield_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function() {
                notifySaved();

                // Toggle status on page
                $(file_info_div).toggleClass('ODRFile_useIconInTables_design');

                // Clear the selected element
                clearAllFields();
                ODRTheme_ResetToolSet();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Saves the results of moving a theme_element inside a datatype.
     *
     * This function is called by setupSortableThemeElements() in ODRAdminBundle:DisplayTemplate:functions.js.twig
     *
     * @param {HTMLElement} container - The .ODRFieldArea element that is the direct parent of the theme_element being moved
     */
    function SaveThemeElementOrder(container) {
        // console.log('(ODRTheme) SaveThemeElementOrder() target fieldarea', container);

        var i = 0;
        var theme_element_ids = {};
        $(container).children(".ODRThemeElement").each(function() {
            var id_data = $(this).attr('id').split(/_/);
            theme_element_ids[i] = id_data[1];
            i++;
        });

        var url = '{{ path('odr_design_save_theme_element_order') }}';

        $.ajax({
            cache: false,
            type: 'POST',
            data: theme_element_ids,
            url: url,
            dataType: "json",
            success: function() {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
                // TODO - reload childtype/page on error?
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * When a datafield is moved to a different themeElement, the server needs to create a new
     * themeDatafield entry...but due to the asynchronous nature of the UI, the browser could end up
     * requesting that themeDatafield entry before it actually gets created, in which case the user
     * will see an error popup even though technically nothing is wrong.
     */
    var load_themeDatafield_delay = {};

    /**
     * Saves the results of moving a datafield inside a theme_element, or to a different theme_element.
     *
     * This function is called by setupSortableDatafields() in ODRAdminBundle:DisplayTemplate:functions.js.twig
     *
     * @param {HTMLElement} container - The .ODRInnerBox element that is the direct parent of the datafields in the destination theme_element
     * @param {number} datafield_id - The id of the datafield that triggered this function by being moved
     * @param {number} source_theme_element_id - The id of the theme_element that the moved datafield started in
     * @param {number} dest_theme_element_id - The id of the theme_element that the moved datafield ended in
     */
    function SaveDatafieldOrder(container, datafield_id, source_theme_element_id, dest_theme_element_id) {

        // console.log('SaveDatafieldOrder(), datafield_id: ' + datafield_id + ' source theme_element: ' + source_theme_element_id + ' dest theme_element: ' + dest_theme_element_id);

        var i = 0;
        var datafield_ids = {};
        $(container).children(".ODRDataField").each(function() {
            var id_data = $(this).attr('id').split(/_/);
            datafield_ids[i] = id_data[1];
            i++;
        });

        // Get the id numbers of the passed-in theme elements
        var theme_element = source_theme_element_id.split(/_/);
        var initial_theme_element_id = parseInt(theme_element[1]);
        theme_element = dest_theme_element_id.split(/_/);
        var ending_theme_element_id = parseInt(theme_element[1]);

        var url = '{{ path('odr_design_save_datafield_order', {'initial_theme_element_id': 0, 'ending_theme_element_id' : 0} ) }}';
        url = url.substring(0, url.length-3);
        url += initial_theme_element_id + '/' + ending_theme_element_id;

        // If the datafield got moved to a new theme element...
        if ( initial_theme_element_id !== ending_theme_element_id ) {
            // ...then any attempt to load the datafield's themeDatafield entry needs to wait until
            //  this ajax function finishes
            var key = datafield_id + '_' + ending_theme_element_id;
            load_themeDatafield_delay[key] = 1;
            // console.log('need themeDatafield delay', load_themeDatafield_delay);

            // Also throw up an overlay so the user can't attempt to resize a datafield until the
            //  themeDatafield entry exists
            ODRTheme_InsertLoadingDiv( $("#ThemeElement_" + ending_theme_element_id) );
        }

        $.ajax({
            cache: false,
            type: 'POST',
            data: datafield_ids,
            url: url,
            dataType: "json",
            success: function() {
                notifySaved();

                // Ensure the properties of both the source and the destination theme elements are
                //  kept up to date
                // console.log('initial_theme_element_id', initial_theme_element_id, 'ending_theme_element_id', ending_theme_element_id);
                // console.log('theme_element_properties before', theme_element_properties);

                var initial_te_props = theme_element_properties.get(initial_theme_element_id);
                var ending_te_props = theme_element_properties.get(ending_theme_element_id);

                var initial_te_length = $("#ThemeElement_" + initial_theme_element_id).children(".ODRInnerBox").children(".ODRDataField").length;
                if ( initial_te_length > 0 )
                    initial_te_props.set('has_datafields', true);
                else
                    initial_te_props.set('has_datafields', false);

                var ending_te_length = $("#ThemeElement_" + ending_theme_element_id).children(".ODRInnerBox").children(".ODRDataField").length;
                if (ending_te_length > 0)
                    ending_te_props.set('has_datafields', true);
                else
                    ending_te_props.set('has_datafields', false);

                theme_element_properties.set(initial_theme_element_id, initial_te_props);
                theme_element_properties.set(ending_theme_element_id, ending_te_props);
                // console.log('theme_element_properties after', theme_element_properties);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // If this ajax request was for a datafield being moved into a different themeElement...
                var key = datafield_id + '_' + ending_theme_element_id;
                if ( load_themeDatafield_delay[key] !== undefined && load_themeDatafield_delay[key] !== null ) {
                    // ...then delete the delay entry because the themeDatafield entry exists now
                    delete load_themeDatafield_delay[key];
                    // console.log('SaveDatafieldOrder() complete', load_themeDatafield_delay);

                    // Also get rid of the overlay div
                    ODRTheme_RemoveLoadingDiv( $("#ThemeElement_" + ending_theme_element_id) );
                }

                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Creates and attaches a new theme_element to the given datatype.
     *
     * @param {number} theme_id
     * @param {number} containing_theme_element_id
     * @param {function} [callback]
     */
    function ODRTheme_AddThemeElement(theme_id, containing_theme_element_id, callback) {
        if (callback === undefined) {
            callback = function() {}
        }

        var url = '{{ path('odr_design_add_theme_element', { 'theme_id': 0 }) }}';
        url = url.substring(0, url.length-1) + theme_id;
        // alert(url);  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // Clear object properties panel
                // $("#ThemeDesignForm").html("");

                // Grab ID of new theme element
                var theme_element_id = data.d.theme_element_id;
                var datatype_id = data.d.datatype_id;

                // Need slightly different behavior based on whether this is adding to the top-level
                //  datatype or a descendant...
                var fieldarea = null;
                if ( containing_theme_element_id == 0 ) {
                    // This is the top-level, so there should only be one element matching
                    //  #FieldArea_<datatype_id>
                    fieldarea = $("#FieldArea_" + datatype_id);
                    // console.log('adding theme_element to top-level datatype...ODRTheme_AddThemeElement() target fieldarea', fieldarea);
                }
                else {
                    // This is a descendant, so there could be multiple elements matching
                    //  #FieldArea_<datatype_id>...need to use containing_theme_element_id to get
                    //  the right one
                    fieldarea = $("#ThemeElement_" + containing_theme_element_id).find("#FieldArea_" + datatype_id);
                    // console.log('adding theme_element to descendant datatype inside theme_element ' + containing_theme_element_id + '...ODRTheme_AddThemeElement() target fieldarea', fieldarea);
                }

                // The server has returned HTML for a blank theme_element...when appended,
                //  the theme_element_properties array will be updated
                $(fieldarea).append(data.d.html);

                // Ensure the theme thinks the new theme_element is at the end of the list
                SaveThemeElementOrder(fieldarea);

                // Init the page
                ODRTheme_InitPage();

                // Show the element
                ScrollHighlight("#ThemeElement_" + theme_element_id);
                // console.log('after adding theme_element ' + theme_element_id + ':', theme_element_properties);

                // Run the callback
                callback(theme_element_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Deletes the given theme_element.
     *
     * @param {number} theme_element_id
     */
    function ODRTheme_DeleteThemeElement(theme_element_id) {
        // Don't allow deletion of a theme element that has datafields or a child/linked datatype attached to it
        // if ( $(this).hasClass('fa-muted') )
        // return;

        var url = '{{ path('odr_design_delete_theme_element', { 'theme_element_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += theme_element_id;
        // alert(url);  return;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function () {
                // Remove theme element from page
                $("#ThemeElement_" + theme_element_id).fadeOut('slow').remove();

                // Update the sidebar so it no longer references the now-deleted theme element
                ODRTheme_ResetToolSet();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function (jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Loads the properties form for the given theme_element.
     *
     * This function is called by setupResizeable() in ODRAdminBundle:DisplayTemplate:functions.js.twig
     *
     * @param {number} theme_element_id
     */
    function LoadThemeElementForm(theme_element_id) {
        var url = "{{ path('odr_design_get_theme_element_properties', {'theme_element_id': 0}) }}";
        url = url.substr(0, url.length-1);
        url += theme_element_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data) {
                $("#ThemeDesignForm").html(data.d);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function (jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Loads the properties form for the given theme_datafield.
     *
     * This function is called by setupResizeable() in ODRAdminBundle:DisplayTemplate:functions.js.twig
     *
     * @param {number} theme_element_id
     * @param {number} datafield_id
     */
    function LoadThemeDatafieldForm(theme_element_id, datafield_id) {
        // console.log ('LoadThemeDatafieldForm() called with datafield: ' + datafield_id + ' theme_element: ' + theme_element_id);

        // Delay the loading of this themeDatafield entry until after any call to SaveDatafieldOrder()
        //  is completed
        var key = datafield_id + '_' + theme_element_id;
        if ( load_themeDatafield_delay[key] !== undefined && load_themeDatafield_delay[key] !== null ) {
            // console.log('LoadThemeDatafieldForm() delay');
            setTimeout(function() {
                LoadThemeDatafieldForm(theme_element_id, datafield_id)
            }, 500);
            return;
        }

        var url = "{{ path('odr_design_load_theme_datafield', {'theme_element_id': 0, 'datafield_id': 0}) }}";
        url = url.substr(0, url.length-3);
        url += theme_element_id + "/" + datafield_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data) {
                $("#ThemeDatafieldDesignForm").html(data.d);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function (jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Requests a new version of the HTML for an entire theme element from the server.
     *
     * @param {number} theme_element_id
     */
    function ODRTheme_ReloadThemeElement(theme_element_id) {
        var url = '{{ path('odr_theme_reload_theme_element', { 'theme_element_id': 0 }) }}';
        url = url.substring(0, url.length-1);
        url += theme_element_id;

        var append = true;
        var theme_element = $("#ThemeElement_" + theme_element_id);
        var element = $(theme_element).prev();
        if ( $(element).attr('class') === undefined ) {
            append = false;
            element = $(theme_element).parent();
        }

        // Create a loading div to block off the datafield?
        ODRTheme_InsertLoadingDiv(theme_element);

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: 'json',
            success: function(data) {
                // Remove old theme element
                $(theme_element).fadeOut();
                $(theme_element).remove();

                // Insert new html
                if (append)
                    $(element).after(data.d.html);
                else
                    $(element).prepend(data.d.html);

                // If the theme element is usually hidden, but the user is displaying hidden stuff...
                if ( $("#ODRThemeShowHidden").is(':checked') && data.d.theme_element_hidden == 1 ) {
                    // ...then make the hidden theme element visible
                    $(".ODRThemeHiddenElement").addClass("ODRThemeVisibleHiddenElement").removeClass("ODRThemeHiddenElement");
                }

                ODRTheme_InitPage();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Covers the requested HTML element with an overlay div so click events don't work on it.
     *
     * @param {HTMLElement} target_div
     */
    function ODRTheme_InsertLoadingDiv(target_div) {
        // Need dimensions of parent div...
        var height = $(target_div).css('height');
        var width = $(target_div).css('width');

        var loading_div_id = $(target_div).attr('id') + '_loading_div';

        // Create a loading div
        $(target_div).prepend("<div id=\"" + loading_div_id + "\" class=\"ODROverlayDiv ODRReloadDiv\"><strong>Loading...</strong></div>");

        // Apply dimensions of parent div to loading div
        $("#" + loading_div_id).css({"height": height, "line-height": height, "width": width});
    }

    /**
     * Removes an overlay div from the requested HTML element.
     *
     * @param {HTMLElement} target_div
     */
    function ODRTheme_RemoveLoadingDiv(target_div) {
        // Locate loading div...
        var loading_div_id = $(target_div).attr('id') + '_loading_div';
        var loading_div = $("#" + loading_div_id);

        if ( $(loading_div).length > 0 )
            $(loading_div).remove();
    }

    /**
     * Not strictly necessary to have this off in its own function, but it makes more sense this way.
     */
    function ODRTheme_setupIntroJS() {
        // Setup IntroJS Walkthrough
        $('#ODRHelpButton')
            .attr('data-step', '1')
            .attr('data-intro', 'Welcome to the ODR Help System.  This system will guide you through the features of this page.<br><br>For quicker navigation, use your left and right arrow keys to go through the tutorial.');

        $('#ThemePropertiesForm')
            .attr('data-step', '2')
            .attr('data-intro', 'You can change the name and description of a layout here, to make it easier to find later on.');
        $('#UpdateThemeForm_isTableTheme').parent()
            .attr('data-step', '3')
            .attr('data-intro', 'This checkbox controls whether the layout is rendered "normally", or as a "table".');
        $(".ODRReturn")
            .attr('data-step', '4')
            .attr('data-intro', "When you're finished making changes, click here to return to the previous search results page.<br><br>Changes made here will not affect the database's master layout.");

        // Find the first visible theme element
        var theme_element_handle = $(".ODRThemeElementHandle:visible").first();
        $(theme_element_handle)
            .attr('data-step', '5')
            .attr('data-position', 'top')
            .attr('data-intro', 'Clicking on this icon selects a group box, allowing you to move it to a different location on the page.<br><br>The green bars to the middle right of the selection allow you to resize the group box, by clicking there and dragging left or right.');
{# Unfortunately, since the drag handles are dynamically added after the element is clicked, introJS can't target them
        $(theme_element_handle).parent().find('.ODRDragHandle').first()
            .attr('data-step', '6')
            .attr('data-intro', 'You can resize the group box by clicking here and dragging to the left or right.');
#}

        // Find the first visible datafield in the first visible theme element
        var theme_datafield = $(theme_element_handle).parent().find('.ODRDataField').first();
        $(theme_datafield)
            .attr('data-step', '7')
            .attr('data-position', 'top')
            .attr('data-intro', 'Clicking anywhere inside a field selects it, allowing you to resize it in the same manner as if you had selected a group box.<br><br>You can move the field by clicking and dragging the green bars in the center of the field.');
{# Unfortunately, since the drag handles are dynamically added after the element is clicked, introJS can't target them
        $(theme_datafield).find('.ODRDragHandle').first()
            .attr('data-step', '8')
            .attr('data-intro', 'Fields are resized the same way as group boxes....click here and drag to the left or right.');
#}

        $('#ODRDatatype_visibleTE')
            .attr('data-step', '9')
            .attr('data-intro', 'The currently selected group box or field can be hidden by clicking this label.');
        $("#ODRThemeShowHidden")
            .attr('data-step', '10')
            .attr('data-intro', 'Checking this box will toggle showing any previously hidden group boxes or fields on the page.<br><br>When active, group boxes and fields that are normally hidden are instead displayed with a bright red outline.');

        $('.ODRDatatypeProperties:visible').first()
            .attr('data-step', '11')
            .attr('data-intro', "Clicking on the header for a database will bring up several options to change how its contents are displayed.");
        $('#ODRDatatype_addTE')
            .attr('data-step', '12')
            .attr('data-intro', 'You can click here to add another group box to the currently selected database, if you want to organize the fields differently.');
        $("#ThemeDesignForm")
            .attr('data-step', '13')
            .attr('data-intro', "Clicking on a header for a child or linked database will also show an option to change how they're displayed in the search results list.");
    }

    /**
     * Begins the introJS tour for ODR's derivative theme designer page.
     */
    function ODRTheme_startIntroJS() {
        introJs().setOption("disableInteraction", true)
            .onbeforechange(function(elem) {
                if ( $(elem).hasClass('ODRDatatypeProperties')
                    || $(elem).hasClass('ODRThemeElementHandle')
                    || $(elem).hasClass('ODRDataField')
                ) {
                    // Since introJS was set up after these elements were initialized, we can click
                    //  them when reaching those points
                    $(elem).trigger('click');
                }

                if ( $(elem).attr('id') === 'ODRThemeShowHidden' && !$('#ODRThemeShowHidden').is(':checked') ) {
                    // Want to show any hidden themeElements/fields when reaching the point where
                    //  introJS mentions it
                    $(elem).trigger('click');
                }
                else if ( $(elem).attr('id') === 'ThemeDesignForm' ) {
                    // Attempt to trigger a load of a child/linked datatype so something shows up
                    //  in this element, if possible
                    $(".ODRDataType.ODRChildDatatype").first().children('.ODRDatatypeProperties').first().trigger('click');
                }
            })
            .onbeforeexit(function() {
                // If the checkbox to show hidden theme elements and fields is checked, then uncheck
                //  it when introJS exits
                if ( $('#ODRThemeShowHidden').is(':checked') )
                    $("#ODRThemeShowHidden").trigger('click');

                // Also ensure #ThemeDesignForm is empty by selecting the top-level datatype again
                $(".ODRDataType").not('.ODRChildDataType').first().children('.ODRDatatypeProperties').first().trigger('click');
            })
            .start();
    }
</script>

{% endspaceless %}
