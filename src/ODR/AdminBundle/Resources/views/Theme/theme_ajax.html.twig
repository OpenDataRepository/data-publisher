{% spaceless %}

    {% set datatype = datatype_array[initial_datatype_id] %}

    <h1 class="no-margin-top-phone">
        <span>Search Template Design &raquo; {{ datatype.dataTypeMeta.shortName }}</span>
    </h1>

    {%  if datatype.setup_step != "complete" and display_mode == "wizard" %}
        <ul id="wizardStatus">
            <li class="completed">Step 1. <span class="wizardStatusText">Choose a template.</span></li>
            <li class="completed">Step 2. <span class="wizardStatusText">Database information.</span></li>
            <li class="completed">Step 3. <span class="wizardStatusText">Add or change fields.</span></li>
            <li class="current">Step 4. <span class="wizardStatusText">Setup search templates.</span></li>
            <!-- <li>Step 4. <span class="wizardStatusText">Book/Order repair</span></li> -->
        </ul>

        <div class="ODRContentWrapper pure-u-1">
            <div class="ODRThemeElement pure-u-1">
                <div class="ODRInnerBox pure-u-1">
                    <h3 class="ODRHeader"><i class="fa fa-md fa-info-circle fa-fw"></i> Configure search view.</h3>
                    <div class="ODRBodyContent">
                        <p>
                            Click a field to bring up its configurable properties.  To view hidden fields, toggle the "show hidden elements" checkbox below.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    {% endif %}

    {% if display_mode == "edit" %}
        <div class="ODRContentWrapper pure-u-1">
            <div class="ODRThemeElement pure-u-1">
                <div class="ODRInnerBox pure-u-1">
                    <h3 class="ODRHeader"><i class="fa fa-md fa-info-circle fa-fw"></i> Edit View</h3>
                    <div class="ODRBodyContent pure-u-1">
                        <p>
                            Edit the view and then click the "return to previous page" button below to see
                            the edited view in action.
                        </p>
                        <p>
                            Click a field to bring up its configurable properties.  To view hidden fields, toggle the "show hidden elements" checkbox below.
                        </p>
                        <p>Edit the name and description of the view below:</p>
                        {% include 'ODRAdminBundle:Theme:theme_properties_form.html.twig' with {
                            'datatype': theme_datatype,
                            'theme': theme,
                            'theme_form': theme_form,

                            'is_short_form': is_short_form,
                        } %}
                        <div>
                            <button type="button" class="pure-button pure-button-primary ODRReturn">Return to previous page</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    {% endif %}

    <div id="ThemeDesignWrapper">
        <div id="ThemeLeftColumn" class="ODRContentWrapper">
            <div class="ODRThemeElement">
                <div class="ODRInnerBox">
                    <h3 class="ODRHeader">Theme Styling</h3>
                    <div class="ODRThemeDesignSettings">
                        <div>
                            <label for="ODRThemeShowHidden">
                                Show Hidden Elements:
                            </label>
                            <input type="checkbox" value="0" id="ODRThemeShowHidden" name="ODRThemeShowHidden">
                        </div>
{#
                        <div>
                            <button id="ODRCheckSourceTheme" class="pure-button pure-button-active" rel="{{ theme.id }}">
                                Sync with Source Theme
                            </button>
                        </div>
#}
                    </div>
                    <div class="pure-u-1"></div>

                    <div class="pure-u-24-24"><h3 class="ODRHeader">Element Settings</h3></div>
                    <div id="ThemeDesignForm"></div>

                    <div id="ThemeDesignKey">
                        <div class="pure-u-24-24"><h3 class="ODRHeader">Design Key</h3></div>
                        <div class="pure-u-24-24"></div>

                        <div class="pure-u-2-24"></div>
                        <div class="pure-u-20-24">Examples of hidden elements are show below.  Elements visible to users have no additional styling.</div>
                        <div class="pure-u-2-24"></div>

                        <div class="pure-u-24-24"></div>

                        <div class="pure-u-2-24"></div>
                        <div class="ODRThemeElement pure-u-20-24">
                            <div class="ODRInnerBox ui-sortable">
                                <div class="ODRDataType ODRLinkedType ODRAccordionWrapper ODRFormAccordion pure-u-1">
                                    <h3 id="FieldHeading" class="ui-accordion-header ui-helper-reset ui-state-default ui-state-active ui-corner-top ODRThemeVisibleHiddenElement" role="tab" aria-expanded="true" aria-selected="true" tabindex="0">
                                        <span class="Pad10">Hidden Heading</span>
                                    </h3>
                                </div>
                            </div>
                        </div>
                        <div class="pure-u-2-24"></div>

                        <div class="pure-u-2-24"></div>
                        <div id="HiddenDiv" class="ODRThemeElement pure-u-20-24 ODRThemeVisibleHiddenElement">
                            <div class="ODRInnerBox ui-sortable">
                                <div class="ODRDataType ODRLinkedType ODRAccordionWrapper ODRFormAccordion pure-u-1">
                                    <span class="Pad10">Hidden Section</span>
                                </div>
                            </div>
                        </div>
                        <div class="pure-u-2-24"></div>

                        <div class="pure-u-2-24"></div>
                        <div id="ExampleElement" class="ODRDataField pure-u-20-24 ui-resizable ODRThemeVisibleHiddenElement" data-intro="Drag any field in front or behind any other field to re-order the fields.">
                            <form class="pure-u-1">
                            <fieldset>
                            <label for="ExampleInput" class="ODRFieldLabel pure-u-1">
                                <span class="Pad10">Hidden Field</span>
                            </label>
                            <div class="ODRPseudoField" id="ExampleInput"></div>
                            </fieldset>
                            </form>
                        </div>
                        <div class="pure-u-2-24"></div>
                    </div>
                </div>
            </div>
        </div>

        <div id="ThemeDesignArea">
            {% include 'ODRAdminBundle:Theme:theme_area.html.twig' with {
                'datatype_array': datatype_array,
                'theme_array': theme_array,

                'initial_datatype_id': initial_datatype_id,
                'initial_theme_id': theme.id,

                'datatype_permissions': datatype_permissions,
                'is_datatype_admin': is_datatype_admin,
            } %}
        </div>
    </div>

    <script>
        function notifySaved() {
            $.jGrowl('SAVED');
        }

        // After DOM Ready
        jQuery(function() {

            initDesignScrollHandler($("#ThemeLeftColumn").offset().top);

            // Setup IntroJS Walkthrough
            jQuery("#ExampleInput")
                .attr('data-step', "1")
                .attr('data-intro', "Hover over the lower right-hand corner of a field to start resizing a field.  A drag arrow will appear and you can drag left or right to resize.");
            jQuery("#FieldHeading")
                .attr('data-step', "2")
                .attr('data-intro', "Click any field or heading to display user-configurable options in the Theme Styling panel.");
            jQuery("#ThemeDesignForm")
                .attr('data-step', "3")
                .attr('data-intro', "User-configurable options for fields and headers will appear in this area.");
            jQuery("#ExampleElement")
                .attr('data-step', "4")
                .attr('data-intro', "Drag any field in front or behind any other field to re-order the fields.");
            jQuery("#ThemeDesignKey")
                .attr('data-step', "5")
                .attr('data-intro', "Hidden fields or headings are highlighted to show their visibility state.");

            // Initialize the help button
            jQuery("#ODRHelpButton").unbind('click').click(function() {
                introJs().start();
            });

            // Initialize the theme options
            jQuery("#ODRThemeShowHidden")
                .attr('data-step', "6") // Don't really like putting this separate
                .attr('data-intro', "Visiblity of hidden elements can be changed using this toggle.")
                .unbind('click').click(function() {
                if (jQuery(this).is(":checked")) {
                    jQuery(".ODRThemeHiddenElement")
                        .addClass("ODRThemeVisibleHiddenElement")
                        .removeClass("ODRThemeHiddenElement")
                }
                else {
                    jQuery(".ODRThemeVisibleHiddenElement")
                        .addClass("ODRThemeHiddenElement")
                        .removeClass("ODRThemeVisibleHiddenElement")
                }
            });

            $("#ThemePropertiesForm input:text").unbind('keyup').keyup(function() {
                window.clearInterval(interval);
                interval = window.setInterval(
                    "saveThemeMeta()",
                    3000
                );
            });
            $("#ThemePropertiesForm textarea").unbind('keyup').keyup(function() {
                window.clearInterval(interval);
                interval = window.setInterval(
                    "saveThemeMeta()",
                    3000
                );
            });
            $("#ThemePropertiesForm input:checkbox").unbind('change').change(function() {
                window.clearInterval(interval);
                interval = window.setInterval(
                    "saveThemeMeta()",
                    1000
                );
            });

            if ( $("#UpdateThemeForm_isTableTheme").is(':checked') ) {
                // Table themes can't use anything from child/linked datatypes at the moment
                // Hide all theme elements containing them so that the "Show Hidden Elements"
                //  checkbox can't show them
                $(".ODRChildDatatype").parent().parent().addClass('ODRHidden');
            }
{#
            $("#ODRCheckSourceTheme").unbind('click').click(function() {
                var theme_id = $(this).attr('rel');

                var url = '{{ path('odr_sync_source_theme', {'theme_id': 0}) }}';
                url = url.substring(0, (url.length - 1));
                url += theme_id;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function(data) {
                        // Reload page
                        if (data.d.changes_made == true)
                            window.location.reload();
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function(jqXHR) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                        }
                    }
                });
            });
#}
            $(".ODRReturn").unbind('click').click(function() {
{% if not is_short_form %}
                {# Don't need to change any value in the URL #}
                window.history.back();
{% elseif search_key != '' %}
                {# Want to render the search results list with the theme that was just being modified #}
                var url = '{{ path('odr_search_render', { 'search_theme_id': 0, 'search_key': '' }) }}';
                url = url.substr(0, url.length-2);
                url += {{ theme.id }} + '/' + '{{ search_key }}' + '/1';

                UpdateURL(url);
{% else %}
                {# For when there's no search key for some reason... #}
                var url = '{{ path('odr_default_search_render', { 'datatype_id': 0 }) }}';
                url = url.substr(0, url.length-1);
                url += {{ initial_datatype_id }};

                UpdateURL(url);
{% endif %}
            });

            initPage();
        });

        function initPage() {
            // Initialize DataFields
            jQuery("#ThemeDesignArea .ODRThemeElement .ODRInnerBox .ODRDataField").unbind('click').click(function() {
                var datafield_id = jQuery(this).attr('id').replace('Field_', '');
                var theme_element_id = jQuery(this).parent().parent().attr('id').replace('ThemeElement_', '');

                LoadDatafieldForm(theme_element_id, datafield_id);
            });

            // Initialize DataType Headers
            jQuery("#ThemeDesignArea .ODRThemeElement .ODRInnerBox .ODRDataType h3").unbind('click').click(function() {
                var datatype_id = jQuery(this).parent().attr('id').replace('DataType_', '');
                var theme_element_id = jQuery(this).parent().parent().parent().attr('id').replace('ThemeElement_', '');

                LoadDatatypeForm(theme_element_id, datatype_id);
            });

            $(".ODRThemeElementVisible").unbind('click').click(function() {
                var id_data = $(this).attr('id').split(/_/);
                var theme_element_id = id_data[1];

                LoadThemeElementForm(theme_element_id);
            });

            // Setup resizable for all ThemeElements
            jQuery(".ODRThemeElement").each(function() {
                // Only attach this event to theme elements in the design area
                if ( $(this).parents(".ODRFieldArea").length === 0 )
                    return;

                // If for some reason this theme element already has a resizable instance, destroy it to prevent duplicate saves
                if ( $(this).resizable('instance') !== undefined )
                    $(this).resizable('destroy');

                var theme_element_id;

                $(this).resizable({
                    handles: "e",   // Only permit resizing width, and only from the right of the ThemeElement
                    minHeight: $(this).height(),
                    maxHeight: $(this).height(),
                    grid: 41.5,  // 996 width / 24 units
                    start: function( event, ui) {
                        // Color while dragging
                        theme_element_id = ui.originalElement.attr('id').replace('ThemeElement_', '');

                        LoadThemeElementForm(theme_element_id);
                    },
                    // After resizable stops
                    stop: function( event, ui ) {
                        // Refactor all widths for all elements in array to be f/24
                        var total_width = ui.originalElement.parent().width();
                        var width = ui.originalElement.width();
                        var pct = width / total_width * 100;

                        var u_factor = pct/4.16667;
                        if (u_factor < 1)
                            u_factor = 1;
                        else if (u_factor > 24)
                            u_factor = 24;
                        else
                            u_factor = Math.round(u_factor);

                        var prefix = "pure-u";
                        var classes = ui.originalElement.attr('class').split(" ").filter(function(c) {
                            return c.lastIndexOf(prefix, 0) !== 0;
                        });
                        ui.originalElement.attr('class', classes.join(" ").trim());

                        // Get new width and refactor to f/24
                        // Remove inline width style.
                        ui.originalElement.attr('style', function(i, style) {
                            return style.replace(/width[^;]+;?/g, '');
                        });

                        // default is always pure-u-1
                        ui.originalElement.addClass('pure-u-1');
                        ui.originalElement.addClass('pure-u-md-' + u_factor + '-24');
                        ui.originalElement.addClass('pure-u-xl-' + u_factor + '-24');

                        // Save new U Factors to DB via Get Request
                        jQuery("#UpdateThemeElementForm_cssWidthMed").val(u_factor + "-24");
                        jQuery("#UpdateThemeElementForm_cssWidthXL").val(u_factor + "-24");
                        SaveThemeElementProperties(theme_element_id);
                    }
                });
            });

            // Setup resizable for all DataFields
            jQuery(".ODRThemeElement .ODRInnerBox .ODRDataField").each(function() {
                // Only attach this event to datafields in the design area
                if ( $(this).parents(".ODRFieldArea").length === 0 )
                    return;

                // If for some reason this datafield already has a resizable instance, destroy it to prevent duplicate saves
                if ( $(this).resizable('instance') !== undefined )
                    $(this).resizable('destroy');

                var datafield_id;
                var theme_element_id;

                $( this ).resizable({
                    handles: "e",   // Only permit resizing width, and only from the right of the Datafield
                    minHeight: $(this).height(),
                    maxHeight: $(this).height(),
                    grid: 41.5,  // 996 width / 24 units
                    // After resizable stops
                    start: function( event, ui) {
                        datafield_id = ui.originalElement.attr('id').replace('Field_', '');
                        theme_element_id = ui.originalElement.parent().parent().attr('id').replace('ThemeElement_', '');

                        LoadDatafieldForm(theme_element_id, datafield_id);
                    },
                    stop: function( event, ui ) {
                        // Refactor all widths for all elements in array to be f/24
                        var total_width = ui.originalElement.parent().parent().width();
                        var width = ui.originalElement.width();
                        var pct = width / total_width * 100;

                        var u_factor = pct/4.16667;
                        if (u_factor < 1)
                            u_factor = 1;
                        else if (u_factor > 24)
                            u_factor = 24;
                        else
                            u_factor = Math.round(u_factor);

                        var prefix = "pure-u";
                        var classes = ui.originalElement.attr('class').split(" ").filter(function(c) {
                            return c.lastIndexOf(prefix, 0) !== 0;
                        });
                        ui.originalElement.attr('class', classes.join(" ").trim());

                        // Get new width and refactor to f/24
                        // Remove inline width style.
                        ui.originalElement.attr('style', function(i, style) {
                            return style.replace(/width[^;]+;?/g, '');
                        });

                        // default is always pure-u-1
                        ui.originalElement.addClass('pure-u-1');
                        ui.originalElement.addClass('pure-u-md-' + u_factor + '-24');
                        ui.originalElement.addClass('pure-u-xl-' + u_factor + '-24');

                        // Save new U Factors to DB via Get Request
                        jQuery("#UpdateThemeDatafieldForm_cssWidthMed").val(u_factor + "-24");
                        jQuery("#UpdateThemeDatafieldForm_cssWidthXL").val(u_factor + "-24");
                        SaveThemeDatafieldProperties(theme_element_id, datafield_id);
                    }
                });
            });

            // Setup sortable for all ThemeElements
            var starting_fieldarea = null;
            $(".ODRFieldArea").each(function() {
                // If for some reason this theme element already has a sortable instance, destroy it to prevent duplicate saves
                if ( $(this).sortable('instance') !== undefined )
                    $(this).sortable('destroy');

                $(this).sortable({
                    placeholder: "ui-state-highlight",
                    connectWith: ".ODRFieldArea",
                    start: function (event, ui) {
                        // Store where the theme element started
                        starting_fieldarea = $(ui.helper).parent().attr('id');

                        // Style the placeholder to more closely match the datafield being drug around
                        $(ui.placeholder).addClass($(ui.helper).attr('class'));
                        $(ui.placeholder).css('height', $(ui.helper).height());
                        $(ui.placeholder).css('width', $(ui.helper).width() * 0.95);
                    },
                    stop: function (event, ui) {
                        // Grab where it ended
                        var ending_fieldarea = $(ui.item).parent().attr('id');

                        // If the theme element ended up in a different fieldarea, don't save the change and revert the layout
                        if (starting_fieldarea == ending_fieldarea)
                            SaveThemeElementOrder($(ui.item).parent());
                        else
                            $(".ODRFieldArea").sortable('cancel');

                        // Unhide the object that was being dragged around
                        $(ui.item).show();
                        $(ui.item).removeAttr('style');
                        starting_fieldarea = null;
                    }
                });
            });
            $(".ODRFieldArea").disableSelection();

            // Setup sortable for all DataFields
            jQuery(".ODRThemeElement .ODRInnerBox").each(function() {
                // Only attach this event to datafields in the design area
                if ( $(this).parents(".ODRFieldArea").length === 0 )
                    return;

                // If for some reason this datafield already has a sortable instance, destroy it to prevent duplicate saves
                if ( $(this).sortable('instance') !== undefined )
                    $(this).sortable('destroy');

                $(this).sortable({
                    items: "> .ODRDataField",   // Only attach the event to datafields within the ODRInnerBox
                    placeholder: "ui-state-highlight",
                    connectWith: ".ODRInnerBox",
                    dropOnEmpty: true,
                    start: function( event, ui ) {
                        // Store where the datafield started
                        starting_theme_element = $(ui.helper).parent().parent().attr('id');
                        starting_fieldarea = $(ui.helper).parent().parent().parent().attr('id');

                        // Style the placeholder to more closely match the datafield being drug around
                        $(ui.placeholder).addClass( $(ui.helper).attr('class') );
                        $(ui.placeholder).css( 'height', $(ui.helper).height() );
                        $(ui.placeholder).css( 'width', $(ui.helper).width() * 0.95 );
                    },
                    stop: function( event, ui ) {
                        // Grab where the datafield ended
                        var ending_theme_element = $(ui.item).parent().parent().attr('id');
                        var ending_fieldarea = $(ui.item).parent().parent().parent().attr('id');

                        // If the datafield ended up in the same fieldarea...
                        if (starting_fieldarea == ending_fieldarea)
                        // Just need to save the destination theme element
                            SaveDatafieldOrder($(ui.item).parent(), starting_theme_element, ending_theme_element);
                        else
                        // ...if not, don't save the change and revert the layout
                            $(this).sortable("cancel");

                        // Unhide the object that was being dragged around
                        $(ui.item).show();

                        // jQuery Sortable attaches a display: block style to these elements...get rid of it
                        $(ui.item).removeAttr('style');

                        // Reset for the next sortable call
                        starting_theme_element = null;
                        starting_fieldarea = null;
                        $(ui.placeholder).removeAttr('css');
                    }
                });
            });

            // Don't want to call disabledSelection() on the object properties panel
            $("#content").find(".ODRInnerBox").disableSelection();

            $(".ODRDeleteThemeElement").unbind('click').click(function() {
                // Don't allow deletion of a theme element that has datafields or a child/linked datatype attached to it
                if ( $(this).hasClass('fa-muted') )
                    return;

                var theme_element_id_data = $(this).parent().parent().parent().parent().attr('id').split(/_/);
                var theme_element_id = theme_element_id_data[1];

                if (confirm("Are you sure you want to delete this theme element?")) {
                    var url = '{{ path('odr_design_delete_theme_element', { 'theme_element_id': 0 } ) }}';
                    url = url.substring(0, (url.length - 1));
                    url += theme_element_id;

                    $.ajax({
                        cache: false,
                        type: 'GET',
                        url: url,
                        dataType: "json",
                        success: function(data) {
                            // Remove theme element from page
                            $("#ThemeElement_" + theme_element_id).remove();

                            // No need to update theme element property icons, since it no longer exists
                            // Also don't need to update order of theme elements
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            // Don't need to do anything specific on an error
                        },
                        complete: function(jqXHR) {
                            // Get the xdebugToken from response headers
                            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                            // If the Sfjs object exists
                            if (typeof Sfjs !== "undefined") {
                                // Grab the toolbar element
                                var currentElement = $('.sf-toolbar')[0];

                                // Load the data of the given xdebug token into the current toolbar wrapper
                                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                            }
                        }
                    });
                }
            });

            $(".ODRDatatypeProperties").unbind('click').click(function() {
                // Grab the id of the Datatype to load
                var datatype_id = $(this).attr('rel');

                // Get the datatype tools
                var datatype_tools = $("#DataTypeTools_" + datatype_id).html();

                $("#ThemeDesignForm").prepend(datatype_tools).fadeIn('fast');
                initDatatypeProperties();
            });
        }

        function initDatatypeProperties() {

            $(".ODRAddThemeElement").unbind('click').click(function() {
                // I think this option is always available, but just incase...
                if ( $(this).hasClass('fa-muted') )
                    return;

                var theme_id = $(this).attr('rel');

                var url = '{{ path('odr_design_add_theme_element', { 'theme_id': 0 }) }}';
                url = url.substring(0, url.length-1) + theme_id;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function(data) {
                        // Clear object properties panel
                        $("#ThemeDesignForm").html("");

                        // Grab ID of new theme element
                        var theme_element_id = data.d.theme_element_id;
                        var datatype_id = data.d.datatype_id;

                        // Create a fake theme element and force a save of theme element order
                        $("#FieldArea_" + datatype_id).prepend("<div id=\"ThemeElement_" + theme_element_id + "\" class=\"ODRThemeElement pure-u-1\"></div>");
                        SaveThemeElementOrder("#FieldArea_" + datatype_id);

                        // Reload to get actual theme element contents
                        ReloadThemeElement(theme_element_id);
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function(jqXHR) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }
                    }
                });
            });
        }

        // This is referencing ThemeController...
        function SaveThemeElementProperties(theme_element_id) {
            var url = '{{ path('odr_design_get_theme_element_properties', { 'theme_element_id': 0 } ) }}';
            url = url.substring(0, (url.length - 1));
            url += theme_element_id;

            var form_data = $("#ThemeElementPropertiesForm_" + theme_element_id).serialize();
            $.ajax({
                type: 'POST',
                url: url,
                data: form_data,
                dataType: "json",
                success: function(data, textStatus, jqXHR) {
                    notifySaved();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }


        // This is referencing ThemeController...
        function SaveThemeDatafieldProperties(theme_element_id, datafield_id) {

            var url = '{{ path('odr_design_save_theme_datafield', {'theme_element_id': 0, 'datafield_id': 0}) }}';
            url = url.substring(0, url.length-3);
            url += theme_element_id + '/' + datafield_id;

            var post_data = $("#ThemeDatafieldPropertiesForm_" + theme_element_id + "_" + datafield_id).serialize();
            $.ajax({
                type: 'POST',
                url: url,
                dataType: "json",
                data: post_data,
                success: function(data) {
                    notifySaved();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {

                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }


        // This is referencing ThemeController...
        function SaveThemeElementOrder(container) {

            var i = 0;
            var theme_element_ids = {};
            $(container).children(".ODRThemeElement").each(function() {
                var id_data = $(this).attr('id').split(/_/);
                theme_element_ids[i] = id_data[1];
                i++;
            });

            var url = '{{ path('odr_design_save_theme_element_order') }}';

            $.ajax({
                cache: false,
                type: 'POST',
                data: theme_element_ids,
                url: url,
                dataType: "json",
                success: function(data) {
                    notifySaved();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {

                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }


        // This is referencing ThemeController...
        function SaveDatafieldOrder(container, initial_theme_element_id, ending_theme_element_id) {

            var i = 0;
            var datafield_ids = {};
            $(container).children(".ODRDataField").each(function() {
                var id_data = $(this).attr('id').split(/_/);
                datafield_ids[i] = id_data[1];
                i++;
            });

            // Get the id numbers of the passed-in theme elements
            var theme_element = initial_theme_element_id.split(/_/);
            initial_theme_element_id = theme_element[1];
            theme_element = ending_theme_element_id.split(/_/);
            ending_theme_element_id = theme_element[1];

            // Theme ID
            var url = '{{ path('odr_design_save_datafield_order', {'initial_theme_element_id': 0, 'ending_theme_element_id' : 0} ) }}';
            url = url.substring(0, url.length-3);
            url += initial_theme_element_id + '/' + ending_theme_element_id;

            $.ajax({
                cache: false,
                type: 'POST',
                data: datafield_ids,
                url: url,
                dataType: "json",
                success: function(data) {
                    notifySaved();

                    // Don't reload a ThemeElement div unless a DataField got moved between different ThemeElements
                    if ( initial_theme_element_id != ending_theme_element_id ) {
                        // Reload starting ThemeElement if all datafields got moved out of it
                        if ( $("#ThemeElement_"+initial_theme_element_id).children(".ODRDataField").length == 0 ) {
                            ReloadThemeElement(initial_theme_element_id);

                            var icons = {"ODRAddChildtype": 1, "ODRLinkDatatype": 1, "ODRDeleteThemeElement": 1};
                            setThemeElementIcons(initial_theme_element_id, icons);
                        }

                        // Reload ending ThemeElement if it now posesses a single datafield (would have been empty before)
                        if ( $("#ThemeElement_"+ending_theme_element_id).children(".ODRDataField").length == 1 ) {

                            var icons = {"ODRAddChildtype": 0, "ODRLinkDatatype": 0, "ODRDeleteThemeElement": 0};
                            setThemeElementIcons(ending_theme_element_id, icons);
                        }
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {

                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }


        var interval = "";
        function saveThemeMeta() {
            // Clear the save interval for this specific datafield...interval itself is defined by the variable "SaveTimeout" in this file
            window.clearInterval(interval);

            var prop_form = $("#ThemePropertiesForm");
            jQuery.ajax({
                type: "POST",
                url: prop_form.attr('action'),
                data: prop_form.serialize(),
                dataType: 'json',
                success: function(data) {
                    notifySaved();

                    //
                    if ( $("#UpdateThemeForm_isTableTheme").is(':checked') ) {
                        // Table themes can't use anything from child/linked datatypes at the moment
                        // Hide all theme elements containing them so that the "Show Hidden Elements"
                        //  checkbox can't show them
                        $(".ODRChildDatatype").parent().parent().addClass('ODRHidden');
                    }
                    else {
                        // Search results themes that aren't tables can display child/linked datatypes
                        $(".ODRChildDatatype").parent().parent().removeClass('ODRHidden');
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }


        function LoadThemeElementForm(theme_element_id) {
            var url = "{{ path('odr_design_get_theme_element_properties', {'theme_element_id': 0}) }}";
            url = url.substr(0, url.length-1);
            $.getJSON(
                url + theme_element_id,
                function(data) {
                    $("#ThemeDesignForm").html(data.d);

                    // Save changes to the visibility
                    $("#UpdateThemeElementForm_hidden").unbind('change').change(function() {

                        if ($("#UpdateThemeElementForm_hidden").find(":selected").val() == 1) {
                            if ($("#ODRThemeShowHidden").is(":checked")) {
                                $("#ThemeElement_" + theme_element_id).addClass("ODRThemeVisibleHiddenElement");
                            }
                            else {
                                $("#ThemeElement_" + theme_element_id).addClass("ODRThemeHiddenElement");
                            }
                        }
                        else {
                            $("#ThemeElement_" + theme_element_id)
                                .removeClass("ODRThemeVisibleHiddenElement")
                                .removeClass("ODRThemeHiddenElement")
                        }

                        // Submit State Change
                        SaveThemeElementProperties(theme_element_id);
                    });
                }
            )
        }


        function SubmitThemeDesignForm() {
            jQuery.ajax({
                type: "POST",
                url: jQuery("#ThemeDesignForm form").attr('action'),
                data: jQuery("#ThemeDesignForm form").serialize(),
                dataType: 'json',
                success: function(data) {
//                    console.log(data)
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }

        // Display or hide data type (this is a theme element change
        function LoadDatatypeForm(theme_element_id, datatype_id) {
            var url = "{{ path('odr_design_load_theme_datatype', {'theme_element_id': 0, 'datatype_id': 0}) }}";
            url = url.substr(0, url.length-3);

            jQuery.getJSON(
                url + theme_element_id + "/" + datatype_id,
                function(data) {
                    jQuery("#ThemeDesignForm").html(data.d);

                    // Save changes to the visibility
                    jQuery("#UpdateThemeDatatypeForm_hidden").unbind('change').change(function() {
                        var datatype_id = jQuery("#UpdateThemeDatatypeForm_dataType").val();

                        if (jQuery("#UpdateThemeDatatypeForm_hidden").find(":selected").val() == 1) {
                            if(jQuery("#ODRThemeShowHidden").is(":checked")) {
                                jQuery("#DataType_" + datatype_id).parent().parent().addClass("ODRThemeVisibleHiddenElement")
                            }
                            else {
                                jQuery("#DataType_" + datatype_id).parent().parent().addClass("ODRThemeHiddenElement")
                            }
                        }
                        else {
                            jQuery("#DataType_" + datatype_id).parent().parent()
                                .removeClass("ODRThemeVisibleHiddenElement")
                                .removeClass("ODRThemeHiddenElement")
                        }

                        // Submit State Change
                        SubmitThemeDesignForm();
                    });

                    // Save changes to the display type
                    jQuery("#UpdateThemeDatatypeForm_display_type").unbind('change').change(function() {
                        // Don't need to modify visibility for this one
                        SubmitThemeDesignForm();
                    })
                }
            )
        }


        function LoadDatafieldForm(theme_element_id, datafield_id) {
            var url = "{{ path('odr_design_load_theme_datafield', {'theme_element_id': 0, 'datafield_id': 0}) }}";
            url = url.substr(0, url.length-3);
            jQuery.getJSON(
                url + theme_element_id + "/" + datafield_id,
                function(data) {
                    jQuery("#ThemeDesignForm").html(data.d)
                    jQuery("#UpdateThemeDatafieldForm_hidden").unbind('change')
                    jQuery("#UpdateThemeDatafieldForm_hidden").change(function() {
                        var datafield_id = jQuery("#UpdateThemeDatafieldForm_dataField").val()
                        if(jQuery("#UpdateThemeDatafieldForm_hidden").find(":selected").val() == 1) {
                            if(jQuery("#ODRThemeShowHidden").is(":checked")) {
                                jQuery("#Field_" + datafield_id).addClass("ODRThemeVisibleHiddenElement")
                            }
                            else {
                                jQuery("#Field_" + datafield_id).addClass("ODRThemeHiddenElement")
                            }
                        }
                        else {
                            jQuery("#Field_" + datafield_id)
                                .removeClass("ODRThemeVisibleHiddenElement")
                                .removeClass("ODRThemeHiddenElement")
                        }
                        // Submit State Change
                        SubmitThemeDesignForm()

                    })
                }
            )
        }


        function ReloadThemeElement(theme_element_id) {
            var url = '{{ path('odr_theme_reload_theme_element', { 'source_datatype_id': 0, 'theme_element_id': 0 }) }}';
            url = url.substring(0, url.length-3);
            url += {{ datatype.id }} + '/' + theme_element_id;

            var append = true;
            var theme_element = $("#ThemeElement_" + theme_element_id);
            var element = $(theme_element).prev();
            if ( $(element).attr('class') === undefined ) {
                append = false;
                element = $(theme_element).parent();
            }

            // Create a loading div to block off the datafield?
            insertLoadingDiv("ThemeElement_" + theme_element_id);

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: 'json',
                success: function(data) {
                    // Remove old theme element
                    $(theme_element).fadeOut();
                    $(theme_element).remove();

                    // Insert new html
                    if (append)
                        $(element).after(data.d.html);
                    else
                        $(element).prepend(data.d.html);

                    // If the theme element is usually hidden, but the user is displaying hidden stuff...
                    if ( $("#ODRThemeShowHidden").is(':checked') && data.d.theme_element_hidden == 1 )
                        // ...then make the hidden theme element visible
                        $(".ODRThemeHiddenElement").addClass("ODRThemeVisibleHiddenElement").removeClass("ODRThemeHiddenElement");

                    initPage();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {

                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }


        function insertLoadingDiv(parent_div_id) {
            // Need dimensions of parent div...
            var element = $("#" + parent_div_id);
            var height = $(element).css('height');
            var width = $(element).css('width');

            // Create a loading div
            $(element).prepend("<div id=\"" + parent_div_id + "_loading_div\" class=\"ODROverlayDiv ODRReloadDiv\"><strong>Loading...</strong></div>");

            // Apply dimensions of parent div to loading div
            $("#" + parent_div_id + "_loading_div").css({"height": height, "line-height": height, "width": width});
        }
    </script>

{% endspaceless %}
