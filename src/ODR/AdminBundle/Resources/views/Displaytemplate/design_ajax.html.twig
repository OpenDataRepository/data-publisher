{% spaceless %}

    {% set datatype = datatype_array[initial_datatype_id] %}
    {% set theme = theme_array[initial_theme_id] %}

    <!--suppress JSCheckFunctionSignatures -->
    <div class="ODRDesignHeader">
        <h1 class="ODRDesignTitle no-margin-top-phone">
            <span>Database Design &raquo; {{ datatype.dataTypeMeta.shortName }}</span>
        </h1>
        {%  if datatype.setup_step != "complete" %}
        {% if datatype.is_master_type == 1 %} {# Master Template Creation #}

        {% else %}
        {% include 'ODRAdminBundle:Displaytemplate:wizard.html.twig' with {
            'wizard_step': 3,
            'datatype_id': datatype.id,
            'edit_properties': false,
            'create_master': false,
            'master_templates': null,
            'master_type_id': 0,
        } %}
        {% endif %}
        {% else %}
        {# Database creation wizard is complete - menu for managing? #}
        {% include 'ODRAdminBundle:Displaytemplate:wizard.html.twig' with {
            'wizard_step': 3,
            'datatype_id': datatype.id,
            'edit_properties': false,
            'create_master': false,
            'master_templates': null,
            'master_type_id': 0,
        } %}
        {% endif %}

        <input type="hidden" id="has_datarecords" value="{{ has_datarecords }}" />
    </div>

    <div id="ThemeDesignWrapper">
        <div id="ThemeLeftColumn" class="ODRContentWrapper">
            <div class="ODRThemeElement">
                <div class="ODRInnerBox">
                    <h3 class="ODRHeader">Manage Design</h3>
                    <div class="ODRThemeDesignSettings">
                        <p>Click on an element of your design to manage its settings below.</p>
                        <div id="ODRDatatypeToolsBlock">
                            <p>
                                <a id="ODRDatatype_addTE">
                                    <i class="tooltip fa fa-edit ODRAddThemeElement"
                                        title="Add Group Box"
                                    ></i> <span class="link-text">Add Group Box</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRThemeElement_copyDF">
                                    <i class="tooltip fa fa-clone ODRCopyDatafield"
                                       title="Copy Field"
                                    ></i><span class="link-text"> Copy Field</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRThemeElement_addDF">
                                    <i class="tooltip fa fa-plus-square ODRAddDatafield"
                                       title="Add Field"
                                    ></i><span class="link-text"> Add Field</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRThemeElement_addCDT">
                                    <i class="tooltip fa fa-list-alt ODRAddChildtype"
                                       title="Add Data Block"
                                    ></i><span class="link-text"> Add Child Database</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRThemeElement_linkDT">
                                    <i class="tooltip fa fa-link ODRLinkDatatype"
                                       title="Link Database"
                                    ></i><span class="link-text"> Link to Database</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRThemeElement_linkFT">
                                    <i class="tooltip fa fa-plus-square-o ODRLinkFromTemplate"
                                       title="Add From Template"
                                    ></i><span class="link-text"> Add from Template</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRDatatype_renderPlugin">
                                    <i class="tooltip fa fa-bar-chart-o ODRRenderPlugin"
                                       title="RenderPlugin Settings (plugin active)"
                                    ></i><span class="link-text"> Change Render Plugin</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRDatatype_publicStatus">
                                    <i class="tooltip fa fa-globe fa-inverse ODRPublicDatatype"
                                    ></i><span class="link-text"> Change Public Status</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRDatatype_delete">
                                    <i class="tooltip fa fa-trash-o ODRDeleteDatatype"
                                       title="Delete DataType"
                                    ></i><span class="link-text"> Delete Datatype</span>
                                </a>
                            </p>
                        </div>
                    </div>
                    <div class="pure-u-1"></div>
                    <div class="pure-u-24-24"><h3 class="ODRHeader">Element Settings</h3></div>
                    <div id="ThemeDesignForm">
                    </div>
                </div>
            </div>
        </div>
        <div id="ThemeDesignArea">
            {% set is_datatype_admin = false %}
            {% if datatype_permissions[ datatype.id ] is defined and datatype_permissions[ datatype.id ][ 'dt_admin' ] is defined %}
                {% set is_datatype_admin = true %}
            {% endif %}

            {% include 'ODRAdminBundle:Displaytemplate:design_area.html.twig' with {
                'datatype_array': datatype_array,
                'theme_array': theme_array,

                'initial_datatype_id': initial_datatype_id,
                'initial_theme_id': initial_theme_id,

                'datatype_permissions': datatype_permissions,
                'is_datatype_admin': is_datatype_admin,
            } %}
        </div>
    </div>

    <div id="link_datatype_dialog_wrapper">
        {% include 'ODRAdminBundle:Link:link_type_dialog.html.twig' %}
    </div>
    <div id="link_from_template_dialog_wrapper">
        {% include 'ODRAdminBundle:Link:link_from_template_dialog.html.twig' %}
    </div>
    <div id="plugin_settings_dialog_wrapper">
        {% include 'ODRAdminBundle:Plugins:plugin_settings_dialog.html.twig' %}
    </div>
    <div id="markdown_help_dialog_wrapper">
        {% include 'ODRAdminBundle:Displaytemplate:markdown_help_dialog.html.twig' %}
    </div>

{#  TODO - get this working again...
    <div id="deleted_fields_dialog_wrapper">
        {% include 'ODRAdminBundle:Displaytemplate:undelete_fields_dialog.html.twig' %}
    </div>
#}

{% endspaceless %}

<script>


    var SelectedElement = null;
    var SaveTimeout = 2000;
    $(function() {
        initPage();

{# TODO - enable this once a better non-master theme designer gets worked out...
        {% if notify_of_sync is defined and notify_of_sync == true %}
        {% include 'ODRAdminBundle:Theme:theme_sync_warning.js.twig' with {
            'datatype_id': datatype.id,
            'theme_id': theme.id,
            'search_key': '',
        } %}
        {% endif %}
#}
    });

    function notifySaved() {
        $.jGrowl('SAVED');
    }

    // TODO - test this?
    function SubmitThemeDesignForm() {
        jQuery.ajax({
            type: "POST",
            url: jQuery("#ThemeDesignForm form").attr('action'),
            data: jQuery("#ThemeDesignForm form").serialize(),
            dataType: 'json',
            success: function(data) {
                console.log(data);
            }
        });
    }

    // TODO - test this?
    function LoadThemeElementForm(theme_element_id) {
        var url = "{{ path('odr_design_get_theme_element_properties', {'theme_element_id': 0}) }}";
        url = url.substr(0, url.length-1);
        jQuery.getJSON(
            url + theme_element_id,
            function(data) {
                jQuery("#ThemeDesignForm").html(data.d)
            }
        )
    }

    // TODO - test this?
    function LoadDatafieldForm(theme_element_id, datafield_id) {
        var url = "{{ path('odr_design_load_theme_datafield', {'theme_element_id': 0, 'datafield_id': 0}) }}";
        url = url.substr(0, url.length-3);
        jQuery.getJSON(
            url + theme_element_id + "/" + datafield_id,
            function(data) {
                jQuery("#ThemeDesignForm").html(data.d);
                jQuery("#UpdateThemeDatafieldForm_hidden").unbind('change');
                jQuery("#UpdateThemeDatafieldForm_hidden").change(function() {
                    var datafield_id = jQuery("#UpdateThemeDatafieldForm_dataField").val();
                    if(jQuery("#UpdateThemeDatafieldForm_hidden").find(":selected").val() == 1) {
                        if(jQuery("#ODRThemeShowHidden").is(":checked")) {
                            jQuery("#Field_" + datafield_id).addClass("ODRThemeVisibleHiddenElement")
                        }
                        else {
                            jQuery("#Field_" + datafield_id).addClass("ODRThemeHiddenElement")
                        }
                    }
                    else {
                        jQuery("#Field_" + datafield_id)
                            .removeClass("ODRThemeVisibleHiddenElement")
                            .removeClass("ODRThemeHiddenElement")
                    }
                    // Submit State Change
                    SubmitThemeDesignForm()
                });

                // Setup Radio Options
                console.log('loading datafield options');
            }
        )
    }

{#
        // This would prevent resizing of theme_elements and datafields inside linked datatypes
        // This restriction is no longer needed because datatypes make copies of linked themes now
        $(".ODRThemeElement.ODRForbidden").resizable("destroy");
        $(".ODRDataField.ODRForbidden").resizable("destroy");
#}
    function clearAllFields(reset_opacity) {
        // Default is to reset opacity
        if(reset_opacity === undefined)
            reset_opacity = true;

        console.log('Clear all fields');
        // Remove Existing Selectors and Highlights
        $(".ODRFieldSelected")
            .removeClass('ODRFieldSelected')
            .each(function(elem) {
                clearResizeable(elem);
            });

        $(".ODRDragHandle").remove();
        $(".ODRSortHandle").remove();

        // Kill existing sortables
        $('.ODRFieldArea').each(function() {
            if ($(this).sortable('instance') !== undefined)
                $(this).sortable('destroy');
        });

        $(".ODRThemeElement .ODRInnerBox").each(function() {
            if ($(this).sortable('instance') !== undefined)
                $(this).sortable('destroy');
        });

        if (reset_opacity)
            resetOpacity();
    }

    function clearResizeable(elem) {
        if ( $(elem).resizable('instance') !== undefined ) {
            $(elem).resizable('destroy');
        }
        return true;
    }

    function resetOpacity() {
        $("#ODRDatatypeDesign").find("> .ODRDataType > .ODRFieldArea > .ODRThemeElement").each(function() {
            $(this).fadeTo(200, '1.0');
        });
    }

    /**
     * Initializes the resizeable and sortable handles for a field, TED, or child datatype.
     *
     * @param elem
     * @param element_type
     */
    function setupElement(elem, element_type) {
        if(element_type === undefined) {
            element_type = '';
        }
        console.log('Element Type:', element_type);

        // Store the previous element for opacity switching
        SelectedElement = $(elem);

        // Fade out all elements other than this one....
        var top_level_teds = $("#ODRDatatypeDesign").find("> .ODRDataType > .ODRFieldArea > .ODRThemeElement");
        if(
            $(elem).hasClass('ODRDataField')  // Data fields
            || $(elem).parent().hasClass('ODRDataType')  // Child or linked data types
        ) {
            console.log('datafield selected');
            // Set opacity to this TED to 1
            clearAllFields(false);
            var isChildOrLink = true;

            top_level_teds.each(function() {
                if($(this).attr('id') === $(elem).parent().parent().attr('id')) {
                    console.log('datafield not in child or link.');
                    isChildOrLink = false;
                }
            });


            // Get actual parent and all Teds in between
            if(isChildOrLink) {
                // Display a child/linked datatype warning ???
                var actual_parent = null;
                $(elem).parents().each(function() {
                    var parent_element = $(this);
                    top_level_teds.each(function () {
                        if ($(this).attr('id') === parent_element.attr('id')) {
                            actual_parent = parent_element;
                            console.log('actual_parent id', actual_parent.attr('id'));
                        }
                    });
                });

                if(actual_parent !== null) {
                    console.log('fading teds...');
                    top_level_teds.each(function() {
                        if ($(this).attr('id') !== actual_parent.attr('id')) {
                            $(this).fadeTo(200, '0.25');
                        }
                    });

                    actual_parent.fadeTo(200, 1);
                }
                else {
                   console.log("No valid parent found!");
                }
            }
            else {
                top_level_teds.each(function() {
                    if ($(this).attr('id') !== $(elem).parent().parent().attr('id')) {
                        console.log('datafield not in child or link.');
                        $(this).fadeTo(200, '0.25');
                    }
                });
                $(elem).parent().parent().fadeTo(200, 1);
            }
        }
        else {
            console.log('opacity switch');
            clearAllFields(false);
            $(elem).fadeTo(100, '1.0');

            var actual_parent = null;
            top_level_teds.each(function() {
                if ($(this).attr('id') === $(elem).attr('id')) {
                    actual_parent = $(elem);
                }
            });
            if(actual_parent === null) {
                $(elem).parents().each(function() {
                    var parent_element = $(this);
                    top_level_teds.each(function () {
                        if ($(this).attr('id') === parent_element.attr('id')) {
                            actual_parent = parent_element;
                            console.log('actual_parent id', actual_parent.attr('id'));
                        }
                    });
                });
            }


            if(actual_parent !== null) {
                // Fade other theme elements to 0.25
                top_level_teds.each(function() {
                    if($(this).attr('id') !== actual_parent.attr('id')) {
                        $(this).fadeTo(200, '0.25');
                    }
                });
                if(actual_parent.css('opacity') < 1) {
                    actual_parent.fadeTo(100, '1.00')
                }
            }
        }

        // Highlight the field
        $(elem).addClass('ODRFieldSelected');
        console.log('field highlighted.....', $(elem).attr('id'));


        // TODO If Datatype, find related Theme Element (Parent)
        var handles;
        switch(element_type) {
            case 'theme_element':
                // Set Handle
                // handles = {
                    // e: "#ThemeDesignArea .ui-resizeable-ne"
                // };
                // Add Resize Handles
                // var handle_ne = '<span class="ODRThemeElementHandle ui-resizeable-handle ui-resizeable-ne">&#x263e;</span>';
                // $(this).prepend(handle_ne);

                // Add Resize Handles
                var handle_e = '<span class="ODRDragHandle ODRDragHandleTEEast ui-resizeable-handle ui-resizeable-e">&esdot;</span>';
                var handle_w = '<span class="ODRDragHandle ODRDragHandleTEWest ui-resizeable-handle ui-resizeable-w">&esdot;</span>';
                // var handle_sort = '<span class="ODRSortHandle"><i class="fa fa-bars"></i></span>';

                $(elem).prepend(handle_e);
                // $(elem).append(handle_sort);
                $(elem).append(handle_w);

                // Fix position of sort handle
                // var left = $(elem).width()/2 - 12;
                // $(elem).find(".ODRSortHandle").css('left', left + "px");

                handles = {
                    e: "#ThemeDesignArea .ui-resizeable-e"
                };
                break;

            default:
                // Add Resize Handles
                var handle_e = '<span class="ODRDragHandle ODRDragHandleEast ui-resizeable-handle ui-resizeable-e">&esdot;</span>';
                var handle_w = '<span class="ODRDragHandle ODRDragHandleWest ui-resizeable-handle ui-resizeable-w">&esdot;</span>';
                var handle_sort = '<span class="ODRSortHandle"><i class="fa fa-bars"></i></span>';

                $(elem).prepend(handle_e);
                $(elem).append(handle_sort);
                $(elem).append(handle_w);

                // Fix position of sort handle
                var left = $(elem).width()/2 - 12;
                $(elem).find(".ODRSortHandle").css('left', left + "px");

                handles = {
                    e: "#ThemeDesignArea .ui-resizeable-e"
                };
                break;
        }



        var datafield_id;
        var theme_element_id;
        /*
            TODO - Replace with alternate grid method due to jQuery bug:
            https://bugs.jqueryui.com/ticket/8932
         */
        $(elem).resizable({
            handles: handles,
            minHeight: $(elem).height(),
            maxHeight: $(elem).height(),
            grid: ($(elem).parent().parent().width())/64, // 41.5,  // 996 width / 24 units
            start: function( event, ui) {
                console.log('Resizeable start:');
                console.log('height: ', $(elem).height());
                console.log('grid:', $(elem).parent().parent().width()/24);
                console.log('parent width:', $(elem).parent().parent().width());
                console.log('element width:', $(elem).width());
                switch(element_type) {
                    case 'theme_element':
                        theme_element_id = ui.originalElement.attr('id').replace('ThemeElement_', '');
                        LoadThemeElementForm(theme_element_id);
                        break;

                    default:
                        datafield_id = ui.originalElement.attr('id').replace('Field_', '');
                        theme_element_id = ui.originalElement.parent().parent().attr('id').replace('ThemeElement_', '');
                        LoadDatafieldForm(theme_element_id, datafield_id);
                        break;
                }
            },
            stop: function( event, ui ) {
                // Refactor all widths for all elements in array to be f/24
                var ui_elem = ui.originalElement;
                var total_width = ui_elem.parent().parent().width();
                var padding_left = parseInt(ui_elem.css('padding-left'));
                var padding_right = parseInt(ui_elem.css('padding-right'));
                var width = ui_elem.width(); //  + padding_left + padding_right;
                console.log('End total width:: ', total_width);
                console.log('End width:: ', width);

                // Need to add padding before calculation?
                console.log('Padding left', padding_left);
                console.log('Padding right', padding_right);

                var pct = width / total_width * 100;

                var u_factor = pct/4.16667;  // 100 / 24 = 4.16666667

                console.log('u', u_factor);
                if (u_factor < 1) {
                    console.log('u', u_factor);
                    u_factor = 1;
                }
                else if (u_factor > 24) {
                    console.log('u', u_factor);
                    u_factor = 24;
                }
                else {
                    console.log('u', u_factor);
                    u_factor = Math.ceil(u_factor);
                }

                console.log('Factor:: ', u_factor);

                var prefix = "pure-u";
                var classes = ui_elem.attr('class').split(" ").filter(function(c) {
                    return c.lastIndexOf(prefix, 0) !== 0;
                });
                ui_elem.attr('class', classes.join(" ").trim());

                // Get new width and refactor to f/24
                // Remove inline width style.
                if(ui_elem.attr('style')) {
                    ui_elem.attr('style', function(i, style) {
                        return style.replace(/width[^;]+;?/g, '');
                    });
                }

                // default is always pure-u-1
                ui_elem.addClass('pure-u-1');
                ui_elem.addClass('pure-u-md-' + u_factor + '-24');
                ui_elem.addClass('pure-u-xl-' + u_factor + '-24');

                // ui_elem.width(width)

                switch(element_type) {
                    case 'theme_element':
                        // Save new U Factors to DB via Get Request
                        jQuery("#UpdateThemeElementForm_cssWidthMed").val(u_factor + "-24");
                        jQuery("#UpdateThemeElementForm_cssWidthXL").val(u_factor + "-24");
                        SaveThemeElementProperties(theme_element_id);
                        break;

                    default:
                        // Fix position of sort handle
                        var left = ui_elem.width()/2 - 12;
                        ui_elem.find(".ODRSortHandle").css('left', left + "px");

                        // Save new U Factors to DB via Get Request
                        jQuery("#UpdateThemeDatafieldForm_cssWidthMed").val(u_factor + "-24");
                        jQuery("#UpdateThemeDatafieldForm_cssWidthXL").val(u_factor + "-24");
                        SaveThemeDatafieldProperties(theme_element_id, datafield_id);
                        break;
                }

            }
        });






        // Initialize sortables
        if(element_type === 'theme_element') {
            // setup sortable for theme elements at the selected level
            // Add class to theme element handles at this level to select only those?
            $(elem).parent().find('> .ODRThemeElement > .ODRThemeElementHandle').addClass('ODRLiveSortable');

            var starting_fieldarea = null;
            $(elem).parent().each(function() {
                // If for some reason this theme element already has a sortable instance,
                // destroy it to prevent duplicate saves
                if ( $(this).sortable('instance') !== undefined )
                    $(this).sortable('destroy');

                $(this).sortable({
                    handle: ".ODRLiveSortable",
                    placeholder: "ui-state-highlight",
                    // connectWith: ".ODRFieldArea",
                    start: function (event, ui) {
                        // Store where the theme element started
                        starting_fieldarea = $(ui.helper).parent().attr('id');

                        // Style the placeholder to more closely match the datafield being drug around
                        $(ui.placeholder).addClass($(ui.helper).attr('class'));
                        $(ui.placeholder).css('height', $(ui.helper).height());
                        $(ui.placeholder).css('width', $(ui.helper).width() * 0.95);
                    },
                    stop: function (event, ui) {
                        // Grab where it ended
                        var ending_fieldarea = $(ui.item).parent().attr('id');

                        // If the theme element ended up in a different fieldarea,
                        // don't save the change and revert the layout
                        if (starting_fieldarea == ending_fieldarea)
                            SaveThemeElementOrder($(ui.item).parent());
                        else
                            $(this).sortable("cancel");

                        // Unhide the object that was being dragged around
                        $(ui.item).show();
                        // $(ui.item).removeAttr('style');
                        starting_fieldarea = null;
                    }
                });
            });
        }


        // If element is data field
        if ($(elem).hasClass('ODRDataField')) {
            // Remove existing sortables in document.

            // Restrict sortable to only same level theme elements.
            // i.e. theme elements that have the same field area as a parent
            var ParentFieldArea = $(elem).parent().parent().parent();

            // Setup sortable for all DataFields
            ParentFieldArea.find("> .ODRThemeElement > .ODRInnerBox").each(function () {
                // Only create sortables from theme elements that are not child types or linked types.
                if($(this).find('> .ODRLinkedType').length > 0 || $(this).find('> .ODRDataType').length > 0) {
                    console.log('Linked or child');
                    return
                }
                console.log('Setting datafield sortable');

                var starting_theme_element;
                $(this).sortable({
                    handle: ".ODRSortHandle",
                    items: "> .ODRDataField",   // Only attach the event to datafields within the ODRInnerBox
                    placeholder: "ui-state-highlight",
                    connectWith: ".ODRInnerBox",
                    dropOnEmpty: true,
                    start: function (event, ui) {
                        // Store where the datafield started
                        starting_theme_element = $(ui.helper).parent().parent().attr('id');
                        starting_fieldarea = $(ui.helper).parent().parent().parent().attr('id');

                        // Style the placeholder to more closely match the datafield being drug around
                        $(ui.placeholder).addClass($(ui.helper).attr('class'));
                        $(ui.placeholder).css('height', $(ui.helper).height());
                        $(ui.placeholder).css('width', $(ui.helper).width() * 0.95);
                    },
                    stop: function (event, ui) {
                        // Grab where the datafield ended
                        var ending_theme_element = $(ui.item).parent().parent().attr('id');
                        var ending_fieldarea = $(ui.item).parent().parent().parent().attr('id');

                        // If the datafield ended up in the same fieldarea...
                        if (starting_fieldarea === ending_fieldarea)
                        // Just need to save the destination theme element
                            SaveDatafieldOrder($(ui.item).parent(), starting_theme_element, ending_theme_element);
                        else
                        // ...if not, don't save the change and revert the layout
                            $(this).sortable("cancel");


                        // Unhide the object that was being dragged around
                        $(ui.item).show();

                        // jQuery Sortable attaches a display: block style to these elements...get rid of it
                        $(ui.item).removeAttr('style');

                        // Reset for the next sortable call
                        starting_theme_element = null;
                        starting_fieldarea = null;
                        $(ui.placeholder).removeAttr('css');
                    }
                });
            });
        }

    }

    function ResetToolSet() {
        // Clear the theme form
        $("#ThemeDesignForm").html("");

        console.log('Resetting tool set');

        var tools = [];
        tools.add_te     = $("#ODRDatatype_addTE");
        tools.add_df     = $("#ODRThemeElement_addDF");
        tools.copy_df    = $("#ODRThemeElement_copyDF");
        tools.add_cdt    = $("#ODRThemeElement_addCDT");
        tools.link_dt    = $("#ODRThemeElement_linkDT");
        tools.link_ft    = $("#ODRThemeElement_linkFT");
        tools.render     = $("#ODRDatatype_renderPlugin");
        tools.pub_stat   = $("#ODRDatatype_publicStatus");
        tools.del_dt     = $("#ODRDatatype_delete");

        for(var x in tools) {
            var obj = tools[x];
            obj.addClass('faded');
            obj.unbind('click').click(function () {
                sidebarDefaultClick();
            });
        }

        // Reset link text
        tools.add_te.find('.link-text').html('Add Group Box');
        tools.add_df.find('.link-text').html('Add Field');
        tools.add_cdt.find('.link-text').html('Add Child Database');
        tools.link_dt.find('.link-text').html('Link to Database');
        tools.link_ft.find('.link-text').html('Add from Template');
        tools.render.find('.link-text').html('Change Render Plugin');
        tools.pub_stat.find('.link-text').html('Change Public Status');
        tools.del_dt.find('.link-text').html('Delete Datatype');
        tools.copy_df.find('.link-text').html('Copy Field');

        // Reset tooltips
        tools.add_te.attr('title',   'Add Group Box');
        tools.add_df.attr('title',   'Add Field');
        tools.add_cdt.attr('title',  'Add Child Database');
        tools.link_dt.attr('title',  'Link to Database');
        tools.link_ft.attr('title',  'Add from Template');
        tools.render.attr('title',   'Change Render Plugin');
        tools.pub_stat.attr('title', 'Change Public Status');
        tools.del_dt.attr('title',   'Delete');
        tools.copy_df.attr('title', 'Copy Field');

        // Hide the datafield copy
        console.log('hiding copy df');
        tools.copy_df.parent().hide();
        tools.add_df.parent().show();
    }

    function RenderToolSet(id, tool_type) {
        if(tool_type === undefined) {
            tool_type = 'datatype';
        }

        var tools = [];
        tools.add_te     = $("#ODRDatatype_addTE");
        tools.add_df     = $("#ODRThemeElement_addDF");
        tools.copy_df    = $("#ODRThemeElement_copyDF");
        tools.add_cdt    = $("#ODRThemeElement_addCDT");
        tools.link_dt    = $("#ODRThemeElement_linkDT");
        tools.link_ft    = $("#ODRThemeElement_linkFT");
        tools.render     = $("#ODRDatatype_renderPlugin");
        tools.pub_stat   = $("#ODRDatatype_publicStatus");
        tools.del_dt     = $("#ODRDatatype_delete");

        ResetToolSet();

        var props;
        switch(tool_type) {
            case 'datatype':
                props = datatype_properties[id];
                console.log('Datatype Props: ', props);



                // Render Plugin
                tools.render.removeClass('faded');
                if(props.render_plugin_id !== 1) {
                    tools.render.find('i').addClass('ODRActiveIcon');
                    tools.render.find('.link-text').html('Custom Render');
                    tools.render.attr('title', 'Rendered using "' + props.render_plugin_name + '.');
                }
                tools.render.unbind('click').click(function () {
                    console.log('Changing render plugin (dt): ', id);
                    changeRenderPlugin(id, 'datatype');
                });

                // Delete Datafield
                if(!props.is_top_level) {
                    tools.del_dt.find('i').addClass('ODRActiveIcon');
                    tools.del_dt.removeClass('faded');

                    // Do not allow deletion of top-level database
                    tools.del_dt.attr('title', 'Click to delete this database.');
                    tools.del_dt.find('.link-text').html('Delete Child Database');
                    tools.del_dt.unbind('click').click(function () {
                        if( confirm("This will delete the selected database from all layouts and ALL data (including files and images) stored in it.\n\nAre you certain you want to proceed?")) {
                            DeleteDatatype(id);
                        }
                    });
                }



                // We can always add a datafield to a datatype???
                // What about linked datatypes - child datatypes yes....
                // Linked should be yes as well....
                tools.add_df.removeClass('faded');
                tools.add_df.attr('title', 'Add Field');
                tools.add_df.find('i').addClass('ODRActiveIcon');
                tools.add_df.find('.link-text').html('Add field');
                tools.add_df.attr('title', 'Click to add a field to this database.');
                tools.add_df.unbind('click').click(function () {
                    addDataField(id, 'datatype');
                });

                // Any Datatype can have a child added
                tools.add_cdt.removeClass('faded');
                tools.add_cdt.find('i').addClass('ODRActiveIcon');
                tools.add_cdt.find('.link-text').html('Add a child database');
                tools.add_cdt.attr('title', 'Click to add a child database.');
                tools.add_cdt.unbind('click').click(function () {
                    $(this).effect("highlight", {}, 2000);

                    // Find first TE or add TE and then add child
                    console.log('data type add field here', id);
                    // Check for an TE that is not a link to add the field to
                    var te = null;
                    $("#DataType_" + id + " > .ODRFieldArea > .ODRThemeElement").each(function() {
                        if($(this).find(".ODRInnerBox > .ODRDataField").length === 0) {
                            var id = $(this).attr('id').replace('ThemeElement_', '');
                            var props = theme_element_properties[id];
                            if(te === null && !props.is_link && !props.has_childtype) {
                                te = $(this);
                            }
                            console.log('TE Props [' + id + ']: ', props);
                        }
                    });

                    if(te != null) {
                        console.log('TE', te.attr('id'));
                        // Add field to this TE
                        var te_id = te.attr('id').replace('ThemeElement_','');
                        addChildType(te_id);
                    }
                    else {
                        // Add new TE and add field
                        addThemeElement(id, 'datatype', function(theme_element_id) {
                            addChildType(theme_element_id)
                        })
                    }
                });

                // Any non linked datatype can link from a template
                if (props.is_link < 1) {

                    console.log('datatype is NOT link');
                    tools.link_ft.removeClass('faded');
                    tools.link_ft.find('i').addClass('ODRActiveIcon');
                    tools.link_ft.find('.link-text').html('Add from Template');
                    tools.link_ft.attr('title', 'Click to create a database from a template and link it to this databse.');
                    tools.link_ft.unbind('click').click(function () {
                        $(this).effect("highlight", {}, 2000);

                        // Find first empty TE or add TE and then add linked database
                        console.log('data type add field here', id);
                        // Check for an TE that is not a link to add the field to
                        var te = null;
                        $("#DataType_" + id + " > .ODRFieldArea > .ODRThemeElement").each(function() {
                            if($(this).find(".ODRInnerBox > .ODRDataField").length === 0) {
                                var id = $(this).attr('id').replace('ThemeElement_', '');
                                var props = theme_element_properties[id];
                                if(te === null && !props.is_link && !props.has_childtype) {
                                    te = $(this);
                                }
                                console.log('TE Props [' + id + ']: ', props);
                            }
                        });

                        if(te != null) {
                            console.log('TE', te.attr('id'));
                            // Add field to this TE
                            var te_id = te.attr('id').replace('ThemeElement_','');
                            // addChildType(te_id);
                            console.log('Using TE: ', te_id);
                            linkFromTemplate(te_id);
                        }
                        else {
                            // Add new TE and add field
                            addThemeElement(id, 'datatype', function(theme_element_id) {
                                console.log('Using TE: ', theme_element_id);
                                linkFromTemplate(theme_element_id);
                            })
                        }
                    });
                }


                // Any non linked datatype can have a link
                if (props.is_link > 0) {
                    console.log('datatype is link');
                    tools.link_dt.removeClass('faded');
                    tools.link_dt.find('i').addClass('ODRActiveIcon');
                    tools.link_dt.find('.link-text').html('Linked database');
                    tools.link_dt.attr('title', 'This is a linked database.  Click to choose a different database.');
                    tools.link_dt.unbind('click').click(function () {
                        $(this).effect("highlight", {}, 2000);
                        // Find parent theme element...
                        // linkDatatype(id);
                        console.log('not implemented yet....');
                    });
                }
                else {
                    console.log('datatype is NOT link');
                    tools.link_dt.removeClass('faded');
                    tools.link_dt.find('i').addClass('ODRActiveIcon');
                    tools.link_dt.find('.link-text').html('Link to a database');
                    tools.link_dt.attr('title', 'Click to link in data from an existing database.');
                    tools.link_dt.unbind('click').click(function () {
                        $(this).effect("highlight", {}, 2000);

                        // Find first empty TE or add TE and then add linked database
                        console.log('data type add field here', id);
                        // Check for an TE that is not a link to add the field to
                        var te = null;
                        $("#DataType_" + id + " > .ODRFieldArea > .ODRThemeElement").each(function() {
                            if($(this).find(".ODRInnerBox > .ODRDataField").length === 0) {
                                var id = $(this).attr('id').replace('ThemeElement_', '');
                                var props = theme_element_properties[id];
                                if(te === null && !props.is_link && !props.has_childtype) {
                                    te = $(this);
                                }
                                console.log('TE Props [' + id + ']: ', props);
                            }
                        });

                        if(te != null) {
                            console.log('TE', te.attr('id'));
                            // Add field to this TE
                            var te_id = te.attr('id').replace('ThemeElement_','');
                            // addChildType(te_id);
                            linkDatatype(te_id);
                        }
                        else {
                            // Add new TE and add field
                            addThemeElement(id, 'datatype', function(theme_element_id) {
                                linkDatatype(theme_element_id);
                            })
                        }
                    });
                }





                tools.pub_stat.removeClass('faded');
                if(props.is_public > 0) {
                    tools.pub_stat.find('i').addClass('ODRActiveIcon');
                    tools.pub_stat.find('.link-text').html('Database is public');
                    tools.pub_stat.attr('title', 'Users may view any record or field in the database that has been marked public without additional permissions.');
                }
                else {
                    tools.pub_stat.find('i').removeClass('ODRActiveIcon');
                    tools.pub_stat.find('.link-text').html('Database is private');
                    tools.pub_stat.attr('title', 'Only logged in users with specific rights to this database may view the database.');
                }


                // Attach click handlers
                tools.pub_stat.unbind('click').click(function () {
                    togglePublic(id, 'datatype');
                });


                // Allow theme elements/group boxes
                tools.add_te.removeClass('faded');
                tools.add_te.unbind('click').click(function () {
                    addThemeElement(id, 'datatype');
                });


                break;

            case 'theme_element':

                props = theme_element_properties[id];
                console.log('TED Props:', props);

                if(!props.has_childtype && !props.has_datafields) {
                    tools.del_dt.removeClass('faded');
                    tools.del_dt.find('.link-text').html('Delete group box');
                    tools.del_dt.attr('title', 'Click to delete this group box.');
                }
                else {
                    tools.del_dt.attr('title', 'A group box can only be deleted if it is empty.  Delete all contents before attempting to delete.');
                }

                if(!props.has_childtype && !props.has_datafields && props.child_is_link === 0) {
                    tools.add_cdt.removeClass('faded');
                    tools.add_cdt.find('i').addClass('ODRActiveIcon');
                    tools.add_cdt.find('.link-text').html('Add a child database');
                    tools.add_cdt.attr('title', 'Click to add a child database.');
                    tools.add_cdt.unbind('click').click(function () {
                        addChildType(id);
                    });
                }

                if (props.child_is_link > 0) {
                    console.log('ted is link');
                    tools.link_dt.removeClass('faded');
                    tools.link_dt.find('i').addClass('ODRActiveIcon');
                    tools.link_dt.find('.link-text').html('Linked database');
                    tools.link_dt.attr('title', 'This is a linked database.  Click to choose a different database.');
                    tools.link_dt.unbind('click').click(function () {
                        linkDatatype(id);
                    });
                }
                else if (!props.has_childtype && !props.has_datafields) {
                    console.log('ted is NOT link');
                    tools.link_dt.removeClass('faded');
                    tools.link_dt.find('i').addClass('ODRActiveIcon');
                    tools.link_dt.find('.link-text').html('Link to a database');
                    tools.link_dt.attr('title', 'Click to link in data from an existing database.');
                    tools.link_dt.unbind('click').click(function () {
                        linkDatatype(id);
                    });
                }

                // Any non linked datatype can link from a template
                if (!props.has_childtype && !props.has_datafields) {
                    console.log('datatype is NOT link');
                    tools.link_ft.removeClass('faded');
                    tools.link_ft.find('i').addClass('ODRActiveIcon');
                    tools.link_ft.find('.link-text').html('Add from Template');
                    tools.link_ft.attr('title', 'Click to create a database from a template and link it to this databse.');
                    tools.link_ft.unbind('click').click(function () {
                        $(this).effect("highlight", {}, 2000);
                        console.log('Using TE: ', id);
                        linkFromTemplate(id);
                    });
                }

                if(!props.has_childtype && props.child_is_link === 0) {
                    tools.add_df.removeClass('faded');
                    tools.add_df.attr('title', 'Add Field');
                    tools.add_df.find('i').addClass('ODRActiveIcon');
                    tools.add_df.find('.link-text').html('Add field');
                    tools.add_df.attr('title', 'Click to add a field to this database.');
                    tools.add_df.unbind('click').click(function () {
                        addDataField(id, 'theme_element');
                    });
                }

                if(!props.has_childtype && !props.has_datafields && props.child_is_link === 0) {
                    tools.del_dt.removeClass('faded');
                    tools.del_dt.attr('title', 'Delete Group Box');
                    tools.del_dt.find('i').addClass('ODRActiveIcon');
                    tools.del_dt.find('.link-text').html('Delete Group Box');
                    tools.del_dt.attr('title', 'Empty group boxes may be deleted.');
                    tools.del_dt.unbind('click').click(function () {
                        deleteThemeElement(id);
                    });
                }

                break;


            case 'datafield':

                console.log('datafield id: ', id);
                props = datafield_properties[id];

                // Render Plugin
                tools.render.removeClass('faded');
                tools.render.find('.link-text').html('Change Render Plugin');
                if(props.render_plugin_id !== 1) {
                    tools.render.find('i').addClass('ODRActiveIcon');
                    tools.render.find('.link-text').html('Custom Render');
                    tools.render.attr('title', 'Rendered using "' + props.render_plugin_name + '.');
                }

                tools.render.unbind('click').click(function () {
                    changeRenderPlugin(id, 'datafield');
                });

                // Public Status
                tools.pub_stat.removeClass('faded');
                if(props.is_public > 0) {
                    tools.pub_stat.find('i').addClass('ODRActiveIcon');
                    tools.pub_stat.find('.link-text').html('Field is public');
                    tools.pub_stat.attr('title', 'Users may view fields marked public without additional permissions if the parent record is also public.');
                }
                else {
                    tools.pub_stat.find('i').removeClass('ODRActiveIcon');
                    tools.pub_stat.find('.link-text').html('Field is private');
                    tools.pub_stat.attr('title', 'Only logged in users may view this field.');
                }

                // Attach click handlers
                tools.pub_stat.unbind('click').click(function () {
                    togglePublic(id, 'datafield');
                });


                // Copy Datafield
                tools.add_df.parent().hide();
                tools.copy_df.parent().show();

                if(props.can_copy) {
                    tools.copy_df.removeClass('faded');
                    tools.copy_df.find('i').addClass('ODRActiveIcon');
                    tools.copy_df.unbind('click').click(function () {
                        CopyDatafield(id);
                    });
                }

                // Delete Datafield
                tools.del_dt.removeClass('faded');
                tools.del_dt.find('i').addClass('ODRActiveIcon');
                tools.del_dt.find('.link-text').html('Delete Field');
                tools.del_dt.attr('title', 'Click to delete this field.');

                tools.del_dt.unbind('click').click(function () {
                    if( confirm("This will delete the Datafield from all layouts, and ALL data (including files and images) stored in it.\n\nAre you certain you want to do this?")) {
                        DeleteDatafield(id);
                    }
                });
                break;


            default:
                break;
        }
    }

    function sidebarDefaultClick() {
        console.log('default click');
        $.jGrowl('You must first select an element from the page to modify its settings.');
    }

    function linkFromTemplate(theme_element_id) {
        // Find TED Parent Field Area
        var local_datatype_id = $('#ThemeElement_' + theme_element_id).parent().attr('id').replace(/FieldArea_/,'');

        {# defined in Link::link_type_dialog.html.twig #}
        openLinkFromTemplateDialog(local_datatype_id, theme_element_id);
    }

    function linkDatatype(theme_element_id) {
        // Find TED Parent Field Area
        var local_datatype_id = $('#ThemeElement_' + theme_element_id).parent().attr('id').replace(/FieldArea_/,'');

        {# defined in Link::link_type_dialog.html.twig #}
        openLinkDatatypeDialog(local_datatype_id, theme_element_id);
    }

    function changeRenderPlugin(id, element_type) {
        switch(element_type) {
            case 'datatype':
                var datatype_id = id;
                var datafield_id = 0;

                {# defined in Displaytemplate::plugin_settings_dialog.html.twig #}
                openPluginSettingsDialog(datafield_id, datatype_id);

                break;

            case 'datafield':
                var datatype_id = 0;
                var datafield_id = id;

                openPluginSettingsDialog(datafield_id, datatype_id);

                break;
        }
    }

    function addChildType(theme_element_id) {

        // Load display template menu
        var url  = '{{ path('odr_design_add_childtype', {'theme_element_id': 0 } ) }}';
        url = url.substring(0,(url.length - 1)) + theme_element_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // ReloadThemeElement() forces a re-render of the theme element,
                // so the 'Add Datafield', 'Add Childtype', 'Link DataType', and
                // 'Delete ThemeElement' icons get muted automatically
                ReloadThemeElement(theme_element_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function deleteThemeElement(theme_element_id) {
        // Don't allow deletion of a theme element that has datafields or a child/linked datatype attached to it
        // if ( $(this).hasClass('fa-muted') )
        // return;

        var url = '{{ path('odr_design_delete_theme_element', { 'theme_element_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += theme_element_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data) {
                // Remove theme element from page
                $("#ThemeElement_" + theme_element_id).fadeOut('slow').remove();

                // No need to update theme element property icons, since it no longer exists
                // Also don't need to update order of theme elements
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function (jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    function addDataField(id, element_type) {
        switch(element_type) {
            case 'datatype':
                console.log('data type add field here', id);
                // Check for an TE that is not a link to add the field to
                var te = null;
                $("#DataType_" + id + " > .ODRFieldArea > .ODRThemeElement").each(function() {
                    var id = $(this).attr('id').replace('ThemeElement_', '');
                    var props = theme_element_properties[id];
                    if(te === null && !props.is_link && !props.has_childtype) {
                        te = $(this);
                    }
                    console.log('TE Props [' + id + ']: ', props);
                });

                if(te != null) {
                    console.log('TE', te.attr('id'));
                    // Add field to this TE
                    var te_id = te.attr('id').replace('ThemeElement_','');
                    addDataField(te_id, 'theme_element');
                }
                else {
                    // Add new TE and add field
                    addThemeElement(id, 'datatype', function(theme_element_id) {
                        addDataField(theme_element_id, 'theme_element');
                    });
                }
                break;

            case 'theme_element':

                // if ( $(this).hasClass('fa-muted') )
                    // return;


                var url = '{{ path('odr_design_add_datafield', { 'theme_element_id': 0 }) }}';
                url = url.substring(0, (url.length - 1)) + id;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function(data) {
                        // Clear object properties panel
                        $("#ThemeDesignForm").html("");

                        // ReloadThemeElement() forces a re-render of the theme element,
                        // so the 'Add Childtype', 'Link DataType', and 'Delete ThemeElement' icons get muted automatically
                        ReloadThemeElement(id);
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function(jqXHR) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }
                    }
                });
                break;
        }
    }


    function addThemeElement(id, element_type, callback) {
        if(callback === undefined) {
            callback = function() {}
        }
        switch(element_type) {
            case 'datatype':

                var datatype_id = id;
                var url = '{{ path('odr_design_add_theme_element_by_datatype', { 'datatype_id': 0 }) }}';
                url = url.substring(0, url.length-1) + datatype_id;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function(data) {
                        // Clear object properties panel
                        // $("#ThemeDesignForm").html("");

                        // Grab ID of new theme element
                        var theme_element_id = data.d.theme_element_id;

                        // Let's get back the actual stuff here.....

                        // Create a fake theme element and force a save of theme element order
                        $("#FieldArea_" + datatype_id).append(data.d.html);

                        SaveThemeElementOrder("#FieldArea_" + datatype_id);

                        // Init the page
                        initPage();

                        // Show the element
                        ScrollHighlight("#ThemeElement_" + theme_element_id);

                        // Run the callback
                        callback(theme_element_id)

                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function(jqXHR) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }
                    }
                });

                break;
        }
    }

    function ScrollHighlight(element, container) {
        var obj = $(element);
        if (container === undefined) {
            container = $('html, body');

            // Only Scroll to element if it is not visible
            if (
                !obj.isInViewport()
            ) {
                container.animate({
                    scrollTop: obj.offset().top + obj.height()
                }, 1000)
            }
        }
        else {
            container.animate({
                scrollTop: obj.prop('offsetTop')
            }, 1000)
        }
        // Highlight
        console.log('highlighting.....');
        obj.effect("highlight", {}, 3000);

    }

    $.fn.isOverflowHiddenY = function(container) {
        var element = $(this);
        console.log(element.offset());
        console.log(container.prop('scrollHeight'));
        console.log(container.height());
        return (element.offset().top > container.height());
    };

    $.fn.isInViewport = function() {
        var elementTop = $(this).offset().top;
        var elementBottom = elementTop + $(this).outerHeight();

        var viewportTop = $(window).scrollTop();
        var viewportBottom = viewportTop + $(window).height();

        return elementBottom > viewportTop && elementTop < viewportBottom;
    };

    function togglePublic(id, element_type) {

        switch(element_type) {
            case 'datatype':
                var datatype_id = id;
                var element = $("#ODRDatatype_" + datatype_id + "_publicStatus");

                var url  = '{{ path('odr_design_public_datatype', {'datatype_id': 0} ) }}';
                url = url.substring(0,(url.length-1));
                url += datatype_id;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function(data) {
                        notifySaved();

                        // Toggle muted status
                        if ( element.hasClass('ODRActiveIcon') )
                            element.removeClass('ODRActiveIcon');
                        else
                            element.addClass('ODRActiveIcon');

                        // Change the locally stored database properties values
                        // and re-render the tools section.
                        var props = datatype_properties[datatype_id];
                        props.is_public = !props.is_public;
                        RenderToolSet(datatype_id, 'datatype');

                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function(jqXHR) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }
                    }
                });
                break;

            case 'datafield':

                var datafield_id = id;
                var element = $('#ODRDatafield_' + datafield_id + '_publicStatus');

                var url  = '{{ path('odr_design_public_datafield', {'datafield_id': 0} ) }}';
                url = url.substring(0,(url.length-1));
                url += datafield_id;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function(data) {
                        notifySaved();

                        var props = datafield_properties[datafield_id];
                        props.is_public = !props.is_public;

                        // Toggle muted status
                        if ( $(element).hasClass('ODRActiveIcon') ) {
                            $(element).removeClass('ODRActiveIcon');
                            $(element).attr('title', 'Datafield requires permission to view');
                        }
                        else {
                            $(element).addClass('ODRActiveIcon');
                            $(element).attr('title', 'Datafield does not require permission to view');
                        }
                        RenderToolSet(datafield_id, 'datafield');

                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function(jqXHR) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }
                    }
                });

                break;
        }
    }

    function DeleteDatatype(datatype_id) {
        // Determine datatype_id (for delete) and theme_element_id (for reload)
        // var theme_element_data = $("#DataType_" + datatype_id).parent().parent().attr('id').split(/_/);
        // var theme_element_id = theme_element_data[1];

        var url = '{{ path('odr_design_delete_datatype', { 'datatype_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datatype_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // Delete the datatype from the page
                $("#DataType_" + datatype_id).remove();

                // Reset the containing theme element's icons
                // var icons = {"ODRAddDatafield": 1, "ODRAddChildtype": 1, "ODRLinkDatatype": 1, "ODRDeleteThemeElement": 1};
                // setThemeElementIcons(theme_element_id, icons);

                // Resets the sidebar tool set
                ResetToolSet();


            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function InitDatatypeTools() {
        // Setup resizable for all ThemeElements
        $("#ThemeDesignArea .ODRThemeElement").each(function() {
            // Only attach this event to theme elements in the design area
            if ( $(this).parents(".ODRFieldArea").length === 0 )
                return;

            // Add Resize Handles
            var handle_ne = '<span class="ODRThemeElementHandle ui-resizeable-handle ui-resizeable-ne">&#x263e;</span>';

            $(this).prepend(handle_ne);
        });


        // Initialize the handle
        $(".ODRThemeElementHandle").unbind('click').click(function() {
            // Highlight and setup element properties
            if(!$(this).parent().hasClass('ODRFieldSelected')) {
                setupElement($(this).parent(), 'theme_element');

                var theme_element_id_data = $(this).parent().attr("id").split(/_/);
                var theme_element_id = theme_element_id_data[1];
                // Prepare the Sidebar Tools
                RenderToolSet(theme_element_id, 'theme_element');
            }
        });

        // Disable text selection
        $(".ODRFieldArea").disableSelection();




        // Binding for clicking a datatype header
        $(".ODRDatatypeProperties").unbind('click').click(function() {

            // Highlight and setup element properties
            console.log('setup tool set datatype');
            setupElement(this);

            // Grab the id of the Datatype to load
            var datatype_id = $(this).attr('rel');

            // Prepare the Sidebar Tools
            console.log('Render tool set datatype');
            RenderToolSet(datatype_id);
            console.log('Datatype Props 1:', datatype_properties[datatype_id]);

            // Determine if this Datatype has a parent
            var parent_datatype_id = '';
            var potential_parent_element = $("#DataType_" + datatype_id).parent().parent().parent().parent();
            if ( $(potential_parent_element).hasClass('ODRDataType') ) {
                var id_data = $(potential_parent_element).attr('id').split(/_/);
                parent_datatype_id = id_data[1];
            }

            // Don't load the properties form if this is a linked datatype the user can't modify
            $("#ThemeDesignForm").hide().html("");
            if ( $(this).hasClass("ODRForbidden") )
                return;

            var url = '{{ path('odr_design_get_datatype_properties', { 'datatype_id': 0, 'parent_datatype_id': 0 } ) }}';
            url = url.substring(0, (url.length - 3));
            url += datatype_id;
            if (parent_datatype_id != '')
                url += '/' + parent_datatype_id;


            // Load the datatype properties
            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data) {
                    $("#ThemeDesignForm").html(data.d);

                    // Prepend the DataTypeTools
                    $("#ThemeDesignForm").fadeIn('fast');
                    // InitDatatypeTools();
                    InitDatatypePropertiesForm();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        });

    }


    function initPage(reset_tools) {
        if(reset_tools === undefined) {
            reset_tools = true
        }
        // Setup Data Fields
        SetupDataFields();

        // Resets the sidebar tool set
        if(reset_tools) {
            ResetToolSet();
        }

        // Sets up the object click handlers
        InitDatatypeTools();


        // Click handler to Reset Opacity
        $("#ODRDatatypeDesign").find("> .ODRDataType > .ODRFieldArea").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });

        $("#left-spacer").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });

        $("#ODRDatatypeToolsBlock p").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });

        $("#ThemeDesignForm").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });


        $("#ThemeDesignWrapper").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });

        $("#ThemeLeftColumn .ODRInnerBox").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });

        $(".ODRDesignTitle").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });


        $("#right-spacer").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });


        $(".ODRUndeleteFields").unbind('click').click(function() {

//            if ( $(this).hasClass('fa-muted') )
                return;

            var datatype_id = $(this).attr('rel');

            var url  = '{{ path('odr_design_get_deleted_datafields', {'datatype_id': 0 } ) }}';
            url = url.substring(0,(url.length - 1)) + datatype_id;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data) {
                    $("#dialog_deleted_fields .form_contents").html(data.d.html);
                    $("#dialog_deleted_fields").dialog( "open" );
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {

                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        });


        // Don't want to call disabledSelection() on the object properties panel
        $("#content").find(".ODRInnerBox").disableSelection();
    }

    function SetupRadioOptions() {
        console.log('Setting up Radio options');
        $(".ODRRadioOptions").unbind('click').click(function() {
            var datafield_id = $(this).attr('rel');
            console.log('setting up radio options', datafield_id);

            $("#ThemeDesignForm").fadeOut().html("");
            var url  = '{{ path('odr_design_get_radio_options', {'datafield_id': 0} ) }}';
            url = url.substring(0,(url.length-1));
            url += datafield_id;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data) {
                    // Load the form
                    $("#ThemeDesignForm").html(data.d.html).fadeIn('fast');

                    // TODO Convert to use modal
                    /*
                    modal_options = {
                        title: 'Edit Options',
                        loading: false,
                        body: data.d.html,
                        buttons: [
                            {
                                id: 'ODRRenderPluginFormSubmit',
                                text: 'Exit',
                                // secondary: true,
                                disabled: false
                            }
                        ]
                    };
                    openODRRemodal(modal_options);
                    */
                    InitRadioOptionsForm(datafield_id);
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        });
    }

    var datafield_properties_xhr = null;
    var save_datafield_xhr = null;
    var SaveDatafieldPropertyInterval = [];
    function SaveDatafieldProperty(datafield_id, reload_datafield) {
        if (SaveDatafieldPropertyInterval[datafield_id] != undefined)
            SaveDatafieldPropertyInterval[datafield_id] = window.clearInterval(SaveDatafieldPropertyInterval[datafield_id]);

        var url = '{{ path('odr_design_get_datafield_properties', { 'datafield_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datafield_id;

        var post_data = $("#DatafieldPropertiesForm_" + datafield_id).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data) {
                notifySaved();

                // Only reload datafield if necessary
                if (reload_datafield == true)
                    ReloadDatafield(datafield_id);

                if (data.d.force_slideout_reload == true) {
                    $("#ThemeDesignForm").fadeOut('slow').html("");
                    $("#ThemeDesignForm").html(data.d.html).fadeIn('slow');

                    InitDatafieldPropertiesForm();
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Forcibly reload object properties panel
                $("#ThemeDesignForm").html("");
                $("#Field_" + datafield_id).trigger('click');
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }

                save_datafield_xhr = null;
            }
        });
    }

    // This is referencing ThemeController...
    function SaveThemeDatafieldProperties(theme_element_id, datafield_id) {
        var url = '{{ path('odr_design_save_theme_datafield', {'theme_element_id': 0, 'datafield_id': 0}) }}';
        url = url.substring(0, url.length-3);
        url += theme_element_id + '/' + datafield_id;

        var post_data = $("#ThemeDatafieldPropertiesForm_" + theme_element_id + "_" + datafield_id).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data) {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    // This function is needed for setTimeout() a couple lines down in SetupDataFields()
    function triggerClick(datafield_id) {
        $("#Field_" + datafield_id).trigger('click');
    }


    function SetupDataFields() {
        $(".ODRDataField").unbind('click').click(function(event) {

            // Setup Resizeable
            setupElement(this);

            // Render Tool Set
            RenderToolSet($(this).attr('id').replace(/Field_/,''), 'datafield');




            // The icon to open RadioOption properties will be overridden by this click
            // event unless this if statement is active
            if ( event.target.className.indexOf('ODRRadioOptions') !== -1 )
                return;

            // ...same deal with datafield public status
            if ( event.target.className.indexOf('ODRPublicDatafield') !== -1 )
                return;

            // Grab datafield id
            var id_data = $(this).attr('id').split(/_/);
            var datafield_id = id_data[1];

            // Wait for a datafield property save to finish if required
            if (save_datafield_xhr != null) {
                window.setTimeout("triggerClick(" + datafield_id + ")", SaveTimeout);
                return;
            }

            // Check if this field is already loaded
            var form_id = "";
            var form = $("#ThemeDesignForm").find("form.ODRDatafieldPropertiesForm");
            if (form.length > 0) {
                var form_id_data = form.attr("id").split(/_/);
                form_id = form_id_data[1];
            }

            // Load form for current datafield if not already loaded
            if (form_id != datafield_id) {
                // Don't attempt to load the properties form for a datafield the user can't view
                // This will prevent an unecessary error message from popping up...
                $("#ThemeDesignForm").html('').fadeIn('fast');
                if ( $(this).hasClass('ODRForbidden') )
                    return;

                var url = '{{ path('odr_design_get_datafield_properties', { 'datafield_id': 0 } ) }}';
                url = url.substring(0, (url.length - 1));
                url += datafield_id;

                // Attempt to ensure only the most recent datafield property request goes through
                if (datafield_properties_xhr !== null)
                    datafield_properties_xhr.abort();

                // Ajax Load Form in box
                datafield_properties_xhr = $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function(data) {
                        $("#ThemeDesignForm").html(data.d.html).fadeIn('fast');
                        InitDatafieldPropertiesForm();
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function(jqXHR) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {

                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }

                        datafield_properties_xhr = null;
                    }
                });
            }
        });
    }

    function InitDatafieldPropertiesForm() {
        // Setup Radio Options.
        SetupRadioOptions();
        // Init Field Properties forms
        $(".ODRMarkdownHelp").unbind('click').click(function() {
            {# defined in ODRAdminBundle:Displaytemplate:markdown_help_dialog.html.twig #}
            openMarkdownHelpDialog();
        });

        $("#ThemeDesignForm").find(".ODRDeleteField").each(function() {
            var datafield_id_data = $(this).attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            $(this).unbind('click').click(function() {
                if ( $(this).hasClass('pure-button-disabled') ) {
                    return;
                }
                else if( confirm("This will delete the Datafield from all layouts, and ALL data (including files and images) stored in it.\n\nAre you certain you want to do this?")) {
                    DeleteDatafield(datafield_id);
                }
            });
        });

        $("#ThemeDesignForm").find(".ODRCopyField").each(function() {
            var datafield_id_data = $(this).attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];
            var datafield_name = $("#ODRDatafield_" + datafield_id + "_name").text();

            $(this).unbind('click').click(function() {
                if(confirm('Are you sure you want to copy "' + datafield_name + '" and all its properties into a new field?')) {
                    CopyDatafield(datafield_id);
                }
            });
        });

        // Attach event handlers to most of the rest of the input elements
        $("#ThemeDesignForm .ODRDatafieldPropertiesForm").find("select").each(function() {
            // Grab Datafield id
            var datafield_id_data = $("#ThemeDesignForm .ODRDatafieldPropertiesForm").attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            // Save changes
            $(this).unbind('change').change(function() {
                // fieldtype selector gets overridden further down
                var reload_datafield = 'false';
                if ( $(this).hasClass('ODRDatafieldChildren') )
                    reload_datafield = 'true';   // reload datafield upon change of images/radio options per row?

                // Don't want a delay here...otherwise a change could get lost
                SaveDatafieldProperty(datafield_id, reload_datafield);

                save_datafield_xhr = true;
            });
        });

        $("#ThemeDesignForm .ODRDatafieldPropertiesForm").find("textarea").each(function() {
            // Grab Datafield id
            var datafield_id_data = $("#ThemeDesignForm .ODRDatafieldPropertiesForm").attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            // Save changes
            $(this).unbind('keyup');
            $(this).unbind('paste');
            $(this).on('keyup paste', function() {
                // Want to update markdown fields immediately
                if ( $(this).hasClass('ODRDatafieldMarkdown') ) {
                    var text = $(this).val();

                    var md = window.markdownit();
                    md.disable(['table', 'strikethrough', 'blockquote']);
                    var markdown_text = md.render(text);

                    $("#Field_" + datafield_id).find(".ODRMarkdownContent").html(markdown_text);
                }

                SaveDatafieldPropertyInterval[datafield_id] = window.clearInterval(SaveDatafieldPropertyInterval[datafield_id]);
                SaveDatafieldPropertyInterval[datafield_id] = window.setInterval("SaveDatafieldProperty(" + datafield_id + ",  false)", SaveTimeout);

                save_datafield_xhr = true;
            });
        });
        $("#ThemeDesignForm .ODRDatafieldPropertiesForm").find("input").each(function() {
            // Grab Datafield id
            var datafield_id_data = $("#ThemeDesignForm .ODRDatafieldPropertiesForm").attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            // Save changes
            if ($(this).is(":checkbox")) {
                $(this).unbind('change').change(function() {
                    //
                    var reload_datafield = false;
                    if ( $(this).hasClass('ODRDatafieldNameSort') )
                        reload_datafield = true;   // reload datafield upon setting radio options to sort by name in the datafield

                    SaveDatafieldPropertyInterval[datafield_id] = window.clearInterval(SaveDatafieldPropertyInterval[datafield_id]);
                    SaveDatafieldPropertyInterval[datafield_id] = window.setInterval("SaveDatafieldProperty(" + datafield_id + ", " + reload_datafield + ")", SaveTimeout);

                    save_datafield_xhr = true;
                });
            }
            else {
                $(this).unbind('keyup');
                $(this).unbind('paste');
                $(this).on('keyup paste', function() {
                    //
                    if ( $(this).hasClass('ODRDatafieldName') ) {   // inline update of datafield name  TODO - error handling?
                        var text = $(this).val();
                        $("#ODRDatafield_" + datafield_id + "_name").text(text);
                    }

                    SaveDatafieldPropertyInterval[datafield_id] = window.clearInterval(SaveDatafieldPropertyInterval[datafield_id]);
                    SaveDatafieldPropertyInterval[datafield_id] = window.setInterval("SaveDatafieldProperty(" + datafield_id + ", false)", SaveTimeout);

                    save_datafield_xhr = true;
                });
            }
        });

        var fieldtype_array = {};
        {% for ft_id,ft_typename in fieldtype_array %}
        fieldtype_array[{{ ft_id }}] = "{{ ft_typename }}";
        {% endfor %}

        // Override the handler for the fieldtype selector
        $("#ThemeDesignForm .ODRDatafieldPropertiesForm").find("#DatafieldsForm_field_type").each(function() {
            // Grab Datafield id
            var datafield_id_data = $("#ThemeDesignForm .ODRDatafieldPropertiesForm").attr('id').split(/_/);
            var datafield_id =  datafield_id_data[1];

            // ...
            $(this).unbind('change').change(function() {

                // If datatype has datarecords, changing a fieldtype might cause loss of data
                var str = "WARNING: Changing the type of this Datafield will cause the loss of ALL data currently in this Datafield.";
                var previous_fieldtype_id = $("#previous_fieldtype").val();
                var current_fieldtype_id = $("#DatafieldsForm_field_type").val();

                var previous_fieldtype = fieldtype_array[previous_fieldtype_id];
                var current_fieldtype = fieldtype_array[current_fieldtype_id];


                // Changes that require no extra consideration or work
                var no_warn = {
                    // single radio and single select fields can be changed to any other radio fieldtype
                    'Single Radio': ['Multiple Radio','Single Select','Multiple Select'],
                    'Single Select': ['Single Radio','Multiple Radio','Multiple Select'],
                    // markdown fields have no data to lose
                    'Markdown': ['Boolean','File','Image','Integer','Paragraph Text','Long Text','Medium Text','Single Radio','Short Text','DateTime','Multiple Radio','Single Select','Multiple Select','Decimal']
                };

                // Changes that require the server to migrate data between storage entities
                // TODO - changing other fieldtypes to radio/select fields
                var time_warn = {
                    'Integer': ['Paragraph Text','Long Text','Medium Text','Short Text','Decimal'],
                    'Long Text': ['Paragraph Text'],
                    'Medium Text': ['Paragraph Text','Long Text'],
                    'Short Text': ['Paragraph Text','Long Text','Medium Text'],
                    'Decimal': ['Paragraph Text','Long Text','Medium Text','Short Text']
                };

                // Changes from 'longer' fieldtypes to 'shorter' fieldtypes
                var length_warn = {
                    'Paragraph Text': ['Long Text','Medium Text','Short Text'],
                    'Long Text': ['Medium Text','Short Text'],
                    'Medium Text': ['Short Text']
                };

                // Changes from text fields to integer/decimal...it can easily result in lost data
                var number_warn = {
                    'Paragraph Text': ['Integer','Decimal'],
                    'Long Text': ['Integer','Decimal'],
                    'Medium Text': ['Integer','Decimal'],
                    'Short Text': ['Integer','Decimal']
                };

                // Changing from multiple radio/select to single radio/select...have to ensure at most one radio option is selected...
                var radio_warn = {
                    'Multiple Radio': ['Single Radio','Single Select'],
                    'Multiple Select': ['Single Radio','Single Select']
                };

                // Converting from decimal to integer...going to lose fractional parts of data
                var precision_warn = {
                    'Decimal': ['Integer']
                };

                // TODO - conversions to boolean?

                // All other changes necessarily result in loss of ALL data

                // Warn the user about potential issues when changing fieldtypes
                if ( no_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, no_warn[previous_fieldtype]) !== -1 ) {
                    str = '';
                }
                else if ( time_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, time_warn[previous_fieldtype]) !== -1 ) {
                    str = 'NOTICE: The server will need some time to migrate data if the type of this Datafield is changed.';
                }
                else if ( length_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, length_warn[previous_fieldtype]) !== -1 ) {
                    str = 'WARNING: You are attempting to convert a longer textfield into a shorter textfield...some data may be truncated...are you sure?';
                }
                else if ( number_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, number_warn[previous_fieldtype]) !== -1 ) {
                    str = 'WARNING: All non-numerical characters will be deleted from the textfield, and the remaining characters converted into a number...If the textfield is not mostly numerical already, the resulting values may be nonsensical...are you sure?';
                }
                else if ( radio_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, radio_warn[previous_fieldtype]) !== -1 ) {
                    str = 'WARNING: Any Datarecords where this Datafield has multiple RadioOptions selected will be modified to have at most one RadioOption selected...are you sure?';
                }
                else if ( precision_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, precision_warn[previous_fieldtype]) !== -1 ) {
                    str = 'WARNING: Any fractional parts of the decimal values will be dropped during this migration of data...are you sure?';
                }


                if ( $("#has_datarecords").val() == '' || str === '' || confirm(str) ) {
                    // Datatype has no datarecords attached, or user doesn't care...save the change
                    SaveDatafieldProperty(datafield_id, true);  // reload datafield because fieldtype changed
                    save_datafield_xhr = true;

                    str = '';
                    if (current_fieldtype == 'Paragraph Text')
                        str = 'No Character Limit';
                    else if (current_fieldtype == 'Long Text')
                        str = '255 Character Limit';
                    else if (current_fieldtype == 'Medium Text')
                        str = '64 Character Limit';
                    else if (current_fieldtype == 'Short Text')
                        str = '32 Character Limit';

                    if (str !== '')
                        $("#field_type_meta").attr('title', str);

                    $("#previous_fieldtype").val(current_fieldtype_id);
                }
                else {
                    // Revert back to old field type
                    previous_fieldtype_id = $("#previous_fieldtype").val();
                    $(this).val( previous_fieldtype_id );
                }

            });
        });

        $("#ThemeDesignForm").fadeIn('fast');
    }

    var SaveDataTypeInterval = [];
    function SaveDatatypeProperties(datatype_id) {
        if (SaveDataTypeInterval[datatype_id] != undefined)
            SaveDataTypeInterval[datatype_id] = window.clearInterval(SaveDataTypeInterval[datatype_id]);

        var url = '{{ path('odr_design_get_datatype_properties', { 'datatype_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datatype_id;

        var form_data = $("#DatatypePropertiesForm_" + datatype_id).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            dataType: "json",
            success: function(data) {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Forcibly reload object properties panel
                $("#ThemeDesignForm").html("");
                $("#DataTypeTools_" + datatype_id + " > .ODRDatatypeProperties").trigger('click');
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function SaveDatatreeProperties(datatree_id) {

        var url = '{{ path('odr_design_save_datatree', {'datatree_id': 0}) }}';
        url = url.substring(0, (url.length - 1));
        url += datatree_id;

        var form_data = $("#DatatreePropertiesForm_" + datatree_id).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            dataType: "json",
            success: function(data) {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    // This is referencing ThemeController...
    function SaveThemeDatatypeProperties(theme_element_id, datatype_id) {

        var url = '{{ path('odr_design_save_theme_datatype', {'theme_element_id': 0, 'datatype_id': 0}) }}';
        url = url.substring(0, (url.length - 3));
        url += theme_element_id + '/' + datatype_id;

        var form_data = $("#ThemeDatatypePropertiesForm_" + theme_element_id + "_" + datatype_id).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            dataType: "json",
            success: function(data) {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    // This is referencing ThemeController...
    function SaveThemeElementOrder(container) {

        var i = 0;
        var theme_element_ids = {};
        $(container).children(".ODRThemeElement").each(function() {
            var id_data = $(this).attr('id').split(/_/);
            theme_element_ids[i] = id_data[1];
            i++;
        });

        var url = '{{ path('odr_design_save_theme_element_order') }}';

        $.ajax({
            cache: false,
            type: 'POST',
            data: theme_element_ids,
            url: url,
            dataType: "json",
            success: function(data) {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    // This is referencing ThemeController...
    function SaveDatafieldOrder(container, initial_theme_element_id, ending_theme_element_id) {

        var i = 0;
        var datafield_ids = {};
        $(container).children(".ODRDataField").each(function() {
            var id_data = $(this).attr('id').split(/_/);
            datafield_ids[i] = id_data[1];
            i++;
        });

        // Get the id numbers of the passed-in theme elements
        var theme_element = initial_theme_element_id.split(/_/);
        initial_theme_element_id = theme_element[1];
        theme_element = ending_theme_element_id.split(/_/);
        ending_theme_element_id = theme_element[1];

        // Theme ID
        var url = '{{ path('odr_design_save_datafield_order', {'initial_theme_element_id': 0, 'ending_theme_element_id' : 0} ) }}';
        url = url.substring(0, url.length-3);
        url += initial_theme_element_id + '/' + ending_theme_element_id;

        $.ajax({
            cache: false,
            type: 'POST',
            data: datafield_ids,
            url: url,
            dataType: "json",
            success: function(data) {
                notifySaved();

                // Don't reload a ThemeElement div unless a DataField got moved between different ThemeElements
                if ( initial_theme_element_id != ending_theme_element_id ) {
                    // Reload starting ThemeElement if all datafields got moved out of it
                    if ( $("#ThemeElement_"+initial_theme_element_id).children(".ODRDataField").length == 0 ) {
                        ReloadThemeElement(initial_theme_element_id);

                        var icons = {"ODRAddChildtype": 1, "ODRLinkDatatype": 1, "ODRDeleteThemeElement": 1};
                        setThemeElementIcons(initial_theme_element_id, icons);
                    }

                    // Reload ending ThemeElement if it now posesses a single datafield (would have been empty before)
                    if ( $("#ThemeElement_"+ending_theme_element_id).children(".ODRDataField").length == 1 ) {

                        var icons = {"ODRAddChildtype": 0, "ODRLinkDatatype": 0, "ODRDeleteThemeElement": 0};
                        setThemeElementIcons(ending_theme_element_id, icons);
                    }
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function SaveThemeElementProperties(theme_element_id) {
        var url = '{{ path('odr_design_get_theme_element_properties', { 'theme_element_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += theme_element_id;

        var form_data = $("#ThemeElementPropertiesForm_" + theme_element_id).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function InitDatatypePropertiesForm() {
        // Init Datatype Properties forms

        $("#ThemeDesignForm .ODRDatatypePropertiesForm").find("select").each(function() {
            var datatype_id_data = $("#ThemeDesignForm .ODRDatatypePropertiesForm").attr('id').split(/_/);
            var datatype_id = datatype_id_data[1];

            $(this).unbind('change').change(function() {
                // Don't want a delay here, otherwise a change could get lost
                SaveDatatypeProperties(datatype_id);
            });
        });

        $("#ThemeDesignForm .ODRDatatypePropertiesForm").find("textarea").each(function() {
            var datatype_id_data = $("#ThemeDesignForm .ODRDatatypePropertiesForm").attr('id').split(/_/);
            var datatype_id = datatype_id_data[1];

            $(this).unbind('keyup');
            $(this).unbind('paste');
            $(this).on('keyup paste', function() {
                SaveDataTypeInterval[datatype_id] = window.clearInterval(SaveDataTypeInterval[datatype_id]);
                SaveDataTypeInterval[datatype_id] = window.setInterval('SaveDatatypeProperties("' + datatype_id + '")', SaveTimeout);
            });
        });

        $("#ThemeDesignForm .ODRDatatypePropertiesForm").find("input").each(function() {
            var datatype_id_data = $("#ThemeDesignForm .ODRDatatypePropertiesForm").attr('id').split(/_/);
            var datatype_id = datatype_id_data[1];

            if( $(this).is(":checkbox") ) {
                $(this).unbind('change').change(function() {
                    SaveDataTypeInterval[datatype_id] = window.clearInterval(SaveDataTypeInterval[datatype_id]);
                    SaveDataTypeInterval[datatype_id] = window.setInterval('SaveDatatypeProperties("' + datatype_id + '")', SaveTimeout);
                });
            }
            else {
                $(this).unbind('keyup');
                $(this).unbind('paste');
                $(this).on('keyup paste', function() {
                    // If the short_name field got changed, grab the new value
                    if ( $(this).hasClass("ODRDatatypeShortName") ) {
                        var short_name = $(this).val();
                        $("#Datatype_" + datatype_id + "_ShortName").html(short_name);
                    }

                    SaveDataTypeInterval[datatype_id] = window.clearInterval(SaveDataTypeInterval[datatype_id]);
                    SaveDataTypeInterval[datatype_id] = window.setInterval('SaveDatatypeProperties("' + datatype_id + '")', SaveTimeout);
                });
            }
        });


        $("#ThemeDesignForm .ODRDatatreePropertiesForm").find("input").each(function() {
            var id_data = $("#ThemeDesignForm .ODRDatatreePropertiesForm").attr('id').split(/_/);
            var datatree_id = id_data[1];

            if( $(this).is(":checkbox") ) {
                $(this).unbind('change').change(function() {
                    SaveDatatreeProperties(datatree_id);
                });
            }
        });

        $("#ThemeDesignForm .ODRThemeDatatypePropertiesForm").find("select").each(function() {
            var id_data = $("#ThemeDesignForm .ODRThemeDatatypePropertiesForm").attr('id').split(/_/);
            var theme_element_id = id_data[1];
            var datatype_id = id_data[2];

            $(this).unbind('change').change(function() {
                SaveThemeDatatypeProperties(theme_element_id, datatype_id);
            });
        });
    }

    function CopyDatafield(datafield_id) {

        // TODO - currently blocked in the backend for linked datatypes

        // Grab theme_element id
        var theme_element_id_data = $("#Field_" + datafield_id).parent().parent().attr('id').split(/_/);
        var theme_element_id = theme_element_id_data[1];

        var url = '{{ path('odr_design_copy_datafield', { 'theme_element_id': 0, 'datafield_id': 0 } ) }}';
        url = url.substring(0, (url.length - 3));
        url += theme_element_id + '/' + datafield_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                 // Clear object properties panel
                $("#ThemeDesignForm").html("");
                ResetToolSet();

                // Reload the theme element because of the brand-new datafield
                ReloadThemeElement(theme_element_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function DeleteDatafield(datafield_id) {
        var url = '{{ path('odr_design_delete_datafield', { 'datafield_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datafield_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {

                // Don't want the datafield or its associated properties panel html anymore
                $("#Field_" + datafield_id).remove();
                $("#ThemeDesignForm").html('');

                ResetToolSet();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function InitRadioOptionsForm(datafield_id) {
        $("#ThemeDesignForm").find(".ODRDeleteRadioOption").each(function() {
            $(this).unbind('click').click(function() {
                var radio_option_data = $(this).attr('id').split(/_/);
                var radio_option_id = radio_option_data[1];

                if ( confirm('Are you sure you want to delete this radio option?') ) {
                    DeleteOption(radio_option_id);
                }
            });
        });

        $("#ThemeDesignForm").find(".ODRDefaultRadioOption").each(function() {
            $(this).unbind('click').click(function() {
                var radio_option_id = $(this).attr('rel');
                DefaultOption(radio_option_id);
            });
        });


        $("#ThemeDesignForm").find(".ODRAddRadioOption").unbind('click').click(function() {
            var datafield_id = $(this).attr('rel');
            AddOption(datafield_id);
        });

        // Add Options via list
        $("#ThemeDesignForm").find(".ODRAddRadioOptionList").unbind('click').click(function() {
            var datafield_id = $(this).attr('rel');
            AddOptionsFromList(datafield_id);
        });

        $("#ThemeDesignForm").find(".ODRRadioOptionName").each(function() {
            $(this).unbind('keyup');
            $(this).unbind('paste');
            $(this).on('keyup paste', function() {
                var radio_option_id = $(this).attr('rel');
                var datafield_id = $(this).parent().parent().parent().attr('rel');

                // Immediately update the option name if not sorting by alphabetical order
                if ( $("#datafield_" + datafield_id + "_name_sort").val() == 0 ) {
                    var option_name = $(this).val();
                    if ( $("#Option_" + radio_option_id + "_name").html() != null )
                        $("#Option_" + radio_option_id + "_name").html(option_name);    // single/multiple radio
                    else
                        $("#Option_" + radio_option_id).text(option_name);  // single/multiple select

                }

                SaveRadioOptionNameInterval[radio_option_id] = window.clearInterval(SaveRadioOptionNameInterval[radio_option_id]);
                SaveRadioOptionNameInterval[radio_option_id] = window.setInterval("SaveRadioOptionName(" + datafield_id + "," + radio_option_id + ")", SaveTimeout);
            });
        });

        // Only allow sorting radio options if datafield not set to alphabetical ordering
        if ( $("#datafield_" + datafield_id + "_name_sort").val() == 0 ) {

            // Sortable Radio Options
            if ( $(".ODRSortableOption").sortable("instance") !== undefined )
                $(".ODRSortableOption").sortable("destroy");

            $(".ODRSortableOption").sortable({

                start: function( event, ui ) {
                    // Hide the div that is being dragged around
//                $(ui.helper).hide();
                },
                stop: function( event, ui ) {
                    SaveRadioOptionOrder(0);    // don't use alphabetical sort

                    // Unhide the object that was being dragged around
//                $(ui.item).show();
                    $(ui.item).removeAttr('style');
                },
                placeholder: "ui-state-highlight",
                connectWith: ".ODRSortableOption"
            });
//        $(".ODRSortableOption").disableSelection();   // TODO - commented out because it was intefering with clicking into the radio optio name fields...wat?!?
        }
    }

    function SaveRadioOptionOrder(alphabetical_sort) {
        // Grab order of radio options
        var i = 0;
        var radio_option_ids = {};
        $(".ODRSortableOption").children().each(function() {
            var id_data = $(this).attr('id').split(/_/);
            radio_option_ids[i] = id_data[2];
            i++;
        });

        // Grab datafield
        var datafield_id = $(".ODRSortableOption").attr("rel");

        var url = '{{ path('odr_design_save_radio_option_order', {'datafield_id': 0, 'alphabetical_sort': 0} ) }}';
        url = url.substring(0, url.length-3);
        url += datafield_id + '/' + alphabetical_sort;

        $.ajax({
            cache: false,
            type: 'POST',
            data: radio_option_ids,
            url: url,
            dataType: "json",
            success: function(data) {
                notifySaved();

                // Can't necessarily cut and paste one option because this could be a first-time request to make options alphabetical...
                ReloadDatafield(datafield_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    var SaveRadioOptionNameInterval = [];
    function SaveRadioOptionName(datafield_id, radio_option_id) {
        if (SaveRadioOptionNameInterval[radio_option_id] != undefined)
            SaveRadioOptionNameInterval[radio_option_id] = window.clearInterval(SaveRadioOptionNameInterval[radio_option_id]);

        var url = '{{ path('odr_design_save_radio_option_name', { 'radio_option_id': 0 }) }}';
        url = url.substring(0,(url.length - 1));
        url += radio_option_id;

        var post_data = $("#ODRRadioOptionsForm_0").find("#radio_option_" + radio_option_id + "_name").serialize();    // only want one field
        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data) {
                notifySaved();

                // Save the radio option order if necessary
                if ( $("#datafield_" + datafield_id + "_name_sort").val() == 1 ) {
                    SaveRadioOptionOrder(1);    // 1 == alphabetical sort

                    // Reload datafield properties panel since the position of the option will change
                    $("#Field_" + datafield_id + "_radio_options").trigger('click');
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function AddOptionsFromList(datafield_id) {
        var url = '{{ path('odr_design_add_radio_option_from_list', { 'datafield_id': 0 }) }}';
        // Load display template menu
        url = url.substring(0,(url.length - 1));
        url += datafield_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // Add to theme element form
                $("#ThemeDesignForm").html(data.d.html);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function AddOption(datafield_id) {
        var url = '{{ path('odr_design_add_radio_option', { 'datafield_id': 0 }) }}';
        // Load display template menu
        url = url.substring(0,(url.length - 1));
        url += datafield_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // Insert the data into the radio option list
                console.log('APPENDING new option', data.d);
                $('#ODRRadioOptionsForm_0 table tbody').append(data.d.html);
                console.log('starting scroll highlight');
                ScrollHighlight($('#radio_option_' + data.d.radio_option_id), $(".ODRRadioOptionListWrapper"));
                console.log('ending scroll highlight');

                // Determine if sort order is alpha
                InitRadioOptionsForm(data.d.datafield_id);
                ReloadDatafield(datafield_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function DeleteOption(radio_option_id) {
        var url = '{{ path('odr_design_delete_radio_option', { 'radio_option_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += radio_option_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // Delete the radio option out of the properties panel
                $("#radio_option_" + radio_option_id).remove();

                // Delete the radio option off the page
                $("#Option_" + radio_option_id).remove();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function DefaultOption(radio_option_id) {
        var url = '{{ path('odr_design_default_radio_option', { 'radio_option_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += radio_option_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function ReloadChild(datatype_id) {
        var url = '{{ path('odr_design_reload_child', { 'source_datatype_id': 0, 'datatype_id': 0 }) }}';
        url = url.substring(0, url.length-3);
        url += {{ datatype.id }} + '/' + datatype_id;

        var append = true;
        var datatype_div = $("#DataType_" + datatype_id);
        var element = $(datatype_div).prev();
        if ( $(element).attr('class') === undefined ) {
            append = false;
            element = $(datatype_div).parent();
        }

        // Create a loading div to block off the datafield?
        insertLoadingDiv("DataType_" + datatype_id);

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: 'json',
            success: function(data) {
                // remove old datatype
                $(datatype_div).fadeOut();
                $(datatype_div).remove();

                // insert new html
                if (append)
                    $(element).after(data.d.html);
                else
                    $(element).prepend(data.d.html);

                initPage();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function ReloadThemeElement(theme_element_id) {
        var url = '{{ path('odr_design_reload_theme_element', { 'source_datatype_id': 0, 'theme_element_id': 0 }) }}';
        url = url.substring(0, url.length-3);
        url += {{ datatype.id }} + '/' + theme_element_id;

        var append = true;
        var theme_element = $("#ThemeElement_" + theme_element_id);
        var element = $(theme_element).prev();
        if ( $(element).attr('class') === undefined ) {
            append = false;
            element = $(theme_element).parent();
        }

        // Create a loading div to block off the datafield?
        insertLoadingDiv("ThemeElement_" + theme_element_id);

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: 'json',
            success: function(data) {
                // Remove old theme element
                $(theme_element).fadeOut();
                $(theme_element).remove();

                // Insert new html
                if (append)
                    $(element).after(data.d.html);
                else
                    $(element).prepend(data.d.html);

                initPage(false);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function ReloadDatafield(datafield_id) {
        var url = '{{ path('odr_design_reload_datafield', { 'source_datatype_id': 0, 'datafield_id': 0 }) }}';
        url = url.substring(0, url.length-3);
        url += {{ datatype.id }} + '/' + datafield_id;

        var datafield = $("#Field_" + datafield_id);
        /*
        var append = true;
        var element = $(datafield).prev();

        if ( $(element).attr('class') === undefined ) {
            append = false;
            element = $(datafield).parent();
        }
        */

        // Create a loading div to block off the datafield?
        insertLoadingDiv("Field_" + datafield_id);

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: 'json',
            success: function(data) {
                // Replace old datafield
                $(datafield).replaceWith(data.d.html);
                console.log('setting up data fields ');
                SetupDataFields($(datafield));

                console.log('highlight datafield');
                var new_datafield = $("#Field_" + datafield_id);
                setupElement(new_datafield);

                // Insert new html
                /*
                if (append)
                    $(element).after(data.d.html);
                else
                    $(element).prepend(data.d.html);

                initPage();
                */
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    function insertLoadingDiv(parent_div_id) {

        // Need dimensions of parent div...
        var element = $("#" + parent_div_id);
        var height = $(element).css('height');
        var width = $(element).css('width');

        // Create a loading div
        $(element).prepend("<div id=\"" + parent_div_id + "_loading_div\" class=\"ODROverlayDiv ODRReloadDiv\"><strong>Loading...</strong></div>");

        // Apply dimensions of parent div to loading div
        $("#" + parent_div_id + "_loading_div").css({"height": height, "line-height": height, "width": width});
    }

</script>

{# contains setDatatypeIcons() and setThemeElementIcons() #}
{% include 'ODRAdminBundle:Displaytemplate:icon_functions.html.twig' %}
