{% spaceless %}

    {% set datatype = datatype_array[initial_datatype_id] %}
    {% set theme = theme_array[initial_theme_id] %}

    <!--suppress JSCheckFunctionSignatures -->
    <div class="ODRDesignHeader">
        <h1 class="ODRDesignTitle no-margin-top-phone">

            {% if datatype.is_master_type == 1 %} {# Master Template Creation #}
                <span>Template Design &raquo; {{ datatype.dataTypeMeta.shortName }}</span>
            {% else %}
                <span>Dataset Design &raquo; {{ datatype.dataTypeMeta.shortName }}</span>
            {% endif %}
        </h1>
        {% if datatype.setup_step != "complete" %}
            {% if datatype.is_master_type == 1 %} {# Master Template Creation #}
            {% else %}
                {% include 'ODRAdminBundle:Displaytemplate:wizard.html.twig' with {
                    'wizard_step': 3,
                    'datatype_id': datatype.id,
                    'edit_properties': false,
                    'create_master': false,
                    'master_templates': null,
                    'master_type_id': 0,
                } %}
            {% endif %}
        {% else %}
            {# Dataset creation wizard is complete - menu for managing? #}
            {% include 'ODRAdminBundle:Displaytemplate:wizard.html.twig' with {
                'wizard_step': 3,
                'datatype_id': datatype.id,
                'edit_properties': false,
                'create_master': false,
                'master_templates': null,
                'master_type_id': 0,

                'datatype': datatype,
                'sync_with_template': sync_with_template,
                'sync_metadata_with_template': sync_metadata_with_template,
            } %}
        {% endif %}

        <input type="hidden" id="has_datarecords" value="{{ has_datarecords }}" />
    </div>

    <div id="ThemeDesignWrapper">
        <div id="ThemeLeftColumn" class="ODRContentWrapper">
            <div class="ODRThemeElement">
                <div class="ODRInnerBox">
                    <h3 class="ODRHeader">Manage Design</h3>
                    <div class="ODRThemeDesignSettings">
                        <p>Click on an element of your design to manage its settings below.</p>
                        <div id="ODRDatatypeToolsBlock">
                            <p>
                                <a id="ODRDatatype_addTE">
                                    <i class="tooltip fa fa-edit ODRAddThemeElement"
                                        title="Add Group Box"
                                    ></i> <span class="link-text">Add Group Box</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRThemeElement_copyDF">
                                    <i class="tooltip fa fa-clone ODRCopyDatafield"
                                       title="Copy Field"
                                    ></i><span class="link-text"> Copy Field</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRThemeElement_addDF">
                                    <i class="tooltip fa fa-plus-square ODRAddDatafield"
                                       title="Add Field"
                                    ></i><span class="link-text"> Add Field</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRThemeElement_addCDT">
                                    <i class="tooltip fa fa-list-alt ODRAddChildtype"
                                       title="Add Data Block"
                                    ></i><span class="link-text"> Add Child Field Set</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRThemeElement_linkDT">
                                    <i class="tooltip fa fa-link ODRLinkDatatype"
                                       title="Link Dataset"
                                    ></i><span class="link-text"> Link to Dataset</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRThemeElement_linkFT">
                                    <i class="tooltip fa fa-plus-square-o ODRLinkFromTemplate"
                                       title="Add From Template"
                                    ></i><span class="link-text"> Add from Template</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRDatatype_renderPlugin">
                                    <i class="tooltip fa fa-bar-chart-o ODRRenderPlugin"
                                       title="RenderPlugin Settings (plugin active)"
                                    ></i><span class="link-text"> Change Render Plugin</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRDatatype_publicStatus">
                                    <i class="tooltip fa fa-globe fa-inverse ODRPublicDatatype"
                                    ></i><span class="link-text"> Change Public Status</span>
                                </a>
                            </p>
                            <p>
                                <a id="ODRDatatype_delete">
                                    <i class="tooltip fa fa-trash-o ODRDeleteDatatype"
                                       title="Delete DataType"
                                    ></i><span class="link-text"> Delete Datatype</span>
                                </a>
                            </p>
                        </div>
                    </div>
                    <div class="pure-u-1"></div>
                    <div class="pure-u-24-24"><h3 class="ODRHeader">Element Settings</h3></div>
                    <div id="ThemeDesignForm"></div>
                    <div id="ThemeDatafieldDesignForm" class="ODRHidden"></div>
                </div>
            </div>
        </div>
        <div id="ThemeDesignArea">
            {% set is_datatype_admin = false %}
            {% if datatype_permissions[ datatype.id ] is defined and datatype_permissions[ datatype.id ][ 'dt_admin' ] is defined %}
                {% set is_datatype_admin = true %}
            {% endif %}

            {% include 'ODRAdminBundle:Displaytemplate:design_area.html.twig' with {
                'datatype_array': datatype_array,
                'theme_array': theme_array,
                'datafield_properties': datafield_properties,

                'initial_datatype_id': initial_datatype_id,
                'initial_theme_id': initial_theme_id,

                'datatype_permissions': datatype_permissions,
                'is_datatype_admin': is_datatype_admin,
            } %}
        </div>
    </div>

    <div id="link_datatype_dialog_wrapper">
        {% include 'ODRAdminBundle:Link:link_type_dialog.html.twig' %}
    </div>
    <div id="link_from_template_dialog_wrapper">
        {% include 'ODRAdminBundle:Link:link_from_template_dialog.html.twig' %}
    </div>
    <div id="plugin_settings_dialog_wrapper">
        {% include 'ODRAdminBundle:Plugins:plugin_settings_dialog.html.twig' %}
    </div>
    <div id="markdown_help_dialog_wrapper">
        {% include 'ODRAdminBundle:Displaytemplate:markdown_help_dialog.html.twig' %}
    </div>
    <div id="radio_option_edit_dialog_wrapper">
        {% include 'ODRAdminBundle:Displaytemplate:radio_option_wrapper_dialog.html.twig' %}
    </div>
    <div id="tag_edit_dialog_wrapper">
        {% include 'ODRAdminBundle:Displaytemplate:tag_wrapper_dialog.html.twig' %}
    </div>
    <div id="multi_datafield_properties_dialog_wrapper">
        {% include 'ODRAdminBundle:Displaytemplate:multi_datafield_properties_dialog.html.twig' %}
    </div>

{#  TODO - get this working again...
    <div id="deleted_fields_dialog_wrapper">
        {% include 'ODRAdminBundle:Displaytemplate:undelete_fields_dialog.html.twig' %}
    </div>
#}

{% endspaceless %}

<script>


    {% if datatype.is_master_type == 1 %} {# Master Template Creation #}
    var isMasterType = 1;
    {% else %}
    var isMasterType = 0;
    {% endif %}
    var SelectedElement = null;
    var SaveTimeout = 2000;
    $(function() {
        disableSearchSidebar();    {# defined in ODRAdminBundle:Default:common_js.html.twig #}

        initPage();

{# TODO - enable this once a better non-master theme designer gets worked out...
        {% if notify_of_sync is defined and notify_of_sync == true %}
        {% include 'ODRAdminBundle:Theme:theme_sync_warning.js.twig' with {
            'datatype_id': datatype.id,
            'theme_id': theme.id,
            'search_key': '',
        } %}
        {% endif %}
#}
    });

    function notifySaved() {
        $.jGrowl('SAVED');
    }

    /**
     * Loads the properties form for the given theme_element.
     *
     * @param {number} theme_element_id
     */
    function LoadThemeElementForm(theme_element_id) {
        var url = "{{ path('odr_design_get_theme_element_properties', {'theme_element_id': 0}) }}";
        url = url.substr(0, url.length-1);
        url += theme_element_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data) {
                $("#ThemeDesignForm").html(data.d);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function (jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Loads the properties form for the given theme_datafield.
     *
     * @param {number} theme_element_id
     * @param {number} datafield_id
     */
    function LoadThemeDatafieldForm(theme_element_id, datafield_id) {
        // console.log ('LoadThemeDatafieldForm() called with datafield: ' + datafield_id + ' theme_element: ' + theme_element_id);

        // Delay the loading of this themeDatafield entry until after any call to SaveDatafieldOrder()
        //  is completed
        var key = datafield_id + '_' + theme_element_id;
        if ( load_themeDatafield_delay[key] !== undefined && load_themeDatafield_delay[key] !== null ) {
            // console.log('LoadThemeDatafieldForm() delay');
            setTimeout(function() {
                LoadThemeDatafieldForm(theme_element_id, datafield_id)
            }, 500);
            return;
        }

        var url = "{{ path('odr_design_load_theme_datafield', {'theme_element_id': 0, 'datafield_id': 0}) }}";
        url = url.substr(0, url.length-3);
        url += theme_element_id + "/" + datafield_id

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function (data) {
                $("#ThemeDatafieldDesignForm").html(data.d);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function (jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    function clearAllFields(reset_opacity) {
        // Default is to reset opacity
        if(reset_opacity === undefined)
            reset_opacity = true;

        // console.log('Clear all fields');
        // Remove Existing Selectors and Highlights
        $(".ODRFieldSelected").removeClass('ODRFieldSelected').each(function(elem) {
            clearResizeable(elem);
        });

        $(".ODRDragHandle").remove();
        $(".ODRSortHandle").remove();

        // Kill existing sortables
        $('.ODRFieldArea').each(function() {
            if ($(this).sortable('instance') !== undefined)
                $(this).sortable('destroy');
        });

        $(".ODRThemeElement .ODRInnerBox").each(function() {
            if ($(this).sortable('instance') !== undefined)
                $(this).sortable('destroy');
        });

        if (reset_opacity)
            resetOpacity();
    }

    function clearResizeable(elem) {
        if ( $(elem).resizable('instance') !== undefined ) {
            $(elem).resizable('destroy');
        }
        return true;
    }

    function resetOpacity() {
        $("#ODRDatatypeDesign").find("> .ODRDataType > .ODRFieldArea > .ODRThemeElement").each(function() {
            $(this).fadeTo(200, '1.0');
        });
    }

    /**
     * Initializes the resizeable and sortable handles for a field, TED, or child datatype.
     *
     * @param {HTMLElement} elem
     * @param {string} element_type
     */
    function setupElement(elem, element_type) {
        if (element_type === undefined)
            return;

        // Store the previous element for opacity switching
        SelectedElement = $(elem);    // TODO - this looks like it's unused...

        // Fade out all elements other than this one....
        var actual_parent = null;
        var top_level_teds = $("#ODRDatatypeDesign").find("> .ODRDataType > .ODRFieldArea > .ODRThemeElement");
        if(
            $(elem).hasClass('ODRDataField')  // Data fields
            || $(elem).parent().hasClass('ODRDataType')  // Child or linked data types
        ) {
            // console.log('datafield selected');
            // Set opacity to this TED to 1
            clearAllFields(false);
            var isChildOrLink = true;

            top_level_teds.each(function() {
                if($(this).attr('id') === $(elem).parent().parent().attr('id')) {
                    // console.log('datafield not in child or link.');
                    isChildOrLink = false;
                }
            });


            // Get actual parent and all Teds in between
            if(isChildOrLink) {
                // Display a child/linked datatype warning ???
                $(elem).parents().each(function() {
                    var parent_element = $(this);
                    top_level_teds.each(function () {
                        if ($(this).attr('id') === parent_element.attr('id')) {
                            actual_parent = parent_element;
                            // console.log('actual_parent id', actual_parent.attr('id'));
                        }
                    });
                });

                if(actual_parent !== null) {
                    // console.log('fading teds...');
                    top_level_teds.each(function() {
                        if ($(this).attr('id') !== actual_parent.attr('id')) {
                            $(this).fadeTo(200, '0.25');
                        }
                    });

                    actual_parent.fadeTo(200, 1);
                }
                else {
                   // console.log("No valid parent found!");
                }
            }
            else {
                top_level_teds.each(function() {
                    if ($(this).attr('id') !== $(elem).parent().parent().attr('id')) {
                        // console.log('datafield not in child or link.');
                        $(this).fadeTo(200, '0.25');
                    }
                });
                $(elem).parent().parent().fadeTo(200, 1);
            }
        }
        else {
            // console.log('opacity switch');
            clearAllFields(false);
            $(elem).fadeTo(100, '1.0');

            top_level_teds.each(function() {
                if ($(this).attr('id') === $(elem).attr('id')) {
                    actual_parent = $(elem);
                }
            });
            if(actual_parent === null) {
                $(elem).parents().each(function() {
                    var parent_element = $(this);
                    top_level_teds.each(function () {
                        if ($(this).attr('id') === parent_element.attr('id')) {
                            actual_parent = parent_element;
                            // console.log('actual_parent id', actual_parent.attr('id'));
                        }
                    });
                });
            }


            if(actual_parent !== null) {
                // Fade other theme elements to 0.25
                top_level_teds.each(function() {
                    if($(this).attr('id') !== actual_parent.attr('id')) {
                        $(this).fadeTo(200, '0.25');
                    }
                });
                if(actual_parent.css('opacity') < 1) {
                    actual_parent.fadeTo(100, '1.00')
                }
            }
        }

        // Highlight the field
        $(elem).addClass('ODRFieldSelected');
        // console.log('field highlighted.....', $(elem).attr('id'));

        // Attach resizeable handlers to the element if needed
        setupResizeable(elem);    {# defined in Displaytemplate:functions.js.twig #}

        // Attach sortable handlers to the element if needed
        if (element_type === 'theme_element')
            setupSortableThemeElements(elem);    {# defined in Displaytemplate:functions.js.twig #}

        if ( element_type === 'datafield' )
            setupSortableDatafields(elem);    {# defined in Displaytemplate:functions.js.twig #}
    }

    {% include 'ODRAdminBundle:Displaytemplate:functions.js.twig' %}

    /**
     * Resets the various toolset links on the left side of the master layout design page.
     */
    function ResetToolSet() {
        // Clear the theme form
        $("#ThemeDesignForm").html("");
        $("#ThemeDatafieldDesignForm").html("");

        // console.log('Resetting tool set');

        var tools = [];
        tools.add_te     = $("#ODRDatatype_addTE");
        tools.add_df     = $("#ODRThemeElement_addDF");
        tools.copy_df    = $("#ODRThemeElement_copyDF");
        tools.add_cdt    = $("#ODRThemeElement_addCDT");
        tools.link_dt    = $("#ODRThemeElement_linkDT");
        tools.link_ft    = $("#ODRThemeElement_linkFT");
        tools.render     = $("#ODRDatatype_renderPlugin");
        tools.pub_stat   = $("#ODRDatatype_publicStatus");
        tools.del_dt     = $("#ODRDatatype_delete");

        for(var x in tools) {
            var obj = tools[x];
            obj.addClass('faded');
            obj.unbind('click').click(function () {
                sidebarDefaultClick();
            });
        }

        // Reset link text
        tools.add_te.find('.link-text').html('Add Group Box');
        tools.add_df.find('.link-text').html('Add Field');
        tools.add_cdt.find('.link-text').html('Add Child Field Set');
        tools.link_dt.find('.link-text').html('Link to Dataset');
        tools.link_ft.find('.link-text').html('Add from Template');
        tools.render.find('.link-text').html('Change Render Plugin');
        tools.pub_stat.find('.link-text').html('Change Public Status');
        tools.del_dt.find('.link-text').html('Delete Dataset');
        tools.copy_df.find('.link-text').html('Copy Field');

        // Reset tooltips
        tools.add_te.attr('title',   'Add Group Box');
        tools.add_df.attr('title',   'Add Field');
        tools.add_cdt.attr('title',  'Add Child Field Set');
        tools.link_dt.attr('title',  'Link to Dataset');
        tools.link_ft.attr('title',  'Add from Template');
        tools.render.attr('title',   'Change Render Plugin');
        tools.pub_stat.attr('title', 'Change Public Status');
        tools.del_dt.attr('title',   'Delete');
        tools.copy_df.attr('title', 'Copy Field');

        // Hide the datafield copy
        // console.log('hiding copy df');
        tools.copy_df.parent().hide();
        tools.add_df.parent().show();


        // Hide fields for master templates
        if(isMasterType) {
            tools.link_ft.hide();
            tools.link_dt.find('.link-text').html('Link to Template');
            tools.link_dt.attr('title', 'Link to Template');
        }
    }

    /**
     * Changes the various toolset links on the left side of the master layout design to match the
     * entity that the user is attempting to modify.
     *
     * @param {number} entity_id
     * @param {string} tool_type
     * @param {number} [theme_element_id]
     */
    function RenderToolSet(entity_id, tool_type, theme_element_id) {

        var tools = [];
        tools.add_te     = $("#ODRDatatype_addTE");
        tools.add_df     = $("#ODRThemeElement_addDF");
        tools.copy_df    = $("#ODRThemeElement_copyDF");
        tools.add_cdt    = $("#ODRThemeElement_addCDT");
        tools.link_dt    = $("#ODRThemeElement_linkDT");
        tools.link_ft    = $("#ODRThemeElement_linkFT");
        tools.render     = $("#ODRDatatype_renderPlugin");
        tools.pub_stat   = $("#ODRDatatype_publicStatus");
        tools.del_dt     = $("#ODRDatatype_delete");

        ResetToolSet();

        switch(tool_type) {
            case 'datatype':
                var datatype_id = entity_id;
                var props = datatype_properties[datatype_id];
                // console.log('RenderToolSet() Dataset ' + datatype_id + ' Props: ', props);

                var is_datatype_admin = false;
                if ( datatype_properties[datatype_id].is_datatype_admin )
                    is_datatype_admin = true;
                // console.log('is_datatype_admin?', is_datatype_admin);

                // ----------------------------------------
                // Add ThemeElement/Group Box is always available...the user has admin permissions
                //  to the local dataype, and is only modifying a copy of the master theme for a
                //  linked/remote datatype
                tools.add_te.removeClass('faded');
                tools.add_te.unbind('click').click(function () {
                    var theme_id = datatype_properties[datatype_id].theme_id;
                    // console.log('adding theme_element to theme ' + theme_id);
                    addThemeElement(theme_id);
                });

                // ----------------------------------------
                // Add Field
                if ( is_datatype_admin ) {
                    tools.add_df.removeClass('faded');
                    tools.add_df.find('i').addClass('ODRActiveIcon');
                    tools.add_df.find('.link-text').html('Add Field');
                    tools.add_df.attr('title', 'Click to add a field to this dataset.');
                    tools.add_df.unbind('click').click(function () {
                        $(this).effect("highlight", {}, 2000);

                        // console.log('adding field to datatype: ' + datatype_id);

                        // Locate a theme element that's not being used for child/linked datatypes, if possible
                        var te = null;
                        $("#DataType_" + datatype_id + " > .ODRFieldArea > .ODRThemeElement").each(function () {
                            var te_id = $(this).attr('id').replace('ThemeElement_', '');
                            var te_props = theme_element_properties[te_id];

                            if ( te === null && !te_props.child_is_link && !te_props.has_childtype ) {
                                te = $(this);
                                // console.log('found existing suitable ThemeElement: ' + te_id, te_props);
                            }
                        });

                        if (te != null) {
                            // Add child dataset to the previously found theme element
                            var te_id = te.attr('id').replace('ThemeElement_', '');
                            addDataField(te_id);
                        }
                        else {
                            // Create a new theme element in this theme, then add a datafield to it
                            var theme_id = datatype_properties[datatype_id].theme_id;
                            // console.log('creating new theme element in datatype: ' + datatype_id + ', theme: ' + theme_id);
                            addThemeElement(theme_id, function (new_theme_element_id) {
                                addDataField(new_theme_element_id);
                            });
                        }
                    });
                }
                else {
                    // User isn't allowed to modify this datatype
                    tools.add_df.addClass('faded');
                    tools.add_df.find('i').removeClass('ODRActiveIcon');
                    // tools.add_df.find('.link-text').html('Add Field');
                    // tools.add_df.attr('title', 'Click to add a field to this dataset.');
                    tools.add_df.unbind('click');
                }

                // ----------------------------------------
                // Add child dataset
                if ( is_datatype_admin) {
                    tools.add_cdt.removeClass('faded');
                    tools.add_cdt.find('i').addClass('ODRActiveIcon');
                    tools.add_cdt.find('.link-text').html('Add a Child Field Set');
                    tools.add_cdt.attr('title', 'Click to add a child field set.');
                    tools.add_cdt.unbind('click').click(function () {
                        $(this).effect("highlight", {}, 2000);

                        // console.log('adding child dataset to datatype: ' + datatype_id);

                        // Locate an empty theme element, if possible
                        var te = null;
                        $("#DataType_" + datatype_id + " > .ODRFieldArea > .ODRThemeElement").each(function () {
                            var te_id = $(this).attr('id').replace('ThemeElement_', '');
                            var te_props = theme_element_properties[te_id];

                            if ( te === null && !te_props.has_datafields && !te_props.child_is_link && !te_props.has_childtype ) {
                                te = $(this);
                                // console.log('found existing empty ThemeElement: ' + te_id, te_props);
                            }
                        });

                        if (te != null) {
                            // Add child dataset to the empty theme element
                            var te_id = te.attr('id').replace('ThemeElement_', '');
                            addChildType(te_id);
                            ScrollHighlight("#ThemeElement_" + te_id);
                        }
                        else {
                            // Create a new theme element in this theme, then add a child dataset to it
                            var theme_id = datatype_properties[datatype_id].theme_id;
                            // console.log('creating new theme element in datatype: ' + datatype_id + ', theme: ' + theme_id);
                            addThemeElement(theme_id, function (new_theme_element_id) {
                                addChildType(new_theme_element_id);
                            });
                        }
                    });
                }
                else {
                    // User isn't allowed to modify this datatype
                    tools.add_cdt.addClass('faded');
                    tools.add_cdt.find('i').removeClass('ODRActiveIcon');
                    // tools.add_cdt.find('.link-text').html('Add a Child Field Set');
                    // tools.add_cdt.attr('title', 'Click to add a child field set.');
                    tools.add_cdt.unbind('click');
                }

                // ----------------------------------------
                // Link to dataset
                tools.link_dt.removeClass('faded');
                tools.link_dt.find('i').addClass('ODRActiveIcon');

                if ( isMasterType ) {
                    if ( props.is_link ) {
                        // User clicked on a datatype that is a linked template
                        tools.link_dt.find('.link-text').html('Linked Template');
                        tools.link_dt.attr('title', 'This is a linked template.  Click to choose a different template.');
                    }
                    else {
                        // User clicked on a datatype that's not a linked template
                        tools.link_dt.find('.link-text').html('Link to a Template');
                        tools.link_dt.attr('title', 'Click to link in a layout from an existing template.');
                    }
                }
                else {
                    if ( props.is_link ) {
                        // User clicked on a datatype that is a linked dataset
                        tools.link_dt.find('.link-text').html('Linked Dataset');
                        tools.link_dt.attr('title', 'This is a linked dataset.  Click to choose a different dataset.');
                    }
                    else {
                        // User clicked on a datatype that's not a linked dataset
                        tools.link_dt.find('.link-text').html('Link to a Dataset');
                        tools.link_dt.attr('title', 'Click to link in data from an existing dataset.');
                    }
                }

                if ( props.is_link ) {
                    // User clicked on a datatype that is a linked dataset/template...all users are
                    //  allowed to open the related modal, though they still need permissions to
                    //  actually make changes
                    tools.link_dt.unbind('click').click(function () {
                        $(this).effect("highlight", {}, 2000);

                        if ( theme_element_id !== undefined ) {
                            // Can't use DOM to find the correct linked dataset/template...there
                            //  could be more than one of them on the page.  Have to use the
                            //  given theme_element_id instead, but only if it was provided

                            // Open the modal to view/modify the link's properties
                            linkDatatype(theme_element_id);
                        }
                    });
                }
                else if ( is_datatype_admin ) {
                    // User clicked on a datatype that's not a linked dataset/template
                    // The tool should only do something if they're an admin for this datatype
                    tools.link_dt.unbind('click').click(function () {
                        $(this).effect("highlight", {}, 2000);

                        // console.log('linking dataset into datatype: ' + datatype_id);

                        // Locate an empty theme element, if possible
                        var te = null;
                        $("#DataType_" + datatype_id + " > .ODRFieldArea > .ODRThemeElement").each(function () {
                            var te_id = $(this).attr('id').replace('ThemeElement_', '');
                            var te_props = theme_element_properties[te_id];

                            if ( te === null && !te_props.has_datafields && !te_props.child_is_link && !te_props.has_childtype ) {
                                te = $(this);
                                // console.log('found existing empty ThemeElement: ' + te_id, te_props);
                            }
                        });

                        if (te != null) {
                            // Add dataset from template to the empty theme element
                            var te_id = te.attr('id').replace('ThemeElement_', '');
                            linkDatatype(te_id);
                            ScrollHighlight("#ThemeElement_" + te_id);
                        }
                        else {
                            // Create a new theme element in this theme, then open the "link datatype" modal
                            var theme_id = datatype_properties[datatype_id].theme_id;
                            // console.log('creating new theme element in datatype: ' + datatype_id + ', theme: ' + theme_id);
                            addThemeElement(theme_id, function(theme_element_id) {
                                linkDatatype(theme_element_id);
                            });
                        }
                    });
                }
                else {
                    // User can't link to or unlink from anything here
                    tools.link_dt.unbind('click');
                }

                // ----------------------------------------
                // Any non linked datatype can link from a template
                if ( !props.is_link && is_datatype_admin ) {
                    tools.link_ft.removeClass('faded');
                    tools.link_ft.find('i').addClass('ODRActiveIcon');
                    tools.link_ft.find('.link-text').html('Add from Template');
                    tools.link_ft.attr('title', 'Click to create a dataset from a template and link it to this dataset.');
                    tools.link_ft.unbind('click').click(function () {
                        $(this).effect("highlight", {}, 2000);

                        // console.log('adding dataset from template to datatype: ' + datatype_id);

                        // Locate an empty theme element, if possible
                        var te = null;
                        $("#DataType_" + datatype_id + " > .ODRFieldArea > .ODRThemeElement").each(function () {
                            var te_id = $(this).attr('id').replace('ThemeElement_', '');
                            var te_props = theme_element_properties[te_id];

                            if ( te === null && !te_props.has_datafields && !te_props.child_is_link && !te_props.has_childtype ) {
                                te = $(this);
                                // console.log('found existing empty ThemeElement: ' + te_id, te_props);
                            }
                        });

                        if (te != null) {
                            // Add dataset from template to the empty theme element
                            var te_id = te.attr('id').replace('ThemeElement_', '');
                            linkFromTemplate(te_id);
                            ScrollHighlight("#ThemeElement_" + te_id);
                        }
                        else {
                            // Create a new theme element, then open the linking modal
                            var theme_id = datatype_properties[datatype_id].theme_id;
                            // console.log('creating new theme element in datatype: ' + datatype_id + ', theme: ' + theme_id);
                            addThemeElement(theme_id, function (theme_element_id) {
                                linkFromTemplate(theme_element_id);
                            });
                        }
                    });
                }
                else {
                    // User isn't allowed to modify this datatype
                    tools.link_ft.addClass('faded');
                    tools.link_ft.find('i').removeClass('ODRActiveIcon');
                    // tools.link_ft.find('.link-text').html('Add from Template');
                    // tools.link_ft.attr('title', 'Click to create a dataset from a template and link it to this dataset.');
                    tools.link_ft.unbind('click');
                }

                // ----------------------------------------
                // Render Plugin
                tools.render.removeClass('faded');
                tools.render.find('i').addClass('ODRActiveIcon');

                if (props.render_plugin_classname === "odr_plugins.base.default") {
                    tools.render.find('.link-text').html('Change Render Plugin');
                    tools.render.attr('title', 'Change Render Plugin');
                }
                else {
                    tools.render.find('.link-text').html('Custom Render');
                    tools.render.attr('title', 'Rendered using "' + props.render_plugin_name + '"');
                }

                if ( is_datatype_admin ) {
                    tools.render.unbind('click').click(function () {
                        // console.log('Changing render plugin for datatype: ', datatype_id);
                        changeRenderPlugin(datatype_id, 'datatype');
                    });
                }
                else {
                    // User isn't allowed to modify this datatype
                    tools.render.addClass('faded');
                    tools.render.find('i').removeClass('ODRActiveIcon');
                    tools.render.unbind('click');
                }

                // ----------------------------------------
                // Dataset public status
                tools.pub_stat.removeClass('faded');
                if (props.is_public > 0) {
                    tools.pub_stat.find('i').addClass('ODRActiveIcon');
                    tools.pub_stat.find('.link-text').html('Dataset is Public');
                    tools.pub_stat.attr('title', 'Users may view any record or field in the dataset that has been marked public without additional permissions.');
                }
                else {
                    tools.pub_stat.find('i').removeClass('ODRActiveIcon');
                    tools.pub_stat.find('.link-text').html('Dataset is Private');
                    tools.pub_stat.attr('title', 'Only logged in users with specific rights to this dataset may view the dataset.');
                }

                if ( is_datatype_admin ) {
                    tools.pub_stat.unbind('click').click(function () {
                        togglePublic(datatype_id, 'datatype');
                    });
                }
                else {
                    // User isn't allowed to modify this datatype
                    tools.pub_stat.unbind('click');
                }

                // ----------------------------------------
                // Delete dataset
                if ( !props.is_top_level && is_datatype_admin ) {
                    // Only allowed on not-top-level datatypes the user can modify
                    tools.del_dt.find('i').addClass('ODRActiveIcon');
                    tools.del_dt.removeClass('faded');
                    tools.del_dt.attr('title', 'Click to delete this dataset.');
                    if ( !props.is_link )
                        tools.del_dt.find('.link-text').html('Delete Child Field Set');
                    else
                        tools.del_dt.find('.link-text').html('Delete Linked Field Set');
                    tools.del_dt.unbind('click').click(function () {
                        if (confirm("This will delete the selected dataset and ALL its data (including files and images).\n\nAre you certain you want to proceed?")) {
                            DeleteDatatype(datatype_id);
                        }
                    });
                }
                else {
                    // User can't modify this datatype
                    tools.del_dt.find('i').removeClass('ODRActiveIcon');
                    tools.del_dt.addClass('faded');
                    // tools.del_dt.attr('title', 'Click to delete this dataset.');
                    // tools.del_dt.find('.link-text').html('Delete Child Field Set');
                    tools.del_dt.unbind('click');
                }

                break;

            case 'theme_element':
                var theme_element_id = entity_id;
                var props = theme_element_properties[theme_element_id];
                // console.log('RenderToolSet() theme_element ' + theme_element_id + ' Props: ', props);

                // Locate this ThemeElement's datatype...need to store whether user is a datatype admin
                var datatype_id_data = $("#ThemeElement_" + theme_element_id).parents(".ODRDataType").first().attr('id').split(/_/);
                var datatype_id = datatype_id_data[1];

                var is_datatype_admin = false;
                if ( datatype_properties[datatype_id].is_datatype_admin )
                    is_datatype_admin = true;
                // console.log('is_datatype_admin?', is_datatype_admin);

                // ----------------------------------------
                // Can't add a ThemeElement/Group Box to a ThemeElement

                // ----------------------------------------
                // Add Field
                if ( is_datatype_admin && !props.has_childtype && props.child_is_link === 0 ) {
                    tools.add_df.removeClass('faded');
                    tools.add_df.find('i').addClass('ODRActiveIcon');
                    tools.add_df.find('.link-text').html('Add Field');
                    tools.add_df.attr('title', 'Click to add a field to this dataset.');
                    tools.add_df.unbind('click').click(function () {
                        addDataField(theme_element_id);
                    });
                }
                else {
                    // User isn't allowed to modify this datatype, or it already has a child/linked datatype
                    tools.add_df.addClass('faded');
                    tools.add_df.find('i').removeClass('ODRActiveIcon');
                    // tools.add_df.find('.link-text').html('Add Field');
                    // tools.add_df.attr('title', 'Click to add a field to this dataset.');
                    tools.add_df.unbind('click');
                }

                // ----------------------------------------
                // Add child dataset
                if ( is_datatype_admin && !props.has_childtype && !props.has_datafields && props.child_is_link === 0 ) {
                    tools.add_cdt.removeClass('faded');
                    tools.add_cdt.find('i').addClass('ODRActiveIcon');
                    tools.add_cdt.find('.link-text').html('Add a Child Field Set');
                    tools.add_cdt.attr('title', 'Click to add a child field set.');
                    tools.add_cdt.unbind('click').click(function () {
                        addChildType(theme_element_id);
                    });
                }
                else {
                    // User isn't allowed to modify this datatype, or it's not empty
                    tools.add_cdt.addClass('faded');
                    tools.add_cdt.find('i').removeClass('ODRActiveIcon');
                    // tools.add_cdt.find('.link-text').html('Add a Child Field Set');
                    // tools.add_cdt.attr('title', 'Click to add a child field set.');
                    tools.add_cdt.unbind('click');
                }

                // ----------------------------------------
                // Link to dataset
                tools.link_dt.removeClass('faded');
                tools.link_dt.find('i').addClass('ODRActiveIcon');

                if ( isMasterType ) {
                    if ( props.child_is_link ) {
                        // User clicked on a datatype that is a linked template
                        tools.link_dt.find('.link-text').html('Linked Template');
                        tools.link_dt.attr('title', 'This is a linked template.  Click to choose a different template.');
                    }
                    else {
                        // User clicked on a datatype that's not a linked template
                        tools.link_dt.find('.link-text').html('Link to a Template');
                        tools.link_dt.attr('title', 'Click to link in a layout from an existing template.');
                    }
                }
                else {
                    if ( props.child_is_link ) {
                        // User clicked on a datatype that is a linked dataset
                        tools.link_dt.find('.link-text').html('Linked Dataset');
                        tools.link_dt.attr('title', 'This is a linked dataset.  Click to choose a different dataset.');
                    }
                    else {
                        // User clicked on a datatype that's not a linked dataset
                        tools.link_dt.find('.link-text').html('Link to a Dataset');
                        tools.link_dt.attr('title', 'Click to link in data from an existing dataset.');
                    }
                }

                if ( is_datatype_admin ) {
                    if ( props.child_is_link ) {
                        // User clicked on a theme_element that has a linked dataset/template
                        tools.link_dt.unbind('click').click(function () {
                            // Open the modal to view/modify the link's properties
                            linkDatatype(theme_element_id);
                        });
                    }
                    else if ( !props.has_childtype && !props.has_datafields ) {
                        // User clicked on an empty theme_element
                        tools.link_dt.unbind('click').click(function () {
                            // Open the modal to view/modify the link's properties
                            linkDatatype(theme_element_id);
                        });
                    }
                    else {
                        // User clicked on a theme_element that isn't eligible for linking
                        tools.link_dt.addClass('faded');
                        tools.link_dt.unbind('click');
                    }
                }
                else {
                    // User can't link to or unlink from anything here
                    tools.link_dt.addClass('faded');
                    tools.link_dt.unbind('click');
                }

                // ----------------------------------------
                // Any non linked datatype can link from a template
                if ( is_datatype_admin && !props.has_childtype && !props.has_datafields && props.child_is_link === 0 ) {
                    tools.link_ft.removeClass('faded');
                    tools.link_ft.find('i').addClass('ODRActiveIcon');
                    tools.link_ft.find('.link-text').html('Add from Template');
                    tools.link_ft.attr('title', 'Click to create a dataset from a template and link it to this dataset.');
                    tools.link_ft.unbind('click').click(function () {
                        $(this).effect("highlight", {}, 2000);

                        // console.log('using existing empty ThemeElement: ' + te_id, te_props);
                        linkFromTemplate(theme_element_id);
                    });
                }
                else {
                    // User isn't allowed to modify this datatype, or the theme_element isn't empty
                    tools.link_ft.addClass('faded');
                    tools.link_ft.find('i').removeClass('ODRActiveIcon');
                    // tools.link_ft.find('.link-text').html('Add from Template');
                    // tools.link_ft.attr('title', 'Click to create a dataset from a template and link it to this dataset.');
                    tools.link_ft.unbind('click');
                }

                // ----------------------------------------
                // ThemeElements don't have Render Plugins

                // ----------------------------------------
                // ThemeElements don't have public status

                // ----------------------------------------
                // Delete ThemeElement/Group Box is always available...the user has admin permissions
                //  to the local dataype, and is only modifying a copy of the master theme for a
                //  linked/remote datatype
                if ( !props.child_is_link && !props.has_childtype && !props.has_datafields ) {
                    tools.del_dt.removeClass('faded');
                    tools.del_dt.find('i').addClass('ODRActiveIcon');
                    tools.del_dt.find('.link-text').html('Delete Group Box');
                    tools.del_dt.attr('title', 'Click to delete this group box.');
                    tools.del_dt.unbind('click').click(function () {
                        deleteThemeElement(theme_element_id);
                    });
                }
                else {
                    tools.del_dt.attr('title', 'A Group Box can only be deleted if it is empty.  Delete all contents before attempting to delete.');
                    tools.del_dt.unbind('click');
                }
                break;

            case 'datafield':
                var datafield_id = entity_id;
                var props = datafield_properties[datafield_id];
                // console.log('RenderToolSet() datafield ' + datafield_id + ' Props: ', props);

                // Locate this datafield's datatype...need to store whether user is a datatype admin
                var datatype_id_data = $("#Field_" + datafield_id).parents(".ODRDataType").first().attr('id').split(/_/);
                var datatype_id = datatype_id_data[1];

                var is_datatype_admin = false;
                if ( datatype_properties[datatype_id].is_datatype_admin )
                    is_datatype_admin = true;
                // console.log('is_datatype_admin?', is_datatype_admin);

                // ----------------------------------------
                // Can't add a ThemeElement/Group Box to a Datafield

                // ----------------------------------------
                // Can't add a datafield to a Datafield
                // This element handles copying of datafields instead
                tools.add_df.parent().hide();
                tools.copy_df.parent().show();

                if ( is_datatype_admin && props.can_copy ) {
                    tools.copy_df.removeClass('faded');
                    tools.copy_df.find('i').addClass('ODRActiveIcon');
                    tools.copy_df.unbind('click').click(function () {
                        CopyDatafield(datafield_id);
                    });
                }
                else {
                    // User isn't allowed to modify this datatype, or the datafield can't be copied
                    tools.copy_df.addClass('faded');
                    tools.copy_df.find('i').removeClass('ODRActiveIcon');
                    tools.copy_df.unbind('click');
                }

                // ----------------------------------------
                // Can't add a child dataset to a Datafield

                // ----------------------------------------
                // Can't link to dataset in a Datafield

                // ----------------------------------------
                // Can't link to a template in a Datafield

                // ----------------------------------------
                // Render Plugin
                tools.render.removeClass('faded');
                tools.render.find('i').addClass('ODRActiveIcon');

                if (props.render_plugin_classname === "odr_plugins.base.default") {
                    if ( is_datatype_admin ) {
                        tools.render.find('.link-text').html('Change Render Plugin');
                        tools.render.attr('title', 'Change Render Plugin');
                    }
                    else {
                        tools.render.find('.link-text').html('Default Render Plugin');
                        // tools.render.attr('title', 'Change Render Plugin');
                    }
                }
                else {
                    tools.render.find('.link-text').html('Custom Render Plugin');
                    tools.render.attr('title', 'Rendered using "' + props.render_plugin_name + '"');
                }

                if ( is_datatype_admin ) {
                    tools.render.unbind('click').click(function () {
                        // console.log('Changing render plugin for datafield: ', datafield_id);
                        changeRenderPlugin(datafield_id, 'datafield');
                    });
                }
                else {
                    // User isn't allowed to modify this datatype
                    tools.render.find('i').removeClass('ODRActiveIcon');
                    tools.render.unbind('click');
                }

                // ----------------------------------------
                // Public status
                tools.pub_stat.removeClass('faded');
                if (props.is_public > 0) {
                    tools.pub_stat.find('i').addClass('ODRActiveIcon');
                    tools.pub_stat.find('.link-text').html('Field is Public');
                    tools.pub_stat.attr('title', 'Users may view fields marked public without additional permissions if the parent record is also public.');
                }
                else {
                    tools.pub_stat.find('i').removeClass('ODRActiveIcon');
                    tools.pub_stat.find('.link-text').html('Field is Private');
                    tools.pub_stat.attr('title', 'Only logged in users may view this field.');
                }

                if ( is_datatype_admin && props.can_change_public_status ) {
                    tools.pub_stat.unbind('click').click(function () {
                        togglePublic(datafield_id, 'datafield');
                    });
                }
                else {
                    // User isn't allowed to modify this datafield, or public status can't be changed
                    tools.pub_stat.unbind('click');
                }

                // ----------------------------------------
                // Delete Datafield
                if ( is_datatype_admin && props.can_delete) {
                    tools.del_dt.removeClass('faded');
                    tools.del_dt.find('i').addClass('ODRActiveIcon');
                    tools.del_dt.attr('title', 'Click to delete this field.');
                    tools.del_dt.find('.link-text').html('Delete Field');
                    tools.del_dt.unbind('click').click(function () {
                        if (confirm("This will delete the Datafield from all layouts, and ALL data (including files and images) stored in it.\n\nAre you certain you want to do this?")) {
                            DeleteDatafield(datafield_id);
                        }
                    });
                }
                else {
                    // User isn't allowed to modify this datafield, or the field can't be deleted
                    tools.del_dt.addClass('faded');
                    tools.del_dt.find('i').removeClass('ODRActiveIcon');
                    tools.del_dt.attr('title', props.delete_message);
                    tools.del_dt.unbind('click');
                }
                break;

            default:
                break;
        }
    }

    function sidebarDefaultClick() {
        // console.log('default click');
        $.jGrowl('You must first select an element from the page to modify its settings.');
    }

    /**
     * Opens the modal to view/change the datatype link residing in the given theme_element.
     *
     * @param {number} theme_element_id
     */
    function linkFromTemplate(theme_element_id) {
        // Find the datatype that this theme_element belongs to
        var local_datatype = $('#ThemeElement_' + theme_element_id).parents('.ODRDataType').first().attr('id').split(/_/);
        var local_datatype_id = local_datatype[1];

        {# defined in Link::link_from_template_dialog.html.twig #}
        openLinkFromTemplateDialog(local_datatype_id, theme_element_id);
    }

    /**
     * Opens the modal to view/change the datatype link residing in the given theme_element.
     *
     * @param {number} theme_element_id
     */
    function linkDatatype(theme_element_id) {
        // Find the datatype that this theme_element belongs to
        var local_datatype = $('#ThemeElement_' + theme_element_id).parents('.ODRDataType').first().attr('id').split(/_/);
        var local_datatype_id = local_datatype[1];

        {# defined in Link::link_type_dialog.html.twig #}
        openLinkDatatypeDialog(local_datatype_id, theme_element_id);
    }

    /**
     * Opens the modal to view/change the current datatype/datafield's render plugin.
     *
     * @param {number} id
     * @param {string} element_type
     */
    function changeRenderPlugin(id, element_type) {
        var datatype_id = 0;
        var datafield_id = 0;

        if ( element_type === 'datatype' ) {
            datatype_id = id;
        }
        else if ( element_type === 'datafield' ) {
            datafield_id = id;
        }
        else {
            return;
        }

        {# defined in Displaytemplate::plugin_settings_dialog.html.twig #}
        openPluginSettingsDialog(datafield_id, datatype_id);
    }

    /**
     * Creates and attaches a new child datatype to the given theme_element.
     *
     * @param {number} theme_element_id
     */
    function addChildType(theme_element_id) {
        // Load display template menu
        var url  = '{{ path('odr_design_add_childtype', {'theme_element_id': 0 } ) }}';
        url = url.substring(0,(url.length - 1)) + theme_element_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                if ( data.d.reload === 'theme_element' ) {
                    // Childtype was added to the local datatype, only need to reload a single
                    //  theme element
                    ReloadThemeElement(data.d.id);
                }
                else if ( data.d.reload === 'datatype' ) {
                    // Childtype was added to a linked datatype, might need to reload multiple
                    //  sections of the page
                    ReloadChild(data.d.id);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Deletes the given theme_element.
     *
     * @param {number} theme_element_id
     */
    function deleteThemeElement(theme_element_id) {
        // Don't allow deletion of a theme element that has datafields or a child/linked datatype attached to it
        // if ( $(this).hasClass('fa-muted') )
        // return;

        var url = '{{ path('odr_design_delete_theme_element', { 'theme_element_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += theme_element_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function () {
                // Remove theme element from page
                $("#ThemeElement_" + theme_element_id).fadeOut('slow').remove();

                // Update the sidebar so it no longer references the now-deleted theme element
                ResetToolSet();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function (jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * Creates and attaches a new datafield to the given theme_element.
     *
     * @param {number} theme_element_id
     */
    function addDataField(theme_element_id) {

        var url = '{{ path('odr_design_add_datafield', { 'theme_element_id': 0 }) }}';
        url = url.substring(0, (url.length - 1)) + theme_element_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // Clear object properties panel
                $("#ThemeDesignForm").html("");

                if ( data.d.reload === 'theme_element' ) {
                    // Datafield was added to the local datatype, only need to reload a single
                    //  theme element
                    ReloadThemeElement(data.d.id);
                }
                else if ( data.d.reload === 'datatype' ) {
                    // Datafield was added to a linked datatype, might need to reload multiple
                    //  sections of the page
                    ReloadChild(data.d.id);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Creates and attaches a new theme_element to the given datatype.
     *
     * @param {number} theme_id
     * @param {function} [callback]
     */
    function addThemeElement(theme_id, callback) {
        if (callback === undefined) {
            callback = function() {}
        }

        var url = '{{ path('odr_design_add_theme_element', { 'theme_id': 0 }) }}';
        url = url.substring(0, url.length-1) + theme_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                // Clear object properties panel
                // $("#ThemeDesignForm").html("");

                // Grab ID of new theme element
                var theme_element_id = data.d.theme_element_id;
                var datatype_id = data.d.datatype_id;

                // The server has returned HTML for a blank theme_element...when appended,
                //  the theme_element_properties array will be updated
                $("#FieldArea_" + datatype_id).append(data.d.html);

                // Ensure the theme thinks the new theme_element is at the end of the list
                SaveThemeElementOrder("#FieldArea_" + datatype_id);

                // Init the page
                initPage();

                // Show the element
                ScrollHighlight("#ThemeElement_" + theme_element_id);
                // console.log('after adding theme_element ' + theme_element_id + ':', theme_element_properties);

                // Run the callback
                callback(theme_element_id);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Scrolls to the given element on the page, if possible.
     *
     * @param {HTMLElement} element
     * @param {HTMLElement} [container]
     */
    function ScrollHighlight(element, container) {
        var obj = $(element);
        if (container === undefined) {
            container = $('html, body');

            // Only Scroll to element if it is not visible
            if ( !obj.isInViewport() ) {
                container.animate({
                    scrollTop: obj.offset().top + obj.height()
                }, 1000)
            }
        }
        else {
            container.animate({
                scrollTop: obj.prop('offsetTop')
            }, 1000)
        }
        // Highlight
        // console.log('highlighting.....');
        obj.effect("highlight", {}, 3000);
    }

    $.fn.isOverflowHiddenY = function(container) {
        var element = $(this);
        // console.log(element.offset());
        // console.log(container.prop('scrollHeight'));
        // console.log(container.height());
        return (element.offset().top > container.height());
    };

    $.fn.isInViewport = function() {
        var elementTop = $(this).offset().top;
        var elementBottom = elementTop + $(this).outerHeight();

        var viewportTop = $(window).scrollTop();
        var viewportBottom = viewportTop + $(window).height();

        return elementBottom > viewportTop && elementTop < viewportBottom;
    };

    /**
     * Toggles the public status of the given entity.
     *
     * @param {number} id
     * @param {string} element_type
     */
    function togglePublic(id, element_type) {

        switch(element_type) {
            case 'datatype':
                var datatype_id = id;
                var element = $("#ODRDatatype_" + datatype_id + "_publicStatus");

                var url  = '{{ path('odr_design_public_datatype', {'datatype_id': 0} ) }}';
                url = url.substring(0,(url.length-1));
                url += datatype_id;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function() {
                        notifySaved();

                        // Toggle muted status
                        $(element).toggleClass('ODRActiveIcon');

                        // Change the locally stored properties value and re-render the tools section
                        var props = datatype_properties[datatype_id];
                        props.is_public = !props.is_public;
                        RenderToolSet(datatype_id, 'datatype');
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function(jqXHR) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }
                    }
                });
                break;

            case 'datafield':
                var datafield_id = id;
                element = $('#ODRDatafield_' + datafield_id + '_publicStatus');

                url  = '{{ path('odr_design_public_datafield', {'datafield_id': 0} ) }}';
                url = url.substring(0,(url.length-1));
                url += datafield_id;

                $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function() {
                        notifySaved();

                        // Toggle muted status
                        if ( $(element).hasClass('ODRActiveIcon') ) {
                            $(element).removeClass('ODRActiveIcon');
                            $(element).attr('title', 'Datafield requires permission to view');
                        }
                        else {
                            $(element).addClass('ODRActiveIcon');
                            $(element).attr('title', 'Datafield does not require permission to view');
                        }

                        // Change the locally stored properties value and re-render the tools section
                        var props = datafield_properties[datafield_id];
                        props.is_public = !props.is_public;
                        RenderToolSet(datafield_id, 'datafield');
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function(jqXHR) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {
                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }
                    }
                });

                break;
        }
    }

    /**
     * Deletes the given datatype.
     *
     * @param {number} datatype_id
     */
    function DeleteDatatype(datatype_id) {

        var url = '{{ path('odr_design_delete_datatype', { 'datatype_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datatype_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function() {
                // Delete all occurrences of this datatype from the page

                // Can't just use "#Datatype_<id>" because there could be multiples of the same
                //  datatype due to linking
                $(".ODRDataType").each(function() {
                    if ( $(this).attr('id') === 'DataType_' + datatype_id ) {
                        // Need to locate the theme element this datatype instance resided in...
                        var theme_element = $(this).parents(".ODRThemeElement").first();
                        var id_data = $(theme_element).attr('id').split(/_/);
                        var theme_element_id = id_data[1];

                        // ...so the theme element properties can be updated
                        theme_element_properties[theme_element_id]['has_datafields'] = 0;
                        theme_element_properties[theme_element_id]['has_childtype'] = 0;
                        theme_element_properties[theme_element_id]['child_is_link'] = 0;

                        // Remove the HTML for this datatype
                        $(this).remove();
                    }
                });

                // Update the sidebar so it no longer references the now-deleted datatype
                ResetToolSet();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Attaches selection handles to every ThemeElement on the page, and attaches click events to
     * each datatype header so the datatype properties form can be loaded.
     */
    function InitDatatypeTools() {
        // Attach a selection handle to all ThemeElements on the page
        $("#ThemeDesignArea .ODRThemeElement").each(function() {
            // Only attach this handle to theme elements in the design area
            if ( $(this).parents(".ODRFieldArea").length === 0 )
                return;

            // Only attach this handle if the ThemeElement is lacking one
            if ( $(this).children(".ODRThemeElementHandle").length > 0 )
                return;

            // Add Resize Handles
            var handle_ne = '<span class="ODRThemeElementHandle ui-resizeable-handle ui-resizeable-ne">&#x263e;</span>';

            $(this).prepend(handle_ne);
        });

        // Initialize the handle
        $(".ODRThemeElementHandle").unbind('click').click(function() {
            // Highlight and setup element properties
            if(!$(this).parent().hasClass('ODRFieldSelected')) {
                setupElement($(this).parent(), 'theme_element');

                var theme_element_id_data = $(this).parent().attr("id").split(/_/);
                var theme_element_id = theme_element_id_data[1];
                // Prepare the Sidebar Tools
                RenderToolSet(theme_element_id, 'theme_element');
            }
        });

        // Disable text selection
        $(".ODRFieldArea").disableSelection();

        // Binding for clicking a datatype header
        $(".ODRDatatypeProperties").unbind('click').click(function() {

            // Highlight and setup element properties
            // console.log('setup tool set datatype');
            setupElement(this, 'datatype');

            // Locate this datatype's id
            var datatype = $(this).parents('.ODRDataType').first();
            var id_data = $(datatype).attr('id').split(/_/);
            var datatype_id = id_data[1];

            // Determine if this Datatype has a parent, and locate its id if possible
            var parent_datatype_id = '';

            var parents = $(datatype).parents('.ODRDataType');
            if ( $(parents).length > 0 ) {
                var id_data = $(parents).first().attr('id').split(/_/);
                parent_datatype_id = id_data[1];
            }

            // Also need the theme_element id when this is a child/linked datatype, since there could
            //  be multiple instances of this datatype on the page
            var theme_element_id = '';

            var theme_element = $(datatype).parents('.ODRThemeElement');
            if ( $(theme_element).length > 0 ) {
                var id_data = $(theme_element).first().attr('id').split(/_/);
                theme_element_id = id_data[1];
            }

            // Prepare the Sidebar Tools
            // console.log('Render tool set datatype');
            RenderToolSet(datatype_id, 'datatype', theme_element_id);    // Need to pass in the theme_element id to distinguish between instances of this datatype
            // console.log('Datatype Props 1:', datatype_properties[datatype_id]);


            // Reset the theme design form prior to reloading its contents
            var form_div = $("#ThemeDesignForm");
            $(form_div).hide().html("");

            var url = '{{ path('odr_design_get_datatype_properties', { 'datatype_id': 0, 'parent_datatype_id': 0, 'theme_element_id': 0 } ) }}';
            url = url.substring(0, (url.length - 5));
            url += datatype_id;
            if (parent_datatype_id !== '')
                url += '/' + parent_datatype_id + '/' + theme_element_id;

            // Load the datatype properties
            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data) {
                    $(form_div).html(data.d);

                    // Prepend the DataTypeTools
                    $(form_div).fadeIn('fast');
                    // InitDatatypeTools();
                    InitDatatypePropertiesForm();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        });
    }


    function initPage(reset_tools) {
        if(reset_tools === undefined) {
            reset_tools = true
        }
        // Setup Data Fields
        SetupDataFields();

        // Resets the sidebar tool set
        if(reset_tools) {
            ResetToolSet();
        }

        // Sets up the object click handlers
        InitDatatypeTools();

        // Attach click handlers to tags
        setupTagTree();    {# defined in ODRAdminBundle:Default:common_js.html.twig #}

        // Click handler to Reset Opacity
        $("#ODRDatatypeDesign").find("> .ODRDataType > .ODRFieldArea").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });

        $("#left-spacer").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });

        $("#ODRDatatypeToolsBlock p").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });

        $("#ThemeDesignForm").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });


        $("#ThemeDesignWrapper").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });

        $("#ThemeLeftColumn .ODRInnerBox").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });

        $(".ODRDesignTitle").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });


        $("#right-spacer").click(function(e) {
            if (e.target !== this)
                return;

            clearAllFields();
            ResetToolSet();
        });


        $(".ODRUndeleteFields").unbind('click').click(function() {
            /* Un-delete disabled due to redesign */

//            if ( $(this).hasClass('fa-muted') )
                return;

{#
            var datatype_id = $(this).attr('rel');

            var url  = '{{ path('odr_design_get_deleted_datafields', {'datatype_id': 0 } ) }}';
            url = url.substring(0,(url.length - 1)) + datatype_id;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function(data) {
                    $("#dialog_deleted_fields .form_contents").html(data.d.html);
                    $("#dialog_deleted_fields").dialog( "open" );
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function(jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {

                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
#}
        });


        // Don't want to be able to highlight everything...
        $("#content").find(".ODRInnerBox").disableSelection();
    }

    var datafield_properties_xhr = null;
    var save_datafield_xhr = null;
    var SaveDatafieldPropertyInterval = [];

    /**
     * Saves properties in a datafield form...name, description, search status, etc.
     *
     * @param {number} datafield_id
     * @param {boolean} reload_datafield
     */
    function SaveDatafieldProperty(datafield_id, reload_datafield) {
        if (SaveDatafieldPropertyInterval[datafield_id] !== undefined)
            SaveDatafieldPropertyInterval[datafield_id] = window.clearInterval(SaveDatafieldPropertyInterval[datafield_id]);

        var url = '{{ path('odr_design_get_datafield_properties', { 'datafield_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datafield_id;

        var form_div = $("#ThemeDesignForm");
        var post_data = $("#DatafieldPropertiesForm_" + datafield_id).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data) {
                notifySaved();

                if (data.d.force_slideout_reload === true) {
                    $(form_div).fadeOut('slow').html("");
                    $(form_div).html(data.d.html).fadeIn('slow');

                    InitDatafieldPropertiesForm();
                }

                if (reload_datafield === true) {
                    // Only reload datafield if necessary
                    ReloadDatafield(datafield_id);
                }
                else {
                    // ...otherwise, since the datafield isn't being reloaded, ensure that the
                    //  javascript always has the most recent state of what can be done to the datafield
                    var tmp = data.d.datafield_properties;
                    datafield_properties[datafield_id] = JSON.parse(tmp);    {# datafield_properties is effectively defined in design_datafield.html.twig #}
                    // console.log("new datafield properties", datafield_properties);
                }
            },
            error: function() {
                // Forcibly reload object properties panel
                $(form_div).html("");
                $("#Field_" + datafield_id).trigger('click');
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }

                save_datafield_xhr = null;
            }
        });
    }

    /**
     * Saves the width and hidden properties of a theme_datafield entity
     *
     * @param {number} theme_element_id
     * @param {number} datafield_id
     */
    function SaveThemeDatafieldProperties(theme_element_id, datafield_id) {
        var url = '{{ path('odr_design_save_theme_datafield', {'theme_element_id': 0, 'datafield_id': 0}) }}';
        url = url.substring(0, url.length-3);
        url += theme_element_id + '/' + datafield_id;

        var form_element = $("#ThemeDatafieldPropertiesForm_" + theme_element_id + "_" + datafield_id);
        var post_data = $(form_element).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data) {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    // This function is needed for setTimeout() a couple lines down in SetupDataFields()
    function triggerClick(datafield_id) {
        $("#Field_" + datafield_id).trigger('click');
    }

    /**
     * Attaches a click handler to every Datafield element on the page, so that a properties form
     * can be loaded.
     */
    function SetupDataFields() {
        $(".ODRDataField").unbind('click').click(function(event) {

            // Grab datafield id
            var id_data = $(this).attr('id').split(/_/);
            var datafield_id = id_data[1];

            // Setup Resizeable
            setupElement(this, 'datafield');

            // Render Tool Set
            RenderToolSet(datafield_id, 'datafield');

            // The icon to open RadioOption properties will be overridden by this click
            // event unless this if statement is active
            if ( event.target.className.indexOf('ODRRadioOptions') !== -1 )
                return;

            // ...same deal with datafield public status
            if ( event.target.className.indexOf('ODRPublicDatafield') !== -1 )
                return;

            // Wait for a datafield property save to finish if required
            if (save_datafield_xhr != null) {
                // TODO This is probably not a great way to do this
                window.setTimeout("triggerClick(" + datafield_id + ")", SaveTimeout);
                return;
            }

            var form_div = $("#ThemeDesignForm");

            // Check if this field is already loaded
            var form_id = "";
            var form = $(form_div).find("form.ODRDatafieldPropertiesForm");
            if (form.length > 0) {
                var form_id_data = form.attr("id").split(/_/);
                form_id = form_id_data[1];
            }

            // Load form for current datafield if not already loaded
            if (form_id !== datafield_id) {
                // Don't attempt to load the properties form for a datafield the user can't view
                // This will prevent an unecessary error message from popping up...
                $(form_div).html('').fadeIn('fast');
                if ( $(this).hasClass('ODRForbidden') )
                    return;

                var url = '{{ path('odr_design_get_datafield_properties', { 'datafield_id': 0 } ) }}';
                url = url.substring(0, (url.length - 1));
                url += datafield_id;

                // Attempt to ensure only the most recent datafield property request goes through
                if (datafield_properties_xhr !== null)
                    datafield_properties_xhr.abort();

                // Ajax Load Form in box
                datafield_properties_xhr = $.ajax({
                    cache: false,
                    type: 'GET',
                    url: url,
                    dataType: "json",
                    success: function(data) {
                        $(form_div).html(data.d.html).fadeIn('fast');
                        InitDatafieldPropertiesForm();
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        // Don't need to do anything specific on an error
                    },
                    complete: function(jqXHR) {
                        // Get the xdebugToken from response headers
                        var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                        // If the Sfjs object exists
                        if (typeof Sfjs !== "undefined") {

                            // Grab the toolbar element
                            var currentElement = $('.sf-toolbar')[0];

                            // Load the data of the given xdebug token into the current toolbar wrapper
                            Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                        }

                        datafield_properties_xhr = null;
                    }
                });
            }
        });
    }

    /**
     * Attaches event handlers to the various elements in a datfield properties form.
     */
    function InitDatafieldPropertiesForm() {
        var form_div = $("#ThemeDesignForm");
        var tdf_odpf = $("#ThemeDesignForm .ODRDatafieldPropertiesForm");

        // Init Field Properties forms
        $(".ODRRadioOptions").unbind('click').click(function() {
            {# defined in ODRAdminBundle:Displaytemplate:radio_options_wrapper_dialog.html.twig #}
            var datafield_id = $(this).attr('rel');
            openRadioOptionEditDialog(datafield_id);
        });
        $(".ODRMarkdownHelp").unbind('click').click(function() {
            {# defined in ODRAdminBundle:Displaytemplate:markdown_help_dialog.html.twig #}
            openMarkdownHelpDialog();
        });
        $(".ODRTagsEdit").unbind('click').click(function() {
            {# defined in ODRAdminBundle:Displaytemplate:tag_wrapper_dialog.html.twig #}
            var datafield_id = $(this).attr('rel');
            openTagEditDialog(datafield_id);
        });

        $(form_div).find(".ODRDeleteField").each(function() {
            var datafield_id_data = $(this).attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            $(this).unbind('click').click(function() {
                if ( $(this).hasClass('pure-button-disabled') ) {
                    // do nothing
                }
                else if( confirm("This will delete the Datafield from all layouts, and ALL data (including files and images) stored in it.\n\nAre you certain you want to do this?")) {
                    DeleteDatafield(datafield_id);
                }
            });
        });

        $(form_div).find(".ODRCopyField").each(function() {
            var datafield_id_data = $(this).attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];
            var datafield_name = $("#ODRDatafield_" + datafield_id + "_name").text();

            $(this).unbind('click').click(function() {
                if(confirm('Are you sure you want to copy "' + datafield_name + '" and all its properties into a new field?')) {
                    CopyDatafield(datafield_id);
                }
            });
        });

        // Attach event handlers to most of the rest of the input elements
        tdf_odpf.find("select").each(function() {
            // Grab Datafield id
            var datafield_id_data = tdf_odpf.attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            // Save changes
            $(this).unbind('change').change(function() {
                // fieldtype selector gets overridden further down
                var reload_datafield = 'false';
                if ( $(this).hasClass('ODRDatafieldChildren') )
                    reload_datafield = 'true';   // reload datafield upon change of images/radio options per row?

                // Don't want a delay here...otherwise a change could get lost
                SaveDatafieldProperty(datafield_id, reload_datafield);

                save_datafield_xhr = true;
            });
        });

        tdf_odpf.find("textarea").each(function() {
            // Grab Datafield id
            var datafield_id_data = tdf_odpf.attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            // Save changes
            $(this).unbind('keyup');
            $(this).unbind('paste');
            $(this).on('keyup paste', function() {
                // Want to update markdown fields immediately
                if ( $(this).hasClass('ODRDatafieldMarkdown') ) {
                    var text = $(this).val();

                    var md = window.markdownit();
                    md.disable(['table', 'strikethrough', 'blockquote']);
                    var markdown_text = md.render(text);

                    $("#Field_" + datafield_id).find(".ODRMarkdownContent").html(markdown_text);
                }

                SaveDatafieldPropertyInterval[datafield_id] = window.clearInterval(SaveDatafieldPropertyInterval[datafield_id]);
                SaveDatafieldPropertyInterval[datafield_id] = window.setInterval("SaveDatafieldProperty(" + datafield_id + ",  false)", SaveTimeout);

                save_datafield_xhr = true;
            });
        });
        tdf_odpf.find("input").each(function() {
            // Grab Datafield id
            var datafield_id_data = tdf_odpf.attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            // Save changes
            if ($(this).is(":checkbox")) {
                $(this).unbind('change').change(function() {
                    //
                    var reload_datafield = false;
                    if ( $(this).hasClass('ODRDatafieldNameSort') )
                        reload_datafield = true;   // reload datafield upon setting radio options to sort by name in the datafield

                    SaveDatafieldPropertyInterval[datafield_id] = window.clearInterval(SaveDatafieldPropertyInterval[datafield_id]);
                    SaveDatafieldPropertyInterval[datafield_id] = window.setInterval("SaveDatafieldProperty(" + datafield_id + ", " + reload_datafield + ")", SaveTimeout);

                    save_datafield_xhr = true;
                });
            }
            else {
                $(this).unbind('keyup');
                $(this).unbind('paste');
                $(this).on('keyup paste', function() {
                    //
                    if ( $(this).hasClass('ODRDatafieldName') ) {   // inline update of datafield name  TODO - error handling?
                        var text = $(this).val();
                        $("#ODRDatafield_" + datafield_id + "_name").text(text);
                    }

                    SaveDatafieldPropertyInterval[datafield_id] = window.clearInterval(SaveDatafieldPropertyInterval[datafield_id]);
                    SaveDatafieldPropertyInterval[datafield_id] = window.setInterval("SaveDatafieldProperty(" + datafield_id + ", false)", SaveTimeout);

                    save_datafield_xhr = true;
                });
            }
        });

        var fieldtype_array = {};
        {% for ft_id,ft_typename in fieldtype_array %}
        fieldtype_array[{{ ft_id }}] = "{{ ft_typename }}";
        {% endfor %}

        // Override the handler for the fieldtype selector
        tdf_odpf.find("#DatafieldsForm_field_type").each(function() {
            // Grab Datafield id
            var datafield_id_data = tdf_odpf.attr('id').split(/_/);
            var datafield_id =  datafield_id_data[1];

            // ...
            $(this).unbind('change').change(function() {

                // If datatype has datarecords, changing a fieldtype might cause loss of data
                var str = "WARNING: Changing the type of this Datafield will cause the loss of ALL data currently in this Datafield.";
                var pf = $("#previous_fieldtype");
                var previous_fieldtype_id = pf.val();
                var current_fieldtype_id = $("#DatafieldsForm_field_type").val();

                var previous_fieldtype = fieldtype_array[previous_fieldtype_id];
                var current_fieldtype = fieldtype_array[current_fieldtype_id];


                // Changes that require no extra consideration or work
                var no_warn = {
                    // single radio and single select fields can be changed to any other radio fieldtype
                    'Single Radio': ['Multiple Radio','Single Select','Multiple Select'],
                    'Single Select': ['Single Radio','Multiple Radio','Multiple Select'],
                    // markdown fields have no data to lose
                    'Markdown': ['Boolean','File','Image','Integer','Paragraph Text','Long Text','Medium Text','Single Radio','Short Text','DateTime','Multiple Radio','Single Select','Multiple Select','Decimal']
                };

                // Changes that require the server to migrate data between storage entities
                // TODO - changing other fieldtypes to radio/select fields
                var time_warn = {
                    'Integer': ['Paragraph Text','Long Text','Medium Text','Short Text','Decimal'],
                    'Long Text': ['Paragraph Text'],
                    'Medium Text': ['Paragraph Text','Long Text'],
                    'Short Text': ['Paragraph Text','Long Text','Medium Text'],
                    'Decimal': ['Paragraph Text','Long Text','Medium Text','Short Text']
                };

                // Changes from 'longer' fieldtypes to 'shorter' fieldtypes
                var length_warn = {
                    'Paragraph Text': ['Long Text','Medium Text','Short Text'],
                    'Long Text': ['Medium Text','Short Text'],
                    'Medium Text': ['Short Text']
                };

                // Changes from text fields to integer/decimal...it can easily result in lost data
                var number_warn = {
                    'Paragraph Text': ['Integer','Decimal'],
                    'Long Text': ['Integer','Decimal'],
                    'Medium Text': ['Integer','Decimal'],
                    'Short Text': ['Integer','Decimal']
                };

                // Changing from multiple radio/select to single radio/select...have to ensure at most one radio option is selected...
                var radio_warn = {
                    'Multiple Radio': ['Single Radio','Single Select'],
                    'Multiple Select': ['Single Radio','Single Select']
                };

                // Converting from decimal to integer...going to lose fractional parts of data
                var precision_warn = {
                    'Decimal': ['Integer']
                };

                // TODO - conversions to boolean?

                // All other changes necessarily result in loss of ALL data

                // Warn the user about potential issues when changing fieldtypes
                if ( no_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, no_warn[previous_fieldtype]) !== -1 ) {
                    str = '';
                }
                else if ( time_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, time_warn[previous_fieldtype]) !== -1 ) {
                    str = 'NOTICE: The server will need some time to migrate data if the type of this Datafield is changed.';
                }
                else if ( length_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, length_warn[previous_fieldtype]) !== -1 ) {
                    str = 'WARNING: You are attempting to convert a longer textfield into a shorter textfield...some data may be truncated...are you sure?';
                }
                else if ( number_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, number_warn[previous_fieldtype]) !== -1 ) {
                    str = 'WARNING: All non-numerical characters will be deleted from the textfield, and the remaining characters converted into a number...If the textfield is not mostly numerical already, the resulting values may be nonsensical...are you sure?';
                }
                else if ( radio_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, radio_warn[previous_fieldtype]) !== -1 ) {
                    str = 'WARNING: Any Datarecords where this Datafield has multiple RadioOptions selected will be modified to have at most one RadioOption selected...are you sure?';
                }
                else if ( precision_warn[previous_fieldtype] !== undefined && $.inArray(current_fieldtype, precision_warn[previous_fieldtype]) !== -1 ) {
                    str = 'WARNING: Any fractional parts of the decimal values will be dropped during this migration of data...are you sure?';
                }


                if ( $("#has_datarecords").val() === '' || str === '' || confirm(str) ) {
                    // Datatype has no datarecords attached, or user doesn't care...save the change
                    SaveDatafieldProperty(datafield_id, true);  // reload datafield because fieldtype changed
                    save_datafield_xhr = true;

                    str = '';
                    if (current_fieldtype === 'Paragraph Text')
                        str = 'No Character Limit';
                    else if (current_fieldtype === 'Long Text')
                        str = '255 Character Limit';
                    else if (current_fieldtype === 'Medium Text')
                        str = '64 Character Limit';
                    else if (current_fieldtype === 'Short Text')
                        str = '32 Character Limit';

                    if (str !== '')
                        $("#field_type_meta").attr('title', str);

                    pf.val(current_fieldtype_id);
                }
                else {
                    // Revert back to old field type
                    previous_fieldtype_id = pf.val();
                    $(this).val( previous_fieldtype_id );
                }

            });
        });

        $(form_div).fadeIn('fast');
    }

    var SaveDataTypeInterval = [];

    /**
     * Saves properties of a datatype form...name, description, external id field, etc
     *
     * @param {number} datatype_id
     */
    function SaveDatatypeProperties(datatype_id) {
        if (SaveDataTypeInterval[datatype_id] !== undefined)
            SaveDataTypeInterval[datatype_id] = window.clearInterval(SaveDataTypeInterval[datatype_id]);

        // Set Short Name equal to Long Name for Datatype Properties
        $('#UpdateDataTypeForm_short_name').val($('#UpdateDataTypeForm_long_name').val());

        var url = '{{ path('odr_design_get_datatype_properties', { 'datatype_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datatype_id;

        var form_data = $("#DatatypePropertiesForm_" + datatype_id).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            dataType: "json",
            success: function(data) {
                // TODO - ...would be nice to not have to reload when the search slug changes, but
                //  it seems unavoidable
                if ( data.d.new_url !== undefined )
                    window.location.href = data.d.new_url;

                // Changing several datatype properties (like external id field) can completely
                //  change what can be done to a datafield (like deletion)
                var tmp = data.d.datafield_properties;
                tmp = JSON.parse(tmp);    {# datafield_properties is effectively defined in design_datafield.html.twig #}
                $.each(tmp, function(df_id, df_props) {
                    datafield_properties[df_id] = df_props;
                });
                // console.log("datafield properties", datafield_properties);

                notifySaved();
            },
            error: function() {
                // Forcibly reload object properties panel
                $("#ThemeDesignForm").html("");
                $("#DataTypeTools_" + datatype_id + " > .ODRDatatypeProperties").trigger('click');
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Saves properties of a datatree form...currently, only controls whether a child/linked datatype
     * can have multiple child/linked datarecords or not.
     *
     * @param {number} datatree_id
     */
    function SaveDatatreeProperties(datatree_id) {
        var url = '{{ path('odr_design_save_datatree', {'datatree_id': 0}) }}';
        url = url.substring(0, (url.length - 1));
        url += datatree_id;

        var form_data = $("#DatatreePropertiesForm_" + datatree_id).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            dataType: "json",
            success: function() {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Saves properties of a theme datatype form, which controls how a child/linked datatype is
     * displayed.
     *
     * @param {number} theme_element_id
     * @param {number} datatype_id
     */
    function SaveThemeDatatypeProperties(theme_element_id, datatype_id) {

        var url = '{{ path('odr_design_save_theme_datatype', {'theme_element_id': 0, 'datatype_id': 0}) }}';
        url = url.substring(0, (url.length - 3));
        url += theme_element_id + '/' + datatype_id;

        var form_data = $("#ThemeDatatypePropertiesForm_" + theme_element_id + "_" + datatype_id).serialize();
        $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            dataType: "json",
            success: function() {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Saves the results of moving a theme_element inside a datatype.
     *
     * @param {HTMLElement} container - The .ODRFieldArea element that is the direct parent of the theme_element being moved
     */
    function SaveThemeElementOrder(container) {

        var i = 0;
        var theme_element_ids = {};
        $(container).children(".ODRThemeElement").each(function() {
            var id_data = $(this).attr('id').split(/_/);
            theme_element_ids[i] = id_data[1];
            i++;
        });

        var url = '{{ path('odr_design_save_theme_element_order') }}';

        $.ajax({
            cache: false,
            type: 'POST',
            data: theme_element_ids,
            url: url,
            dataType: "json",
            success: function() {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * When a datafield is moved to a different themeElement, the server needs to create a new
     * themeDatafield entry...but due to the asynchronous nature of the UI, the browser could end up
     * requesting that themeDatafield entry before it actually gets created, in which case the user
     * will see an error popup even though technically nothing is wrong.
     */
    var load_themeDatafield_delay = {};

    /**
     * Saves the results of moving a datafield inside a theme_element, or to a different theme_element.
     *
     * @param {HTMLElement} container - The .ODRInnerBox element that is the direct parent of the datafields in the destination theme_element
     * @param {number} datafield_id - The id of the datafield that triggered this function by being moved
     * @param {number} source_theme_element_id - The id of the theme_element that the moved datafield started in
     * @param {number} dest_theme_element_id - The id of the theme_element that the moved datafield ended in
     */
    function SaveDatafieldOrder(container, datafield_id, source_theme_element_id, dest_theme_element_id) {

        var i = 0;
        var datafield_ids = {};
        $(container).children(".ODRDataField").each(function() {
            var id_data = $(this).attr('id').split(/_/);
            datafield_ids[i] = id_data[1];
            i++;
        });

        // console.log('SaveDatafieldOrder(), datafield_id: ' + datafield_id + ' source theme_element: ' + source_theme_element_id + ' dest theme_element: ' + dest_theme_element_id);

        // Get the id numbers of the passed-in theme elements
        var theme_element = source_theme_element_id.split(/_/);
        var initial_theme_element_id = theme_element[1];
        theme_element = dest_theme_element_id.split(/_/);
        var ending_theme_element_id = theme_element[1];

        var url = '{{ path('odr_design_save_datafield_order', {'initial_theme_element_id': 0, 'ending_theme_element_id' : 0} ) }}';
        url = url.substring(0, url.length-3);
        url += initial_theme_element_id + '/' + ending_theme_element_id;

        // If the datafield got moved to a new theme element...
        if ( initial_theme_element_id !== ending_theme_element_id ) {
            // ...then any attempt to load the datafield's themeDatafield entry needs to wait until
            //  this ajax function finishes
            var key = datafield_id + '_' + ending_theme_element_id;
            load_themeDatafield_delay[key] = 1;
            // console.log('need themeDatafield delay', load_themeDatafield_delay);

            // Also throw up an overlay so the user can't attempt to resize a datafield until the
            //  themeDatafield entry exists
            insertLoadingDiv( $("#ThemeElement_" + ending_theme_element_id) );
        }

        $.ajax({
            cache: false,
            type: 'POST',
            data: datafield_ids,
            url: url,
            dataType: "json",
            success: function() {
                notifySaved();

                // Ensure the properties of both the source and the destination theme elements are
                //  kept up to date
                var initial_te_length = $("#ThemeElement_" + initial_theme_element_id).children(".ODRDataField").length;
                if ( initial_te_length > 0 )
                    theme_element_properties[initial_theme_element_id].has_datafields = 1;
                else
                    theme_element_properties[initial_theme_element_id].has_datafields = 0;

                var ending_te_length = $("#ThemeElement_" + ending_theme_element_id).children(".ODRDataField").length;
                if (ending_te_length > 0)
                    theme_element_properties[ending_theme_element_id].has_datafields = 1;
                else
                    theme_element_properties[ending_theme_element_id].has_datafields = 0;
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // If this ajax request was for a datafield being moved into a different themeElement...
                var key = datafield_id + '_' + ending_theme_element_id;
                if ( load_themeDatafield_delay[key] !== undefined && load_themeDatafield_delay[key] !== null ) {
                    // ...then delete the delay entry because the themeDatafield entry exists now
                    delete load_themeDatafield_delay[key];
                    // console.log('SaveDatafieldOrder() complete', load_themeDatafield_delay);

                    // Also get rid of the overlay div
                    removeLoadingDiv( $("#ThemeElement_" + ending_theme_element_id) );
                }

                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Saves the width and hidden properties of a theme_element
     *
     * @param {number} theme_element_id
     */
    function SaveThemeElementProperties(theme_element_id) {
        var url = '{{ path('odr_design_get_theme_element_properties', { 'theme_element_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += theme_element_id;

        var form_data = $("#ThemeElementPropertiesForm_" + theme_element_id).serialize();
        // console.log('SaveThemeElementProperties()', form_data);

        $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            dataType: "json",
            success: function() {
                notifySaved();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Attaches event handlers to the elements in a datatype properties form, including the datatree
     * and theme_datatype elements if they exist.
     */
    function InitDatatypePropertiesForm() {
        // Init Datatype Properties forms

        var tdf_odpf = $("#ThemeDesignForm .ODRDatatypePropertiesForm");

        tdf_odpf.find("select").each(function() {
            var datatype_id_data = tdf_odpf.attr('id').split(/_/);
            var datatype_id = datatype_id_data[1];

            $(this).unbind('change').change(function() {
                // Don't want a delay here, otherwise a change could get lost
                SaveDatatypeProperties(datatype_id);
            });
        });

        tdf_odpf.find("textarea").each(function() {
            var datatype_id_data = tdf_odpf.attr('id').split(/_/);
            var datatype_id = datatype_id_data[1];

            $(this).unbind('keyup');
            $(this).unbind('paste');
            $(this).on('keyup paste', function() {
                SaveDataTypeInterval[datatype_id] = window.clearInterval(SaveDataTypeInterval[datatype_id]);
                SaveDataTypeInterval[datatype_id] = window.setInterval('SaveDatatypeProperties("' + datatype_id + '")', SaveTimeout);
            });
        });

        tdf_odpf.find("input").each(function() {
            var datatype_id_data = tdf_odpf.attr('id').split(/_/);
            var datatype_id = datatype_id_data[1];

            if( $(this).is(":checkbox") ) {
                $(this).unbind('change').change(function() {
                    SaveDataTypeInterval[datatype_id] = window.clearInterval(SaveDataTypeInterval[datatype_id]);
                    SaveDataTypeInterval[datatype_id] = window.setInterval('SaveDatatypeProperties("' + datatype_id + '")', SaveTimeout);
                });
            }
            else {
                $(this).unbind('keyup');
                $(this).unbind('paste');
                $(this).on('keyup paste', function() {
                    // If the short_name field got changed, grab the new value
                    if ( $(this).hasClass("ODRDatasetName") ) {
                        var short_name = $(this).val();
                        $("#Datatype_" + datatype_id + "_ShortName").html(short_name);
                    }

                    SaveDataTypeInterval[datatype_id] = window.clearInterval(SaveDataTypeInterval[datatype_id]);
                    SaveDataTypeInterval[datatype_id] = window.setInterval('SaveDatatypeProperties("' + datatype_id + '")', SaveTimeout);
                });
            }
        });

        var tdf_odtpf = $("#ThemeDesignForm .ODRDatatreePropertiesForm");
        tdf_odtpf.each(function() {
            var id_data = tdf_odtpf.attr('id').split(/_/);
            var datatree_id = id_data[1];

            tdf_odtpf.find("input").each(function() {
                if ( $(this).is(":checkbox") ) {
                    $(this).unbind('change').change(function () {
                        SaveDatatreeProperties(datatree_id);
                    });
                }
            });
        });

        var tdf_otdpf = $("#ThemeDesignForm .ODRThemeDatatypePropertiesForm");
        tdf_otdpf.find("select").each(function() {
            var id_data = tdf_otdpf.attr('id').split(/_/);
            var theme_element_id = id_data[1];
            var datatype_id = id_data[2];

            $(this).unbind('change').change(function() {
                SaveThemeDatatypeProperties(theme_element_id, datatype_id);
            });
        });
    }

    /**
     * Makes a copy of the given datafield.
     *
     * @param {number} datafield_id
     */
    function CopyDatafield(datafield_id) {

        // Need to know which theme_element the field is in to determine whether it belongs to a
        //  linked datatype or not
        var theme_element_id_data = $("#Field_" + datafield_id).parent().parent().attr('id').split(/_/);
        var theme_element_id = theme_element_id_data[1];

        var url = '{{ path('odr_design_copy_datafield', { 'theme_element_id': 0, 'datafield_id': 0 } ) }}';
        url = url.substring(0, (url.length - 3));
        url += theme_element_id + '/' + datafield_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data) {
                 // Clear object properties panel
                $("#ThemeDesignForm").html("");
                ResetToolSet();

                if ( data.d.reload === 'theme_element' ) {
                    // Datafield was added to the local datatype, only need to reload a single
                    //  theme element
                    ReloadThemeElement(data.d.id);
                }
                else if ( data.d.reload === 'datatype' ) {
                    // Datafield was added to a linked datatype, might need to reload multiple
                    //  sections of the page
                    ReloadChild(data.d.id);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Deletes the given datafield.
     *
     * @param {number} datafield_id
     */
    function DeleteDatafield(datafield_id) {
        var url = '{{ path('odr_design_delete_datafield', { 'datafield_id': 0 } ) }}';
        url = url.substring(0, (url.length - 1));
        url += datafield_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function() {
                // Save the theme_element.....
                var theme_element = $("#Field_" + datafield_id).closest('.ODRThemeElement');
                var id_data = $(theme_element).attr('id').split(/_/);
                var theme_element_id = id_data[1];

                // Don't want the datafield or its associated properties panel html anymore
                $("#Field_" + datafield_id).remove();
                $("#ThemeDesignForm").html('');

                // Need to see whether the theme_element that used to contain this datafield needs
                //  its 'has_datafields' property set to false
                var datafields = $(theme_element).find(".ODRDataField");
                if ( datafields.length === 0 )
                    theme_element_properties[theme_element_id]['has_datafields'] = 0;

                // Update the sidebar so it no longer references the now-deleted datafield
                ResetToolSet();
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Reloads all ThemeElements on the page that belong to the given datatype.
     *
     * @param {number} datatype_id
     */
    function ReloadChild(datatype_id) {
        // Called in ODRAdminBundle:Plugins:plugin_settings_dialog.html.twig

        // Find all theme elements that contain the given datatype on the page...they all need to
        //  be reloaded.  Can't just use the id selector, since there could be multiples of the same
        //  linked datatype on the page.
        var theme_element_ids = [];
        $(".ODRDataType").each(function() {
            var dt_id = 'DataType_' + datatype_id;
            if ( $(this).attr('id') === dt_id ) {
                var te_id = $(this).parent().parent().attr('id');
                if (te_id === 'ThemeDesignArea') {
                    // This is a top-level datatype...just reload the page
                    window.location.reload();
                }
                else {
                    te_id = te_id.split(/_/);
                    theme_element_ids.push(te_id[1]);
                }
            }
        });

        // Reload each of the theme elements in the array
        $.each(theme_element_ids, function(index, theme_element_id) {
            ReloadThemeElement(theme_element_id);
        });
    }

    /**
     * Requests a new version of the HTML for an entire theme element from the server.
     *
     * @param {number} theme_element_id
     */
    function ReloadThemeElement(theme_element_id) {
        // console.log('reloading theme_element: ' + theme_element_id);

        var url = '{{ path('odr_design_reload_theme_element', { 'theme_element_id': 0 }) }}';
        url = url.substring(0, url.length-1);
        url += theme_element_id;

        var append = true;
        var theme_element = $("#ThemeElement_" + theme_element_id);
        var element = $(theme_element).prev();
        if ( $(element).attr('class') === undefined ) {
            append = false;
            element = $(theme_element).parent();
        }

        insertLoadingDiv(theme_element);

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: 'json',
            success: function(data) {
                // Remove old theme element
                $(theme_element).fadeOut();
                $(theme_element).remove();

                // Insert new html
                if (append)
                    $(element).after(data.d.html);
                else
                    $(element).prepend(data.d.html);

                initPage(false);
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Don't need to do anything specific on an error
            },
            complete: function(jqXHR) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {

                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }

    /**
     * Requests a new version of the HTML for a datafield from the server.
     *
     * @param {number} datafield_id
     */
    function ReloadDatafield(datafield_id) {
        // Find all theme elements that contain the given datafield on the page...they all need to
        //  be reloaded
        var theme_element_ids = [];
        $(".ODRDataField").each(function() {
            var df_id = 'Field_' + datafield_id;
            if ( $(this).attr('id') === df_id ) {
                var te_id = $(this).parent().parent().attr('id').split(/_/);
                theme_element_ids.push(te_id[1]);
            }
        });

        $.each(theme_element_ids, function(index, theme_element_id) {
            ReloadThemeElement(theme_element_id);
        });
    }

    /**
     * Covers the requested HTML element with an overlay div so click events don't work on it.
     *
     * @param {HTMLElement} target_div
     */
    function insertLoadingDiv(target_div) {
        // Need dimensions of parent div...
        var height = $(target_div).css('height');
        var width = $(target_div).css('width');

        var loading_div_id = $(target_div).attr('id') + '_loading_div';

        // Create a loading div
        $(target_div).prepend("<div id=\"" + loading_div_id + "\" class=\"ODROverlayDiv ODRReloadDiv\"><strong>Loading...</strong></div>");

        // Apply dimensions of parent div to loading div
        $("#" + loading_div_id).css({"height": height, "line-height": height, "width": width});
    }

    /**
     * Removes an overlay div from the requested HTML element.
     *
     * @param {HTMLElement} target_div
     */
    function removeLoadingDiv(target_div) {
        // Locate loading div...
        var loading_div_id = $(target_div).attr('id') + '_loading_div';
        var loading_div = $("#" + loading_div_id);

        if ( $(loading_div).length > 0 )
            $(loading_div).remove();
    }
</script>
