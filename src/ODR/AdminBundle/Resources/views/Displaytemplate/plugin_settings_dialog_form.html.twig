{% spaceless %}

<!-- Plugin Settings Dialog Form -->
<div style="display: block;">

    <form action="{{ path('odr_save_render_plugin_settings') }}" method="post" {#{{ form_enctype(form) }}#} class="full validate" id="PluginSettingsForm">

        <input type="hidden" name="local_datatype_id" value="{{ local_datatype.id }}" />
        {% if local_datafield == null %}
            <input type="hidden" name="local_datafield_id" value="0" />
            <input type="hidden" name="previous_render_plugin" value="{{ local_datatype.renderplugin.id }}" />
        {% else %}
            <input type="hidden" name="local_datafield_id" value="{{ local_datafield.id }}" />
            <input type="hidden" name="previous_render_plugin" value="{{ local_datafield.renderplugin.id }}" />
        {% endif %}
        <input type="hidden" name="render_plugin_instance_id" value="{% if render_plugin_instance != null %}{{ render_plugin_instance.id }}{% endif %}" />

        <fieldset>
            <div class="pure-control-group">
                <label for="selected_render_plugin">
                    <strong>Render Plugin:</strong>
                </label>
                <select name="selected_render_plugin" id="selected_render_plugin" onchange="updatePluginData();">
                {% for render_plugin in render_plugins %}
                    <option value="{{ render_plugin.id }}"

                    {% if local_datafield == null %}
                        {% if local_datatype.renderplugin.id == render_plugin.id %}
                            selected
                        {% endif %}
                    {% else %}
                        {% if local_datafield.renderplugin.id == render_plugin.id %}
                            selected
                        {% endif %}
                    {% endif %}

                    >{{ render_plugin.pluginname }}</option>
                {% endfor %}
                </select>
            </div>
        </fieldset>

        <fieldset>
            <div class="pure-control-group" id="render_plugin_data"></div>
        </fieldset>

    </form>

</div>

<script>
    $( function() {
        $( "#dialog_plugin_settings" ).dialog({
            autoOpen: false,
            modal: true,
            width: 900,
            open: function() {
                $(this).parent().css('overflow', 'visible');
            }
        });

        // Init Form
        PluginSettingsFormInit();

        // Load initial plugin settings
        updatePluginData();
    });

    function updatePluginData() {
        var datatype_id = {{ local_datatype.id }};
        var datafield_id = {% if local_datafield == null %}0{% else %}{{ local_datafield.id }}{% endif %};
        var render_plugin_id = $('#selected_render_plugin').val();

        var url  = '{{ path('odr_load_plugin_data', {'datatype_id': 0, 'datafield_id': 0, 'render_plugin_id': 0 } ) }}';
        url = url.substring(0,(url.length - 5)) + datatype_id + '/' + datafield_id + '/' + render_plugin_id;

        $("#render_plugin_data").html('<center><strong>Please wait...</strong></center>');

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    switch(data.t) {
                        case 'html':
                            $("#render_plugin_data").html(data.d.html);
                            $("#dialog_plugin_settings").dialog({ position: { my: "center", at: "center", of: window } });
                            PluginSettingsFormInit();
                            break;
                    }
                }
                else {
                    // An error has occurred.
                    $("#dialog_plugin_settings").dialog('close');
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    }
</script>

{% endspaceless %}
