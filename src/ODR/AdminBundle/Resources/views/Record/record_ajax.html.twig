{% spaceless %}
<div class="ODRFormHeader clearfix">

{% set datatype = datatype_tree.datatype %}
{% set datarecord = null %}
{% for dr_entry in datarecord_tree %}
    {% set datarecord = dr_entry.datarecord %}
{% endfor %}

{% for ancestor_id, ancestor_name in ancestor_linked_datatypes %}
    {% if datatype_permissions[ ancestor_id ] is defined and datatype_permissions[ ancestor_id ][ 'edit' ] is defined %}
        <button type="button" class="pure-button" onclick="LinkRecord({{ ancestor_id }},{{ datatype.id }},{{ datarecord.id }});">Link to {{ ancestor_name }}.</button>
    {% endif %}
{% endfor %}

{% for descendant_id, descendant_name in descendant_linked_datatypes %}
    {% if datatype_permissions[ descendant_id ] is defined and datatype_permissions[ descendant_id ][ 'edit' ] is defined %}
        <button type="button" class="pure-button" onclick="LinkRecord({{ datatype.id }},{{ descendant_id }},{{ datarecord.id }});">Link to {{ descendant_name }}.</button>
    {% endif %}
{% endfor %}
</div>

<h1 class="no-margin-top-phone">
    <span>Edit Record &raquo; {{ datatype.shortname }}</span>
</h1>

{% include 'ODRAdminBundle:Record:record_area.html.twig' with {'datatype_tree': datatype_tree, 'datarecord_tree': datarecord_tree, 'theme': theme, 'datatype_permissions': datatype_permissions, 'datafield_permissions': datafield_permissions} %}

<div id="field_history_dialog_wrapper">
{% include 'ODRAdminBundle:Record:field_history_dialog.html.twig' %}
</div>

{% endspaceless %}

<script>

$(function() {

    // --------------------
    // Only need to do this stuff once?

    // Resize all elements dependent on window size
    $(window).unbind('resize');
    $(window).resize(function() {
        WindowResizeInterval = window.clearInterval(WindowResizeInterval);
        WindowResizeInterval = window.setInterval("onWindowResize()", 500);
    });

    // Resize everything prior to divs being hidden
    onWindowResize();

    // Hide divs for accordion purposes
    setupAccordions();

    // Hide empty theme element divs
    $(".ODRThemeElement").each(function() {
        var has_children = false;
        $(this).find(".ODRDataField").each(function() { // TODO - render plugins that hide fieldarea and don't do datafields?
            has_children = true;
        });
        $(this).find(".ODRDataType").each(function() { // TODO - render plugins that hide fieldarea and don't do datafields?
            has_children = true;
        });

        if (!has_children)
            $(this).css( "display", "none" );
    });


    // --------------------
    initPage();
    $(".MenuDesignArea").remove();
    window.scrollTo(0,0);
});

var SaveTimeout = 700;
function initPage() {
/*
    // Resize all elements dependent on window size
    $(window).unbind('resize');
    $(window).resize(function() {
        WindowResizeInterval = window.clearInterval(WindowResizeInterval);
        WindowResizeInterval = window.setInterval("onWindowResize()", 500);
    });

    // Resize everything prior to divs being hidden
    onWindowResize();

    // Hide divs for accordion purposes
    setupAccordions();

    // Hide empty theme element divs
    $(".ODRThemeElement").each(function() {
        var has_children = false;
        $(this).find(".ODRDataField").each(function() { // TODO - render plugins that hide fieldarea and don't do datafields?
            has_children = true;
        });
        $(this).find(".ODRDataType").each(function() { // TODO - render plugins that hide fieldarea and don't do datafields?
            has_children = true;
        });

        if (!has_children)
            $(this).css( "display", "none" );
    });
*/
    $(".ODRDataField").find('.ODRDatafieldHistory').unbind('click');
    $(".ODRDataField").find('.ODRDatafieldHistory').click(function() {

        // Grab relevant entity ids
        var entity_id = $(this).parent().parent().attr('rel');
        var id_data = $(this).parent().parent().attr('id').split(/_/);
        var datarecordfield_id = id_data[1];

        var url = '{{ path('odr_record_get_field_history', { 'datarecordfield_id': 0, 'entity_id': 0 } ) }}';
        url = url.substring(0, (url.length - 3));
        url += datarecordfield_id + '/' + entity_id;

//alert( url );
//return;

        // Ajax Load Form in box
        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    $("#dialog_field_history .form_contents").html(data.d.html);
                    $("#dialog_field_history").dialog( "open" );
                }
                else if (data.r == 1) {
                    // Error occurred
                    alert( data.d );
                }
                else {
                    // not allowed
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
        
    });

    $(".ODRDeleteImage").unbind('click');
    $(".ODRDeleteImage").click(function() {

        if(confirm("Are you certain that you want to delete this Image?")) {
            var image_id = $(this).attr('rel');

            var url = '{{ path('odr_record_delete_image', { 'image_id': 0 } ) }}';
            url = url.substring(0, (url.length - 1));
            url += image_id;
//alert( url );
//return;

            // Ajax Load Form in box
            var dataType = "json";
            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: dataType,
                success: function(data, textStatus, jqXHR) {
                    if(data.r == 0) {
                        // Will Cause removal from view
                        $("#Image_"+image_id).remove();

                        // Could use ReloadDatafield(), but this works
                    }
                    else {
                        // An error has occurred.
                        // Show Error message dialog
                        alert(data.d);
                    }
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });


    $(".ODRDeleteFile").unbind('click');
    $(".ODRDeleteFile").click(function() {
        if ( confirm("Are you certain that you want to delete this File?") ) {
            var file_id = $(this).attr('rel');

            var url  = '{{ path('odr_record_delete_file', {'file_id': 0} ) }}';
            url = url.substring(0,(url.length-1));
            url += file_id;

//alert( url );
//return;

            var dataType = "json";
            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: dataType,
                success: function(data, textStatus, jqXHR) {
                    if(data.r == 0) {
                        // Remove file data from table area
                        $("#File_" + file_id).remove();
                    }
                    else {
                        // An error has occurred.
                        // Show Error message dialog
                        alert(data.d);
                    }
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".ODRPublicFile").unbind('click');
    $(".ODRPublicFile").click(function() {
        var file_id = $(this).attr('rel');

        var url  = '{{ path('odr_record_public_file', {'file_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += file_id;

//alert( url );
//return;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    // Reload the file control
                    var datarecord_id = data.d.datarecord;
                    var datafield_id = data.d.datafield;
                    ReloadDatafield(datarecord_id, datafield_id);
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRPublicImage").unbind('click');
    $(".ODRPublicImage").click(function() {
        var image_id = $(this).attr('rel');

        var url  = '{{ path('odr_record_public_image', {'image_id': 0} ) }}';
        url = url.substring(0,(url.length-1));
        url += image_id;

//alert( url );
//return;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    // Reload the image control
                    var datarecord_id = data.d.datarecord;
                    var datafield_id = data.d.datafield;
                    ReloadDatafield(datarecord_id, datafield_id);
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".ODRPublicChildRecord").unbind('click');
    $(".ODRPublicChildRecord").click(function() {
        var datarecord_id = $(this).attr('rel');

        var url = '{{ path('odr_record_public', { 'datarecord_id': 0 }) }}';
        url = url.substring(0, (url.length - 1));
        url += datarecord_id;
//alert( url );
//return;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                    // Don't want to reload everything just to change one little icon...
                    var header = $("#datarecord_" + data.d.datarecord_id + "_public");
                    var title = $(header).attr('title');
                    var new_title = title;

                    if (data.d.public == 1) {
                        $(header).removeClass('IconRed');
                        new_title = title.replace('not ', '');
                    }
                    else {
                        $(header).addClass('IconRed');
                        new_title = title.substring(0, title.indexOf('Public')) + 'not Public';
                    }

                    $(header).attr('title', new_title);

                }
                else {
                    // Error occurred
                    alert( data.d );
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });


    $(".ODRDeleteChildRecord").unbind('click');
    $(".ODRDeleteChildRecord").click(function() {
        if ( confirm('Are you sure you want to delete this DataRecord?') ) {
            var datatype_id = $(this).parent().attr('rel');
            var datarecord_id = $(this).attr('rel');   // which data record to delete

            // Load display template menu
            var url  = '{{ path('odr_record_deletechild', {'datarecord_id': 0, 'datatype_id': 0} ) }}';
            url = url.substring(0,(url.length - 3));
            url += datarecord_id + '/' + datatype_id;
//alert( url );
//return;

            var dataType = "json";
            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: dataType,
                success: function(data, textStatus, jqXHR) {
                    if(data.r == 0) {
                        // TODO - shouldn't this be handled entirely via javascript instead of another ajax call?

                        // Refresh child wrapper area
                        var datatype_id = data.d.datatype_id;
                        var parent_id = data.d.parent_id;

                        ReloadChild(datatype_id, parent_id);
//                        ReloadChild(datatype_id, parent_id, '');    // don't attempt to scroll to a datarecord
                    }
                    else {
                        // An error has occurred.
                        // Show Error message dialog
                        alert(data.d);
                    }
                },
                complete: function(jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                    }
                }
            });
        }
    });

    $(".SingleRadioGroup").unbind('click');
    $(".SingleRadioGroup").click(function() {

        // Want to prevent sending unecessary ajax events...can't detect if option is already selected with is("checked")

        // If already checked, do nothing
        if ( $(this).hasClass('ODRRadioOptionChecked') )
            return;

        // Update classes to track which radio option is selected
        $(this).parent().parent().find('input').each(function() {
            $(this).removeClass('ODRRadioOptionChecked');
        });
        $(this).addClass('ODRRadioOptionChecked');

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecordfield_id = id_data[1];
        var radio_option_id = id_data[2];

        var url  = '{{ path('odr_record_radio_selection', {'data_record_field_id': 0, 'radio_option_id': 0, 'multiple': 0 } ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecordfield_id + '/' + radio_option_id + '/' + "0";    // only single selection permitted

//alert( url );
//return;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".MultipleRadioGroup").unbind('click');
    $(".MultipleRadioGroup").click(function() {

        // Grab relevant entity ids
        var id_data = $(this).attr('id').split(/_/);
        var datarecordfield_id = id_data[1];
        var radio_option_id = id_data[2];

        // Load display template menu
        var url  = '{{ path('odr_record_radio_selection', {'data_record_field_id': 0, 'radio_option_id': 0, 'multiple': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecordfield_id + '/' + radio_option_id + '/' + "1";    // multiple selections permitted

//alert( url );
//return;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

    $(".SingleSelectGroup").unbind('change');
    $(".SingleSelectGroup").change(function() {

        // Grab relevant entity ids
        var radio_option_id = $(this).val();
        var id_data = $(this).attr('id').split(/_/);
        var datarecordfield_id = id_data[1];    // which data field to save the option

        // Load display template menu
        var url  = '{{ path('odr_record_radio_selection', {'data_record_field_id': 0, 'radio_option_id': 0, 'multiple': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += datarecordfield_id + '/' + radio_option_id + '/' + "0";    // only single selection permitted

//alert( url );
//return;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });

/*
    $(".MultipleSelectGroup").unbind('change');
    $(".MultipleSelectGroup").change(function() {

        var select_group_id = $(this).attr('id').split(/_/);
        var select_group = "#SelectGroup_" + select_group_id[1];

        // val() returns all selected options, need to determine which one changed
        var selected_options_data = $(this).val();
        var selected_options = [];
        //var out = '';
        for (var i in selected_options_data) {
            selected_options.push( selected_options_data[i] );
        }

        var radio_option_id;
        $(this).children().each( function(index) {
            var option_id = $(this).val();
            // Check to see if this element was previously selected and got de-selected
            if ( $(this).hasClass("MultipleSelect_prev") ) {
                if (jQuery.inArray(option_id, selected_options) === -1) {
                    // This was the element that changed
                    radio_option_id = option_id;
                    $(select_group + " #Option_"+radio_option_id).removeClass("MultipleSelect_prev");
                    return false;
                }
            }
            // Check to see if this elment got selected
            else {
                if (jQuery.inArray(option_id, selected_options) !== -1) {
                    // This was the element that was changed
                    radio_option_id = option_id;
                    $(select_group + " #Option_"+radio_option_id).addClass("MultipleSelect_prev");
                    return false;
                }
            }
        });

        var data_record_field_id_data = $(this).attr('id').split(/_/);
        var data_record_field_id = data_record_field_id_data[1];    // which data field to save the option

        // Load display template menu
        var url  = '{{ path('odr_record_radio_selection', {'data_record_field_id': 0, 'radio_option_id': 0, 'multiple': 0} ) }}';
        url = url.substring(0,(url.length - 5));
        url += data_record_field_id + '/' + radio_option_id + '/' + "1";    // multiple selection permitted

alert( url );
return;

        var dataType = "json";
        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: dataType,
            success: function(data, textStatus, jqXHR) {
                if(data.r == 0) {
                }
                else {
                    // An error has occurred.
                    // Show Error message dialog
                    alert(data.d);
                }
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
            }
        });
    });
*/

{#
    $(".ODROpenLinkedRecord").unbind('click');
    $(".ODROpenLinkedRecord").click(function() {
        var datarecord_id = $(this).attr('rel');
        
    });
#}

    var starting_datafield = null;
    $(".ODRSortableImage").sortable({

//        items: "> .image",
        start: function( event, ui ) {
            // Store which datafield the image belongs to
            starting_datafield = $(ui.item).parent().parent().parent().parent().attr('id');

            // Hide the image that is being dragged around
//            $(ui.helper).hide();
            // Style the placeholder to more closely match the image being drug around
            $(ui.placeholder).addClass( $(ui.helper).attr('class') );
            $(ui.placeholder).css( 'height', $(ui.helper).height() );
            $(ui.placeholder).css( 'width', $(ui.helper).width() * 0.95 );
        },
        stop: function( event, ui ) {
            // Determine which datafield the image ended up in
            var ending_datafield = $(ui.item).parent().parent().parent().parent().attr('id');

            // If the image ended up in a different datafield, don't save the change and revert the layout
            if (starting_datafield == ending_datafield) {
//alert('legal');
                SaveImageOrder( $(ui.item).parent() );
            }
            else {
//alert('illegal');
                $(".ODRSortableImage").sortable('cancel');
            }

            // Unhide the object that was being dragged around
//            $(ui.item).show();

            // jQuery Sortable attaches a display: block style to these elements...get rid of it
            $(ui.item).removeAttr('style');

            // Reset for the next sortable call
            starting_imagearea = null;
            $(ui.placeholder).removeAttr('css');
        },
//        placeholder: "ui-state-highlight",
        connectWith: ".ODRSortableImage",
    });
    $( ".ODRSortableImage" ).disableSelection();

    $(".ODRDatePicker").datepicker({
        dateFormat: 'yy-mm-dd',
        changeMonth: true,
        changeYear: true,
        yearRange: "1800:+10",
        onClose: function() {
            $(this).blur();

            var form_id = $(this).parent().parent().parent().attr('id');
            SaveRecordData('#' + form_id, '');

        }
    });

    $(".ODRDatePicker_clear").unbind('click');
    $(".ODRDatePicker_clear").click(function() {
        $(this).parent().parent().find(".ODRDatePicker").datepicker('setDate', null);

        var form_id = $(this).parent().parent().parent().attr('id');
        SaveRecordData('#' + form_id, '');

    });

}

function SaveImageOrder(container) {

    // Create a javascript object containing the image ids so ajax can directly post it
    var i = 0;
    var image_ids = {};
    $(container).children().each(function() {
        // Want thumbnail id's, not full-size image ids
//        var id_data = $(this).attr('id').split(/_/);
//        var id =  id_data[1];
        var id = $(this).attr('rel');

        image_ids[i] = id;
        i++;
    });

    var url = '{{ path('odr_record_save_image_order') }}';

    var dataType = "json";
    $.ajax({
        cache: false,
        type: 'POST',
        data: image_ids,
        url: url,
        dataType: dataType,
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function AddChildRecord(datatype_id, parent_id, grandparent_id) {
    var url = '{{ path('odr_record_addchild', { 'datatype_id': 0, 'parent_id': 0, 'grandparent_id': 0 } ) }}';
    url = url.substring(0, (url.length - 5));
    url += datatype_id + '/' + parent_id + '/' + grandparent_id;

//alert( url );
//return;

    // Ajax Load Form in box
    var dataType = "json";
    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: dataType,
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
                // Refresh child wrapper area
//                var new_datarecord_id = data.d.new_datarecord
                var datatype_id = data.d.datatype_id;
                var parent_id = data.d.parent_id;

                ReloadChild(datatype_id, parent_id);
//                ReloadChild(datatype_id, parent_id, new_datarecord_id);
            }
            else {
                // Error occurred
                alert( data.d.html );
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function LinkRecord(ancestor_datatype_id, descendant_datatype_id, local_datarecord_id) {
    var url = '{{ path('odr_record_get_linkable_records', { 'ancestor_datatype_id': 0, 'descendant_datatype_id': 0, 'local_datarecord_id': 0 } ) }}';
    url = url.substring(0, (url.length - 5));
    url += ancestor_datatype_id + '/' + descendant_datatype_id + '/' + local_datarecord_id;

//alert( url );
//return;

    UpdateURL(url);
    return;
{#
    // Ajax Load Form in box
    var dataType = "json";
    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: dataType,
        success: function(data, textStatus, jqXHR) {
            if(data.r == 0) {
                $("#dialog_link_datarecord .form_contents").html(data.d.html);
                $( "#dialog_link_datarecord" ).dialog( "open" );
            }
            else {
                // Error occurred
                alert( data.d );
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
#}
}

function SaveRecordData(form_id, interval) {

    var the_form = $(form_id);

    if(interval != "") 
        interval = window.clearInterval(interval);

    // Determine save type
    var post_data = $(the_form).serialize();

    // Theme ID
    var url = $(the_form).attr('action');
    var dataType = "json";

//alert( url );
//alert( post_data );
//return;

    $.ajax({
        type: 'POST',
        url: url,
        dataType: dataType,
        data: post_data,
        success: function(data, textStatus, xhr) {

            if(data.r == 0) {
                // Refresh Field
                $(the_form).find(".valid-icon").fadeIn();
                setTimeout(function() {
                    $(the_form).find(".valid-icon").fadeOut();
                }, 500);

            }
            else if (data.r == 2) {
/*
                // Uniqueness Error
//                var icon = $(the_form).find(".valid-icon");
//                icon.removeClass('valid-icon').addClass('error-icon');

                // Grab the form that got changed
                var tmp = data.d.split('||');
                var the_form = '#' + tmp[0];

                // Restore the old value
                $(the_form).find("input[type='text']").val(tmp[1]);

                // Show rest of error message
                alert(tmp[2]);

//                icon.fadeOut();
*/
            }
            else {
                // An error has occurred.
                // Show Error message dialog
                alert(data.d);
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function UploadFile(form_id, action_url, div_id) {
//return;
    // Create the iframe...
    var form = document.getElementById(form_id);
    var iframe = document.createElement("iframe");
    iframe.setAttribute("id", "upload_iframe");
    iframe.setAttribute("name", "upload_iframe");
    iframe.setAttribute("width", "0");
    iframe.setAttribute("height", "0");
    iframe.setAttribute("border", "0");
    iframe.setAttribute("style", "width: 0; height: 0; border: none;");

    // Add to document...
    form.parentNode.appendChild(iframe);
    window.frames['upload_iframe'].name = "upload_iframe";
 
    iframeId = document.getElementById("upload_iframe");
 
    // Add event...
    var eventHandler = function () {
        if (iframeId.detachEvent) iframeId.detachEvent("onload", eventHandler);
        else iframeId.removeEventListener("load", eventHandler, false);

        // Message from server...
        if (iframeId.contentDocument) {
            content = iframeId.contentDocument.body.innerHTML;
        } else if (iframeId.contentWindow) {
            content = iframeId.contentWindow.document.body.innerHTML;
        } else if (iframeId.document) {
            content = iframeId.document.body.innerHTML;
        }

        // 
        content = content.replace(/<[^>]+>/g, '');
        content = jQuery.parseJSON(content);
        if (content.r == 1) {
            alert( content.d );
        //

            (function($) {
                var results_div = $("#"+div_id);
                results_div.html('');

                var file_div = results_div.parent().find("div.customfile");
                file_div.removeClass('customfile-focus');

                file_div.find("span.customfile-feedback").html('No file selected...');
                file_div.find("span.customfile-button").html('Browse');

            })(jQuery);
        }
        else {
//        document.getElementById(div_id).innerHTML = content.d;
//        document.getElementById(div_id).innerHTML = '';

            var datafield_id = content.d.datafield;
            var datarecord_id = content.d.datarecord;
            ReloadDatafield( datarecord_id, datafield_id );
        }

        // Del the iframe...
        setTimeout('iframeId.parentNode.removeChild(iframeId)', 250);
    }
 
    if (iframeId.addEventListener) iframeId.addEventListener("load", eventHandler, true);
    if (iframeId.attachEvent) iframeId.attachEvent("onload", eventHandler);
 
    // Set properties of form...
    form.setAttribute("target", "upload_iframe");
    form.setAttribute("action", action_url);
    form.setAttribute("method", "post");
    form.setAttribute("enctype", "multipart/form-data");
    form.setAttribute("encoding", "multipart/form-data");
 
    // Submit the form...
    form.submit();
 
    document.getElementById(div_id).innerHTML = "Uploading...";
}


//function ReloadChild(datatype_id, datarecord_id, scroll_target_datarecord) {
function ReloadChild(datatype_id, datarecord_id) {
    var url = '{{ path('odr_record_reload_child', { 'datatype_id': 0, 'datarecord_id': 0 }) }}';
    url = url.substring(0, (url.length-3));
    url += datatype_id + '/' + datarecord_id;

//alert( url );
//return;

    // Remove the datatype that's getting reloaded
    $("#ChildTypeWrapper_" + datatype_id + "_" + datarecord_id).children(".ODRDataType").remove();

    var dataType = "json";
    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: dataType,
        success: function(data, textStatus, jqXHR) {
            if (data.r == 0) {
                $("#ChildTypeWrapper_" + datatype_id + "_" + datarecord_id).prepend(data.d.html);

                setupAccordions();
                initPage();
/*
                if (scroll_target_datarecord != '') {
                    var offset = $("#FieldArea_" + scroll_target_datarecord).offset();
                    window.scrollTo(0, offset.top);
                }
*/
            }
            else {
                alert( data.d );
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

function ReloadDatafield(datarecord_id, datafield_id) {
    var url = '{{ path('odr_record_reload_datafield', { 'datarecord_id': 0, 'datafield_id': 0 }) }}';
    url = url.substring(0, (url.length-3));
    url += datarecord_id + '/' + datafield_id;

//alert( url );
//return;

    var datafield_div = $("#Field_" + datarecord_id + "_" + datafield_id);

    $(datafield_div).children('form').each(function() {
        $(this).fadeOut();
        $(this).remove();
    });

    var dataType = "json";
    $.ajax({
        cache: false,
        type: 'GET',
        url: url,
        dataType: dataType,
        success: function(data, textStatus, jqXHR) {
            if (data.r == 0) {
                $(datafield_div).append(data.d.html);
                initPage();
            }
            else {
                alert( data.d );
            }
        },
        complete: function(jqXHR, textStatus) {
            // Get the xdebugToken from response headers
            var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

            // If the Sfjs object exists
            if (typeof Sfjs !== "undefined") {
                // Grab the toolbar element
                var currentElement = $('.sf-toolbar')[0];

                // Load the data of the given xdebug token into the current toolbar wrapper
                Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
            }
        }
    });
}

</script>
