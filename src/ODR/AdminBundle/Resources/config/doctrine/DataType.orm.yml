ODR\AdminBundle\Entity\DataType:
    type: entity
    table: odr_data_type
    gedmo:
        soft_deleteable:
            field_name: deletedAt
    indexes:
        uuid_index:
            columns: [ unique_id ]

    fields:
        id:
            id: true
            type: integer
            unsigned: false
            nullable: false
            generator:
                strategy: IDENTITY

        # TODO Determine if this revision value
        # is in use.  Looks like it was never implemented.
        revision:
            type: integer
            unsigned: true
            nullable: false
            default: 0
            column: revision

        unique_id:
            type: string
            length: 32
            nullable: true
            default: ''
            column: unique_id

        setup_step:
            type: string
            length: 32
            fixed: false
            nullable: false
            default: ''
            column: setup_step

        preload_status:
            type: string
            length: 32
            nullable: true
            default: ''
            column: preload_status

        is_master_type:
            type: boolean
            nullable: false
            default: false
            column: is_master_type

        template_group:
            type: string
            length: 32
            default: ''
            nullable: true
            column: template_group

        datatype_type:
            type: string
            length: 32
            default: ''
            nullable: true
            column: datatype_type

        created:
            type: datetime
            gedmo:
                timestampable:
                    on: create
        updated:
            type: datetime
            gedmo:
                timestampable:
                    on: update

        deletedAt:
            type: datetime
            nullable: true

    oneToMany:
        grandchildren:
            targetEntity: DataType
            mappedBy: grandparent
            fetch: EXTRA_LAZY
        children:
            targetEntity: DataType
            mappedBy: parent
            fetch: EXTRA_LAZY

        # TODO These will probably need to be moved to map tables
        # so that child types can be re-used across multiple master
        # data types.
        relatedMasterTypes:
            targetEntity: DataType
            mappedBy: masterDataType
            fetch: EXTRA_LAZY

        dataTypeMeta:
            targetEntity: DataTypeMeta
            cascade: { }
            mappedBy: dataType
            inversedBy: null
            orphanRemoval: false

        themeDataType:
            targetEntity: ThemeDataType
            cascade: {  }
            mappedBy: dataType
            inversedBy: null
            fetch: EXTRA_LAZY
            orphanRemoval: false

        dataFields:
            targetEntity: DataFields
            cascade: {  }
            mappedBy: dataType
            inversedBy: null
            fetch: EXTRA_LAZY
            orphanRemoval: false

        dataRecords:
            targetEntity: DataRecord
            cascade: {  }
            mappedBy: dataType
            inversedBy: null
            fetch: EXTRA_LAZY
            orphanRemoval: false

        themes:
            targetEntity: Theme
            cascade: { }
            mappedBy: dataType
            inversedBy: null
            orphanRemoval: false

        groups:
            targetEntity: Group
            cascade: { }
            mappedBy: dataType
            inversedBy: null
            orphanRemoval: false

        groupDatatypePermissions:
            targetEntity: GroupDatatypePermissions
            cascade: { }
            mappedBy: dataType
            inversedBy: null
            orphanRemoval: false

    oneToOne:
        metadata_datatype:
            targetEntity: DataType
#            inversedBy: metadata_for

        metadata_for:
            targetEntity: DataType
#            inversedBy: metadata_datatype

    manyToOne:
        parent:
            targetEntity: DataType
            inversedBy: children
            fetch: EXTRA_LAZY
        grandparent:
            targetEntity: DataType
            fetch: EXTRA_LAZY
            inversedBy: grandchildren

        # TODO These will probably need to be moved to map tables
        # so that child types can be re-used across multiple master
        # data types.
        masterDataType:
            targetEntity: DataType
            fetch: EXTRA_LAZY
            inversedBy: relatedMasterTypes
            joinColumns:
                master_datatype_id:
                    referencedColumnName: id

        # This property is required by docrine, but isn't used...
        # The "renderPlugin" relationship in DataTypeMeta is used instead
        renderPlugin:
            targetEntity: RenderPlugin
            cascade: {  }
            inversedBy: dataType
            joinColumns:
                render_plugin_id:
                    referencedColumnName: id
            orphanRemoval: false
            fetch: EXTRA_LAZY

        createdBy:
            targetEntity: ODR\OpenRepository\UserBundle\Entity\User
            cascade: {  }
            mappedBy: null
            inversedBy: null
            fetch: EXTRA_LAZY
            joinColumns:
                createdBy:
                    referencedColumnName: id
            orphanRemoval: false

        updatedBy:
            targetEntity: ODR\OpenRepository\UserBundle\Entity\User
            cascade: {  }
            mappedBy: null
            inversedBy: null
            fetch: EXTRA_LAZY
            joinColumns:
                updatedBy:
                    referencedColumnName: id
            orphanRemoval: false

        deletedBy:
            targetEntity: ODR\OpenRepository\UserBundle\Entity\User
            cascade: {  }
            mappedBy: null
            inversedBy: null
            fetch: EXTRA_LAZY
            joinColumns:
                deletedBy:
                    referencedColumnName: id
            orphanRemoval: false

    lifecycleCallbacks: {  }
