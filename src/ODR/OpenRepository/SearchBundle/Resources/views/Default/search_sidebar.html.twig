{% spaceless %}

{% set GENERAL_SEARCH = constant('ODR\\AdminBundle\\Entity\\DataFields::GENERAL_SEARCH') %}
{% set ADVANCED_SEARCH = constant('ODR\\AdminBundle\\Entity\\DataFields::ADVANCED_SEARCH') %}
{% set ADVANCED_SEARCH_ONLY = constant('ODR\\AdminBundle\\Entity\\DataFields::ADVANCED_SEARCH_ONLY') %}

{% set is_datatype_admin = false %}
{% if datatype_permissions[target_datatype.id] is defined and datatype_permissions[target_datatype.id]['dt_admin'] is defined %}
    {% set is_datatype_admin = true %}
{% endif %}

{% set datatype = datatype_array[target_datatype.id] %}

{% set can_use_general_search = false %}
{% for df_id, datafield in datatype['dataFields'] %}
    {% set searchable = datafield['dataFieldMeta']['searchable'] %}
    {% if searchable == GENERAL_SEARCH or searchable == ADVANCED_SEARCH %}
        {% set can_use_general_search = true %}
    {% endif %}
{% endfor %}

{% if not can_use_general_search %}
    {# If the top-level datatype doesn't have any searchable datafields, then try the child datatypes #}
    {% for child_datatype_id in datatype_relations['child_datatypes'] %}
        {% set child_datatype = datatype_array[child_datatype_id] %}

        {% for df_id, datafield in child_datatype['dataFields'] %}
            {% set searchable = datafield['dataFieldMeta']['searchable'] %}
            {% if searchable == GENERAL_SEARCH or searchable == ADVANCED_SEARCH %}
                {% set can_use_general_search = true %}
            {% endif %}
        {% endfor %}
    {% endfor %}
{% endif %}

{% if not can_use_general_search %}
    {# ...if neither the top-level nor the child datatypes have any searchable datafields, then try the linked datatypes #}
    {% for linked_datatype_id in datatype_relations['linked_datatypes'] %}
        {% set linked_datatype = datatype_array[linked_datatype_id] %}

        {% for df_id, datafield in linked_datatype['dataFields'] %}
            {% set searchable = datafield['dataFieldMeta']['searchable'] %}
            {% if searchable == GENERAL_SEARCH or searchable == ADVANCED_SEARCH %}
                {% set can_use_general_search = true %}
            {% endif %}
        {% endfor %}
    {% endfor %}
{% endif %}


    <div class="ODRThemeElement">
        <input id="ODRSidebarSearchKey" type="hidden" value="{% if search_key is defined and search_key != '' %}{{ search_key }}{% endif %}" />
        <input id="ODRSearchIntent" type="hidden" value="{{ intent }}" />

        <div class="ODRInnerBox">
            {% if intent != 'stored_search_keys' %}
            <span class="ODRSearchToggle">
                <i class="fa fa-lg fa-arrow-circle-left hidden"></i>
                <i class="fa fa-lg fa-arrow-circle-right"></i>
            </span>
            {% endif %}

            {% if intent == 'searching' %}
                {% include 'ODROpenRepositorySearchBundle:Default:searchpage_markdown.html.twig' with {
                    'datatype': target_datatype,
                    'position': 'upper',
                    'is_datatype_admin': is_datatype_admin,
                } %}
            {% endif %}

            <form id="search_form" class="pure-form pure-u-23-24 pure-form-stacked">
                <input type="hidden" id="datatype_id" name="dt_id" value="{{ target_datatype.id }}"/>
                {% if intent != 'stored_search_keys' %}
                <input type="hidden" id="selected_theme_id" value="{{ preferred_theme_id }}"/>
                {% endif %}

                {% if intent != 'stored_search_keys' %}
                <fieldset id="search_top">
                    <div>
                        <div class="pure-u-1">
                            <a class="ODRSearchHelper Pointer pure-u-1" onclick="changeSearch();">
                                Open Advanced Search
                            </a>
                        </div>
                        <div class="pure-u-1">
                            <button class="pure-button pure-button ODRResetButton" type="button" onclick="doReset();">Reset</button>
                            <button class="pure-button pure-button-primary ODRSearchButton" type="submit">Search{% if intent == 'linking' %} for records to Link{% endif %}</button>
                        </div>
                    </div>
                </fieldset>
                {% endif %}

                <fieldset class="ODRSearchBoxWrapper">
                    <div class="pure-u-1">
                        <label for="textbox_general" class="pure-u-1 ODRPrimarySearchLabel">
                            Search for:
                            {% if intent != 'stored_search_keys' %}
                            <i class="fa fa-lg fa-question-circle Pointer ODRSearchHelp"
                               style="padding-left:5px;" title="Search Help"></i>
                            <i class="fa fa-lg fa-info-circle Pointer ODRGeneralSearchList"
                               style="padding-left:5px;" title="Fields searched when using general search:"></i>
                            {% endif %}
                            {% if is_datatype_admin and intent != 'stored_search_keys' %}
                                <i class="fa fa-lg fa-edit Pointer ODREditSearchNotes"
                                   style="padding-left:5px;" title="Edit the search page notes."></i>
                            {% endif %}
                        </label>
                        <input id="textbox_general" class="pure-u-1" type="text" name="gen"
                            {% if search_string is defined and search_string != '' %}value="{{ search_string }}"{% endif %}
                            {% if search_params is defined and search_params['gen'] is defined %}value="{{ search_params['gen'] }}"{% endif %}
                            {% if not can_use_general_search %}disabled="disabled" title="This datatype has no searchable datafields"{% endif %}
                        />
                        <input type="hidden" id="search_type" value="basic" />
                    </div>

                    {% if intent != 'stored_search_keys' %}
                    <div class="pure-u-1" id="ODRSearchHelp_div" style="display:none;">
                        {% include 'ODROpenRepositorySearchBundle:Default:search_help.html.twig' %}
                    </div>
                    <div class="pure-u-1" id="ODRGeneralSearchList_div" class="ODRTableWrap" style="display:none;">
                        {% include 'ODROpenRepositorySearchBundle:Default:search_datafield_list.html.twig' with {
                            'target_datatype': target_datatype,
                            'datatype_array': datatype_array,
                            'datatype_relations': datatype_relations,
                            'logged_in': logged_in,
                        } %}
                    </div>
                    {% endif %}
                </fieldset>

                {# render target datatype first #}
                <fieldset>
                    {% set datatype = datatype_array[target_datatype.id] %}

                    {# check whether the datatype should execute a search plugin... #}
                    {% set rendering_options = {'is_datatype_admin': false, 'context': 'search'} %}
                    {% set render_plugin_instance = null %}
                    {% set render_plugin_override_df_list = [] %}
                    {% for rpi_num,rpi in datatype.renderPluginInstances %}
                        {% if rpi.renderPlugin.overrideSearch == true and rpi.renderPlugin.active and rpi.renderPlugin.render != 'false' %}
                            {% set render_plugin_override_df_list = rpi|can_execute_search_plugin(datatype, [], rendering_options) %}

                            {# Only want to save the render_plugin_instance if it's render-able #}
                            {% if render_plugin_override_df_list is iterable and render_plugin_override_df_list|length > 0 %}
                                {% set render_plugin_instance = rpi %}
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    <div class="ODRAdvSearch_header">
                        <span>{{ datatype['dataTypeMeta']['shortName'] }}</span>
                        <span class="ODRAdvSearch_caret"><i class="fa fa-lg fa-caret-up"></i></span>
                    </div>
                    <div class="ODRAdvSearch_default">
                        {% for datafield in datatype['dataFields'] %}
                            {% set searchable = datafield['dataFieldMeta']['searchable'] %}
                            {% if searchable == ADVANCED_SEARCH or searchable == ADVANCED_SEARCH_ONLY %}
                                <div class="ODRAdvSearch_datafield pure-u-1">
                                    {% set content = '' %}
                                    {% if datafield.id in render_plugin_override_df_list %}
                                        {% set preset_value = '' %}
                                        {% if search_params[datafield.id] is defined %}
                                            {% set preset_value = search_params[datafield.id] %}
                                        {% endif %}
                                        {% set content = render_plugin_instance|search_plugin(datatype, datafield, preset_value, rendering_options) %}
                                    {% endif %}

                                    {% if content|length > 0 %}
                                        {{ content|raw }}
                                    {% else %}
                                        {% include 'ODROpenRepositorySearchBundle:Default:search_datafield.html.twig' with {
                                            'search_params': search_params,

                                            'datatype': datatype,
                                            'datafield': datafield
                                        } %}
                                    {% endif %}
                                </div>
                            {% endif %}
                        {% endfor %}

                        {% if intent != 'stored_search_keys' %}
                            {# created/modified by, created/modified date, public status of child datarecord #}
                            {% include 'ODROpenRepositorySearchBundle:Default:search_metadata.html.twig' with {
                                'search_params': search_params,

                                'datatype_id': datatype.id,
                                'user_list': user_list,
                                'datatype_permissions': datatype_permissions,
                                'is_top_level': 1
                            } %}
                        {% endif %}
                    </div>
                </fieldset>

                {# render children of target datatype next #}
                {% for child_datatype_id in datatype_relations['child_datatypes'] %}
                    {% set child_datatype = datatype_array[child_datatype_id] %}

                    {% set can_search_child_datatype = false %}
                    {% for datafield in child_datatype['dataFields'] %}
                        {% set searchable = datafield['dataFieldMeta']['searchable'] %}
                        {% if searchable == ADVANCED_SEARCH or searchable == ADVANCED_SEARCH_ONLY %}
                            {% set can_search_child_datatype = true %}
                        {% endif %}
                    {% endfor %}

                    {% if can_search_child_datatype %}

                        {# check whether the child datatype should execute a search plugin... #}
                        {% set rendering_options = {'is_datatype_admin': false, 'context': 'search'} %}
                        {% set render_plugin_instance = null %}
                        {% set render_plugin_override_df_list = [] %}
                        {% for rpi_num,rpi in child_datatype.renderPluginInstances %}
                            {% if rpi.renderPlugin.overrideSearch == true and rpi.renderPlugin.active and rpi.renderPlugin.render != 'false' %}
                                {% set render_plugin_override_df_list = rpi|can_execute_search_plugin(child_datatype, [], rendering_options) %}

                                {# Only want to save the render_plugin_instance if it's render-able #}
                                {% if render_plugin_override_df_list is iterable and render_plugin_override_df_list|length > 0 %}
                                    {% set render_plugin_instance = rpi %}
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        <fieldset>
                            <div class="ODRAdvSearch_header">
                                <span>{{ child_datatype['dataTypeMeta']['shortName'] }}</span>
                                <span class="ODRAdvSearch_caret"><i class="fa fa-lg fa-caret-up"></i></span>
                            </div>
                            <div class="ODRAdvSearch_content pure-u-1">
                                {% for datafield in child_datatype['dataFields'] %}
                                    {% set searchable = datafield['dataFieldMeta']['searchable'] %}
                                    {% if searchable == ADVANCED_SEARCH or searchable == ADVANCED_SEARCH_ONLY %}
                                        <div class="ODRAdvSearch_datafield pure-u-1">
                                            {% set content = '' %}
                                            {% if datafield.id in render_plugin_override_df_list %}
                                                {% set preset_value = '' %}
                                                {% if search_params[datafield.id] is defined %}
                                                    {% set preset_value = search_params[datafield.id] %}
                                                {% endif %}
                                                {% set content = render_plugin_instance|search_plugin(child_datatype, datafield, preset_value, rendering_options) %}
                                            {% endif %}

                                            {% if content|length > 0 %}
                                                {{ content|raw }}
                                            {% else %}
                                                {% include 'ODROpenRepositorySearchBundle:Default:search_datafield.html.twig' with {
                                                    'search_params': search_params,

                                                    'datatype': child_datatype,
                                                    'datafield': datafield
                                                } %}
                                            {% endif %}
                                        </div>
                                    {% endif %}
                                {% endfor %}

                                {% if intent != 'stored_search_keys' %}
                                    {# created/modified by, created/modified date, public status of child datarecord #}
                                    {% include 'ODROpenRepositorySearchBundle:Default:search_metadata.html.twig' with {
                                        'search_params': search_params,

                                        'datatype_id': child_datatype.id,
                                        'user_list': user_list,
                                        'datatype_permissions': datatype_permissions,
                                        'is_top_level': 0
                                    } %}
                                {% endif %}
                            </div>
                        </fieldset>
                    {% endif %}
                {% endfor %}

                {# render linked datatypes last #}
                {% for linked_datatype_id in datatype_relations['linked_datatypes'] %}
                    {% set linked_datatype = datatype_array[linked_datatype_id] %}

                    {% set can_search_linked_datatype = false %}
                    {% for datafield in linked_datatype['dataFields'] %}
                        {% set searchable = datafield['dataFieldMeta']['searchable'] %}
                        {% if searchable == ADVANCED_SEARCH or searchable == ADVANCED_SEARCH_ONLY %}
                            {% set can_search_linked_datatype = true %}
                        {% endif %}
                    {% endfor %}

                    {% if can_search_linked_datatype %}

                        {# check whether the linked datatype should execute a search plugin... #}
                        {% set rendering_options = {'is_datatype_admin': false, 'context': 'search'} %}
                        {% set render_plugin_instance = null %}
                        {% set render_plugin_override_df_list = [] %}
                        {% for rpi_num,rpi in linked_datatype.renderPluginInstances %}
                            {% if rpi.renderPlugin.overrideSearch == true and rpi.renderPlugin.active and rpi.renderPlugin.render != 'false' %}
                                {% set render_plugin_override_df_list = rpi|can_execute_search_plugin(linked_datatype, [], rendering_options) %}

                                {# Only want to save the render_plugin_instance if it's render-able #}
                                {% if render_plugin_override_df_list is iterable and render_plugin_override_df_list|length > 0 %}
                                    {% set render_plugin_instance = rpi %}
                                {% endif %}
                            {% endif %}
                        {% endfor %}

                        <fieldset>
                            <div class="ODRAdvSearch_header">
                                <span>{{ linked_datatype['dataTypeMeta']['shortName'] }}</span>
                                <span class="ODRAdvSearch_caret"><i class="fa fa-lg fa-caret-up"></i></span>
                            </div>
                            <div class="ODRAdvSearch_content pure-u-1">
                                {% for datafield in linked_datatype['dataFields'] %}
                                    {% set searchable = datafield['dataFieldMeta']['searchable'] %}
                                    {% if searchable == ADVANCED_SEARCH or searchable == ADVANCED_SEARCH_ONLY %}
                                        <div class="ODRAdvSearch_datafield pure-u-1">
                                            {% set content = '' %}
                                            {% if datafield.id in render_plugin_override_df_list %}
                                                {% set preset_value = '' %}
                                                {% if search_params[datafield.id] is defined %}
                                                    {% set preset_value = search_params[datafield.id] %}
                                                {% endif %}
                                                {% set content = render_plugin_instance|search_plugin(linked_datatype, datafield, preset_value, rendering_options) %}
                                            {% endif %}

                                            {% if content|length > 0 %}
                                                {{ content|raw }}
                                            {% else %}
                                                {% include 'ODROpenRepositorySearchBundle:Default:search_datafield.html.twig' with {
                                                    'search_params': search_params,

                                                    'datatype': linked_datatype,
                                                    'datafield': datafield
                                                } %}
                                            {% endif %}
                                        </div>
                                    {% endif %}
                                {% endfor %}

                                {% if intent != 'stored_search_keys' %}
                                    {# created/modified by, created/modified date, public status of datarecord #}
                                    {% include 'ODROpenRepositorySearchBundle:Default:search_metadata.html.twig' with {
                                        'search_params': search_params,

                                        'datatype_id': linked_datatype.id,
                                        'user_list': user_list,
                                        'datatype_permissions': datatype_permissions,
                                        'is_top_level': 0
                                    } %}
                                {% endif %}
                            </div>
                        </fieldset>
                    {% endif %}
                {% endfor %}

                {% if intent != 'stored_search_keys' %}
                <fieldset>
                    <div class="pure-u-1">
                        <a class="ODRSearchHelper Pointer pure-u-1" onclick="changeSearch();">Open Advanced
                            Search</a>
                    </div>
                    <div class="pure-u-1">
                        <button class="pure-button pure-button ODRResetButton" type="button" onclick="doReset();">Reset</button>
                        <button class="pure-button pure-button-primary ODRSearchButton" type="submit">Search{% if intent == 'linking' %} for records to Link{% endif %}</button>
                    </div>
                </fieldset>
                {% endif %}
            </form>

            {% if intent == 'searching' %}
                {% include 'ODROpenRepositorySearchBundle:Default:searchpage_markdown.html.twig' with {
                    'datatype': target_datatype,
                    'position': 'lower',
                    'is_datatype_admin': is_datatype_admin,
                } %}
            {% endif %}
        </div>
    </div>

<script>
    /**
     * Initializes the search sidebar.
     *
     * @param {HTMLElement} context
     */
    function InitSearchSidebar(context = undefined) {
        if (context == undefined )
            context = $("#odr_content").children("#ODRSearchSidebar").first();

        $(context).find("#search_top").hide();
        $(context).find(".ODRInput").prop("disabled", true);

        // Prevent normal form behavior
        $(context).find("#search_form").unbind('submit').submit(function (event) {
            event.preventDefault();
            {% if intent != 'stored_search_keys' %}
            doSearch('{{ path('odr_search_results') }}');
            {% endif %}
        });

        // Setup accordions
        $(context).find(".ODRAdvSearch_header").unbind('click').click(function () {
            var content_div = $(this).next();

            if ($(content_div).hasClass('ODRCollapse')) {
                // Show all textfields
                $(content_div).removeClass('ODRCollapse');
                $(content_div).children().each(function () {
                    $(this).slideDown(200);
                });

                $(this).find('i').removeClass('fa-caret-down').addClass('fa-caret-up');
            }
            else {
                // Hide all empty textfields
                $(content_div).addClass('ODRCollapse');
                $(content_div).find('.ODRAdvSearch_datafield').each(function (index,df) {
                    var empty = true;

                    $(df).find('.ODRInput').each(function (index,elem) {
                        if ( $(elem).hasClass("ODRFileDatafieldName") ) {
                            // do nothing... .ODRFileDatafieldExist will handle this file/image field
                        }
                        else if ( $(elem).hasClass("ODRFileDatafieldExist") ) {
                            // The file/image inputs need to be checked simultaneously
                            var name_value = $(elem).parent().children(".ODRFileDatafieldName").val();
                            var exist_value = $(elem).val();

                            // If either value exists, then don't hide this datafield
                            if ( name_value !== '' || exist_value !== '' )
                                empty = false;
                        }
                        else if ( $(this).hasClass("ODRDatePicker") ) {
                            // Datepickers need to check both start/end fields...
                            var id = $(elem).attr('id');
                            var id_data = id.split('_');

                            var start_id = '';
                            var end_id = '';
                            if (id_data.length == 3) {
                                start_id = '#' + id_data[0] + '_' + id_data[1] + '_start';
                                end_id = '#' + id_data[0] + '_' + id_data[1] + '_end';
                            }
                            else if (id_data.length == 4) {
                                start_id = '#' + id_data[0] + '_' + id_data[1] + '_' + id_data[2] + '_start';
                                end_id = '#' + id_data[0] + '_' + id_data[1] + '_' + id_data[2] + '_end';
                            }

                            // If either start or end has something, then dno't hide this datafield
                            if ( $(start_id).val() !== '' || $(end_id).val() !== '' )
                                empty = false;
                        }
                        else if ( $(elem).parent().hasClass('ODRRadioSearchDiv') ) {
                            // Search for a selection made in this radio field
                            var selected = false;
                            $(elem).parent().find('i').each(function () {
                                if ( $(this).hasClass('fa-check') || $(this).hasClass('fa-ban') ) {
                                    selected = true;
                                    return false;
                                }
                            });

                            // If something is selected, then don't hide this datafield
                            if (selected)
                                empty = false;
                        }
                        else if ( $(elem).parent().hasClass('ODRTagSearchDiv') ) {
                            // Search for a selection made in this tag field
                            var selected = false;
                            $(elem).parent().find('i').each(function () {
                                if ($(this).hasClass('fa-check') || $(this).hasClass('fa-ban')) {
                                    selected = true;
                                    return false;
                                }
                            });

                            // If something is selected, then don't hide this datafield
                            if (selected)
                                empty = false;
                        }
                        else if ( $(elem).val() !== '' ) {
                            // All other inputs  should not be hidden when they have a value
                            empty = false;
                        }
                    });

                    // Hide the datafield when it doesn't have a value
                    if (empty)
                        $(df).slideUp(200);
                });

                $(this).find('i').removeClass('fa-caret-up').addClass('fa-caret-down');
            }
        });

        // File/Image stuff
        $(context).find(".ODRFileDatafieldName").unbind('change keyup paste').on('keyup paste', function () {
            var datafield_id_data = $(this).attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            var value = $(this).val();
            var dropdown = $(this).parent().find("#datafield_" + datafield_id + "_ex");
            if (value != '')
                $(dropdown).prop('selectedIndex', '1').change();
            else
                $(dropdown).prop('selectedIndex', '0').change();
        });
        $(context).find(".ODRFileDatafieldExist").unbind('change').change(function () {
            var datafield_id_data = $(this).attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            var value = $(this).val();
            var input = $(this).parent().find("#datafield_" + datafield_id + "_fn");
            if (value != 1)
                $(input).val('');
        });

        // Radio Tristate checkbox
        $(context).find(".ODRRadioLabel > .ODRTristateCheckbox").unbind('click').click(function () {
            // Grab data about the option being clicked
            var icon = $(this).children('i').first();
            var input = $(this).children('input').first();
            var radio_option_id = $(input).attr('rel');

            if ( $(this).parent().hasClass("ODRSelectAllOption") )
                return;

            if ($(icon).hasClass('fa-check')) {
                // Currently selected, change to deselected
                $(this).attr('title', 'Search for Datarecords where this option is unselected');
                $(icon).removeClass('fa-check').addClass('fa-ban');
                $(input).val('-' + radio_option_id);
            }
            else if ($(icon).hasClass('fa-ban')) {
                // Currently deselected, change to blank
                $(this).removeAttr('title');
                $(icon).removeClass('fa-ban');
                $(input).val('');
            }
            else {
                // Currently blank, change to selected
                $(this).attr('title', 'Search for Datarecords where this option is selected');
                $(icon).addClass('fa-check');
                $(input).val(radio_option_id);
            }
        });
        // Tag Tristate checkbox
        $(context).find(".ODRTagLabel > .ODRTristateCheckbox").unbind('click').click(function () {
            // Grab data about the tag being clicked
            var icon_div = $(this).children('i').first();
            var input_div = $(this).children('input').first();
            var tag_id = $(input_div).attr('rel');

            // Ensure this tag being clicked no longer has the "partial" class
            $(icon_div).removeClass('partial');

            if ( $(icon_div).hasClass('fa-check') ) {
                // Currently "selected", change this tag to "deselected"
                $(this).attr('title', 'Search for Datarecords where this tag is unselected');
                $(icon_div).removeClass('fa-check').addClass('fa-ban');
                $(input_div).val('-' + tag_id);
            }
            else if ( $(icon_div).hasClass('fa-ban') ) {
                // Currently "deselected", change this tag to "blank"
                $(this).removeAttr('title');
                $(icon_div).removeClass('fa-ban');
                $(input_div).val('');
            }
            else {
                // Currently "blank", change this tag to "selected"
                $(this).attr('title', 'Search for Datarecords where this tag is selected');
                $(icon_div).addClass('fa-check');
                $(input_div).val(tag_id);
            }

            // Update any parents of this tag to indicate the status of their descendant tags
            var tag_item = $(this).parent().parent();
            applyToTagParents( $(tag_item) );

            // Also need to wipe any status of the children of this tag
            applyToTagChildren( $(tag_item) );
        });
        // Attach expand/collapse handlers to the tags in just the search sidebar
        setupTagTree( $("#ODRSearchSidebar"), 2);

        // Update the parents of all selected/deselected tags
        $(context).find(".ODRTagLabel > .ODRTristateCheckbox > .fa-check,.fa-ban").each(function() {
            var tag_item = $(this).parent().parent().parent();
            applyToTagParents( tag_item );
        });

        // Shortcut to select all options of a Multiple Radio/Select datafield
        $(context).find(".ODRSelectAll").unbind('click').click(function () {
            var datafield_id = $(this).attr('rel');
            var search_div = $(this).parents(".ODRAdvSearch_datafield").find("#Input_" + datafield_id);

            $(search_div).find('i.fa').each(function () {
                if ( !$(this).hasClass('fa-check') ) {
                    $(this).parent().attr('title', 'Search for Datarecords where this option is selected');
                    $(this).removeClass('fa-ban').addClass('fa-check');
                    $(this).next().val($(this).next().attr('rel'));
                }
            });
        });
        // Shortcut to deselect all options of a Radio/Select datafield
        $(context).find(".ODRDeselectAll").unbind('click').click(function () {
            var datafield_id = $(this).attr('rel');
            var search_div = $(this).parents(".ODRAdvSearch_datafield").find("#Input_" + datafield_id);

            $(search_div).find('i.fa').each(function () {
                if ( !$(this).hasClass('fa-ban') ) {
                    $(this).parent().attr('title', 'Search for Datarecords where this option is unselected');
                    $(this).removeClass('fa-check').addClass('fa-ban');
                    $(this).next().val('-' + $(this).next().attr('rel'));
                }
            });
        });
        // Shortcut to clear all options of a Radio/Select datafield
        $(context).find(".ODRClearAll").unbind('click').click(function () {
            var datafield_id = $(this).attr('rel');
            var search_div = $(this).parents(".ODRAdvSearch_datafield").find("#Input_" + datafield_id);

            $(search_div).find('i.fa').each(function () {
                if ( $(this).hasClass('fa-check') || $(this).hasClass('fa-ban') ) {
                    $(this).parent().removeAttr('title');
                    $(this).removeClass('fa-ban fa-check');
                    $(this).next().val('');
                }
            });
        });

        // Trigger filtering of Radio/Tag fields
        var search_sidebar_filter_interval = null;
        $(context).find(".ODRSearchDatafieldFilter").unbind('change').unbind('keyup').unbind('paste').on('keyup paste', function() {
            var df_id_data = $(this).attr('id').split(/_/);
            var df_id = df_id_data[1];

            clearTimeout( search_sidebar_filter_interval );
            search_sidebar_filter_interval = setTimeout(function() {
                filterSearchSidebarField(context, df_id);
            }, 750);
        });

        // Set up datepicker datafields
        $(context).find(".ODRDatePicker").datepicker({
            showOtherMonths: true,
            selectOtherMonths: true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'yy-mm-dd',
            yearRange: '1800:+10',

            onSelect: function (dateText, inst) {

                var field_id = $(this).attr('rel');
                var start_date = $(context).find("#" + field_id + "_start");
                var end_date = $(context).find("#" + field_id + "_end");

                var start_date_value = $(start_date).val();
                var end_date_value = $(end_date).val();

                if (end_date_value !== '' && start_date_value !== '') {
                    if (start_date_value > end_date_value)
                        $(end_date).datepicker("setDate", start_date_value);
                    else if (end_date_value < start_date_value)
                        $(start_date).datepicker("setDate", end_date_value);

                    $(start_date).datepicker("option", "maxDate", end_date_value);
                    $(end_date).datepicker("option", "minDate", start_date_value);
                }
                else if (start_date_value === '') {
                    $(start_date).datepicker("option", "maxDate", end_date_value);
                    $(end_date).datepicker("option", "minDate", null);
                }
                else if (end_date_value === '') {
                    $(start_date).datepicker("option", "maxDate", null);
                    $(end_date).datepicker("option", "minDate", start_date_value);
                }

            },
            onClose: function () {
                $(this).blur();
            },
            beforeShow: function (input, inst) {
            }
        });

        $(context).find(".ODRDatePickerSearch_clear").unbind('click').click(function() {
            var id_data = $(this).attr('id').split(/_/);

            var inputs = [];
            if ( id_data.length == 3 ) {
                inputs.push( $(context).find("#df_" + id_data[1] + "_start") );
                inputs.push( $(context).find("#df_" + id_data[1] + "_end") );
            }
            else if ( id_data.length == 4 ) {
                inputs.push( $(context).find("#dt_" + id_data[1] + "_" + id_data[2] + "_start") );
                inputs.push( $(context).find("#dt_" + id_data[1] + "_" + id_data[2] + "_end") );
            }
            // console.log(inputs);

            $.each(inputs, function(index,elem) {
                $(elem).datepicker("setDate", null);
                $(elem).datepicker("option", "minDate", null);
                $(elem).datepicker("option", "maxDate", null);
                $(elem).datepicker('refresh');
            });
        });

        // Slide out the help menu
        $(context).find(".ODRSearchHelp").unbind('click').click(function () {
            $(context).find("#ODRSearchHelp_div").slideToggle();
        });
        $(context).find(".ODRGeneralSearchList").unbind('click').click(function () {
            $(context).find("#ODRGeneralSearchList_div").slideToggle();
        });

{% if is_datatype_admin and intent != 'stored_search_keys' %}
        $(context).find(".ODRMarkdownHelp_open").unbind('click').click(function(event) {
            event.preventDefault();

            {# defined in ODRAdminBundle:Displaytemplate:markdown_help_dialog.html.twig #}
            openMarkdownHelpDialog();
        });

        $(context).find(".ODREditSearchNotes").unbind('click').click(function () {
            toggleSidebarMarkdownEditMode();
        });

        $(context).find(".ODRSearchPageNotes_save").unbind('click').click(function () {
            var url = '{{ path('odr_save_search_notes', {'datatype_id': target_datatype.id}) }}';

            // Transfer whatever the user entered into the submission form
            var upper_raw_text = $("#upper_raw").val();
            var lower_raw_text = $("#lower_raw").val();
            $("#upper_value").val(upper_raw_text);
            $("#lower_value").val(lower_raw_text);

            $.ajax({
                type: 'POST',
                url: url,
                dataType: 'json',
                data: $("#ODRSearchPageNotes_form").serialize(),
                success: function (data, textStatus, jqXHR) {
                    // Initialize markdown-it plugin
                    var md = window.markdownit();
                    md.disable(['table', 'strikethrough', 'blockquote']);

                    // Update the display divs with the new text
                    $("#upper_rendered").html( md.render(upper_raw_text) );
                    $("#lower_rendered").html( md.render(lower_raw_text) );

                    // Show display divs again
                    toggleSidebarMarkdownEditMode();

                    // Update previous values in case there's an error later on...
                    $("#upper_old").val(upper_raw_text);
                    $("#lower_old").val(lower_raw_text);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Revert back to previous values on an error
                    var upper_old_value = $("#upper_old").val();
                    $("#upper_raw").val(upper_old_value);
                    $("#upper_value").val(upper_old_value);

                    var lower_old_value = $("#lower_old").val();
                    $("#lower_raw").val(lower_old_value);
                    $("#lower_value").val(lower_old_value);
                },
                complete: function (jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                    }
                }
            });
        });
{% endif %}

        $(context).find("#textbox_general").focus();
    }

{% if is_datatype_admin and intent != 'stored_search_keys' %}
    /**
     * Toggles the upper/lower search notes editing functionality of the search sidebar.
     * Doesn't need context passed in, because it only works in one area.
     */
    function toggleSidebarMarkdownEditMode() {
        var edit = $(".ODRSearchPageNotes_edit");
        var rendered = $(".ODRSearchPageNotes_rendered");
        var wrapper_upper = $("#ODRSearchPageNotes_upper");
        var wrapper_lower = $("#ODRSearchPageNotes_lower");
        var upper = $('#upper_rendered');
        var lower = $('#lower_rendered');

        if( edit.hasClass('ODRHidden') ) {
            // Hide rendered divs
            rendered.addClass('ODRHidden');

            // Show wrapper and editor
            wrapper_upper.removeClass('ODRHidden');
            wrapper_lower.removeClass('ODRHidden');
            edit.removeClass('ODRHidden')
        }
        else {
            // Show portions with data
            if (lower.html() !== "")
                lower.removeClass('ODRHidden');
            else
                wrapper_lower.addClass('ODRHidden');

            if (upper.html() !== "")
                upper.removeClass('ODRHidden');
            else
                wrapper_upper.addClass('ODRHidden');

            edit.addClass('ODRHidden')
        }
    }
{% endif %}

    /**
     * Filters the displayed options/tags for a field in the search sidebar.
     *
     * @param {HTMLElement} context
     * @param {number} df_id
     */
    function filterSearchSidebarField(context, df_id) {
        var filter_element = $(context).find("#df_" + df_id + "_filter").first();
        var fieldtype = $(filter_element).attr('rel');
        var filter_text = $(filter_element).val().trim().toLowerCase();

        if ( fieldtype == 'Radio' ) {
            // Radio fields are simpler to filter...
            var radio_options = $(context).find("#Input_" + df_id).children(".ODRRadioLabel");

            if ( filter_text == '' ) {
                // If no text in the filter, ensure all radio options are visible
                $(radio_options).each(function(index,elem) {
                    $(elem).removeAttr('style');
                });
            }
            else {
                $(radio_options).each(function(index,elem) {
                    // Otherwise, need to convert each radio option to lower case...
                    var option_name = $(elem).text().toLowerCase();

                    // ...so it can get compared against the provided filter text
                    if ( option_name.indexOf(filter_text) === -1 )
                        $(elem).hide();
                    else
                        $(elem).removeAttr('style');
                });
            }
        }
        else if ( fieldtype == 'Tag' ) {
            // Tag fields could have a hierarchy...
            var tags = $(context).find("#Input_" + df_id).find(".ODRTagItem");

            if ( filter_text == '' ) {
                // If no text in the filter, ensure all tags are visible
                $(tags).each(function(index,elem) {
                    $(elem).removeAttr('style');
                });
            }
            else {
                $(tags).each(function(index,elem) {
                    // Otherwise, need to convert each tag to lower case...
                    var tag_name = $(elem).children('label').text().toLowerCase();

                    // ...so it can get compared against the provided filter text
                    if ( tag_name.indexOf(filter_text) === -1 )
                        $(elem).hide();
                    else {
                        $(elem).removeAttr('style');

                        // Also need to ensure that all parents of this tag are visible
                        $(elem).parents('.ODRTagItem').removeAttr('style');
                    }
                });
            }
        }
    }
</script>
{% endspaceless %}
