{% spaceless %}

{% set is_datatype_admin = false %}
{% if datatype_permissions[target_datatype.id] is defined and datatype_permissions[target_datatype.id]['dt_admin'] is defined %}
    {% set is_datatype_admin = true %}
{% endif %}

{% set using_sidebar_layout = false %}
{% if sidebar_array['layout_array']|length > 0 %}
    {% set using_sidebar_layout = true %}
{% endif %}

{% set datatype_array = sidebar_array['datatype_array'] %}

{# Due to the possibility of fields being "out of order", might as well determine whether any datatype plugins want to interfere with search rendering here #}
{% set rendering_options = {'is_datatype_admin': false, 'context': 'search'} %}
{% set rpi_lookup = [] %}
{% for dt_id,dt in datatype_array %}
    {% for rpi_num,rpi in dt.renderPluginInstances %}
        {% if rpi.renderPlugin.overrideSearch == true and rpi.renderPlugin.active and rpi.renderPlugin.render != 'false' %}
            {% set render_plugin_override_df_list = rpi|can_execute_search_plugin(dt, [], rendering_options) %}

            {# Only want to save the render_plugin_instance if it's render-able #}
            {% if render_plugin_override_df_list is iterable and render_plugin_override_df_list|length > 0 %}
                {% set render_plugin_instance = rpi %}
                {% for rpf_name,df_id in render_plugin_override_df_list %}
                    {% set hash_key = 'df_' ~ df_id %}
                    {% set rpi_lookup = rpi_lookup|merge({ (hash_key): (rpi) }) %}
                {% endfor %}
            {% endif %}
        {% endif %}
    {% endfor %}
{% endfor %}

<div class="ODRThemeElement">
    <input id="ODRSidebarSearchKey" type="hidden" value="{% if search_key is defined and search_key != '' %}{{ search_key }}{% endif %}" />
    <input id="ODRSearchIntent" type="hidden" value="{{ intent }}" />

    <div class="ODRInnerBox">
        {% if intent != 'stored_search_keys' %}
        <span>
            <i class="ODRSearchToggle fa fa-lg"></i>
        </span>
        {% endif %}

        {% if intent == 'searching' %}
            {% include 'ODROpenRepositorySearchBundle:Default:searchpage_markdown.html.twig' with {
                'datatype': target_datatype,
                'position': 'upper',
                'is_datatype_admin': is_datatype_admin,
            } %}
        {% endif %}

        <form id="search_form" class="pure-form pure-u-23-24 pure-form-stacked">

{#            <input type="hidden" name="inverse" value="1" />      #}{# TODO #}

            <input type="hidden" id="search_type" value="collapsed" />
            <input type="hidden" id="datatype_id" name="dt_id" value="{{ target_datatype.id }}"/>
            {% if intent != 'stored_search_keys' %}
            <input type="hidden" id="selected_theme_id" value="{{ preferred_theme.id }}"/>
            {% endif %}

            {# Only have a reset/search block if there are fields in 'expanded' display #}
            {% if intent != 'stored_search_keys' and (sidebar_array['extended_display']|length > 0 or not using_sidebar_layout) %}
            <fieldset id="ODRSearchControls_top" class="ODRHidden">    {# want it hidden by default, though #}
                <div>
                    <div class="pure-u-1">
                        <a class="ODRSearchFieldsToggle Pointer pure-u-1" onclick="changeSearch();">
                            Open Expanded Search
                        </a>
                    </div>
                    <div class="pure-u-1">
                        <button class="pure-button pure-button ODRResetButton" type="button" onclick="doReset();">Reset</button>
                        <button class="pure-button pure-button-primary ODRSearchButton" type="submit">Search{% if intent == 'linking' %} for records to Link{% endif %}</button>
                    </div>
                </div>
            </fieldset>
            {% endif %}

            <fieldset class="ODRSearchBoxWrapper">
                <div class="pure-u-1">
                    <label for="textbox_general" class="pure-u-1 ODRPrimarySearchLabel">
                        Search:
                        {% if intent != 'stored_search_keys' %}
                            <i class="fa fa-lg fa-question-circle ODRSearchHelp" title="Search Help"></i>
                            <i class="fa fa-lg fa-cog ODRChooseSidebarLayout" title="Choose Sidebar Layout"></i>
                            {% if is_datatype_admin %}
                            <i class="fa fa-lg fa-edit ODREditSearchNotes" title="Edit the search page notes."></i>
                            {% endif %}
                        {% endif %}
                    </label>
                </div>

                {% if intent != 'stored_search_keys' %}
                <div id="ODRSearchHelp_div" class="pure-u-1 ODRHidden">
                    {% include 'ODROpenRepositorySearchBundle:Default:search_help.html.twig' %}
                </div>
                {% endif %}
            </fieldset>

            {# render ALWAYS_SHOW first #}
            {% if using_sidebar_layout %}
                {% include 'ODROpenRepositorySearchBundle:Default:search_sidebar_layout_fields.html.twig' with {
                    'sidebar_array': sidebar_array,
                    'field_list_name': 'always_display',
                    'datatype_array': datatype_array,
                    'rpi_lookup': rpi_lookup,

                    'search_params': search_params,
                } %}
            {% else %}
                {# Default sidebar layouts only have the "general search" input as 'always_show' #}
                <fieldset>
                    <label for="textbox_general">
                        All Fields:
                        {% if datatype_array|length > 1 %}
                            {% if search_params is defined and search_params['gen_lim'] is defined %}
                            <span id="textbox_general_blurb" title="Search each field in the current database">
                                (current database)
                            </span>
                            {% else %}
                            <span id="textbox_general_blurb" title="Search in all possible fields, including descendant databases">
                                (include descendants)
                            </span>
                            {% endif %}
                        {% endif %}
                    </label>
                    <input id="textbox_general" class="ODRInput pure-u-1" type="text"
                        {% if search_params is defined and search_params['gen_lim'] is defined %}name="gen_lim"{% else %}name="gen"{% endif %}

                        {% if search_params is defined and search_params['gen'] is defined %}value="{{ search_params['gen'] }}"{% endif %}
                        {% if search_params is defined and search_params['gen_lim'] is defined %}value="{{ search_params['gen_lim'] }}"{% endif %}
                    />
                </fieldset>
            {% endif %}

            {# render EXTENDED_DISPLAY after #}
            {% if using_sidebar_layout %}
                {% include 'ODROpenRepositorySearchBundle:Default:search_sidebar_layout_fields.html.twig' with {
                    'sidebar_array': sidebar_array,
                    'field_list_name': 'extended_display',
                    'datatype_array': datatype_array,
                    'rpi_lookup': rpi_lookup,

                    'search_params': search_params,
                } %}
            {% else %}
                {% include 'ODROpenRepositorySearchBundle:Default:search_sidebar_default_fields.html.twig' with {
                    'sidebar_array': sidebar_array,
                    'datatype_array': datatype_array,
                    'target_datatype_id': target_datatype.id,
                    'rpi_lookup': rpi_lookup,

                    'search_params': search_params,

                    'user_list': user_list,
                    'datatype_permissions': datatype_permissions,
                } %}
            {% endif %}

            {% if intent != 'stored_search_keys' %}
            <fieldset id="ODRSearchControls_bottom">
                {% if sidebar_array['extended_display']|length > 0 or not using_sidebar_layout %}    {# only want this when there are fields in 'expanded' display #}
                <div class="pure-u-1">
                    <a class="ODRSearchFieldsToggle Pointer pure-u-1" onclick="changeSearch();">Open Expanded Search</a>
                </div>
                {% endif %}
                <div class="pure-u-1">
                    <button class="pure-button pure-button ODRResetButton" type="button" onclick="doReset();">Reset</button>
                    <button class="pure-button pure-button-primary ODRSearchButton" type="submit">Search{% if intent == 'linking' %} for records to Link{% endif %}</button>
                </div>
            </fieldset>
            {% endif %}
        </form>

        {% if intent == 'searching' %}
            {% include 'ODROpenRepositorySearchBundle:Default:searchpage_markdown.html.twig' with {
                'datatype': target_datatype,
                'position': 'lower',
                'is_datatype_admin': is_datatype_admin,
            } %}
        {% endif %}
    </div>
</div>

<script>
    /**
     * Initializes the search sidebar.
     *
     * @param {HTMLElement} context
     */
    function InitSearchSidebar(context = undefined) {
        if (context == undefined )
            context = $("#odr_content").children("#ODRSearchSidebar").first();

        // Prevent normal form behavior
        $(context).find("#search_form").unbind('submit').submit(function (event) {
            event.preventDefault();
            {% if intent != 'stored_search_keys' %}
            doSearch('{{ path('odr_search_results') }}');
            {% endif %}
        });

        // Toggle general search between only searching in the immediate datatype, or searching in
        //  all descendants
        $(context).find("#textbox_general_blurb").unbind('click').click(function() {
            var input = $("#textbox_general");
            if ( $(input).attr('name') === 'gen_lim' ) {
                $(input).attr('name', 'gen');
                $(this).html('(include descendants)').attr('title', 'Search in all possible fields, including descendant databases');
            }
            else {
                $(input).attr('name', 'gen_lim')
                $(this).html('(current database)').attr('title', 'Search each field in the current database');
            }
        });

        // Setup accordions
        $(context).find(".ODRAdvSearch_header").unbind('click').click(function () {
            var content_div = $(this).next();

            if ($(content_div).hasClass('ODRCollapse')) {
                // Show all textfields
                $(content_div).removeClass('ODRCollapse');
                $(content_div).children().each(function () {
                    $(this).slideDown(200);
                });

                $(this).find('i').removeClass('fa-caret-down').addClass('fa-caret-up');
            }
            else {
                // Hide all empty textfields
                $(content_div).addClass('ODRCollapse');
                $(content_div).find('.ODRAdvSearch_datafield').each(function (index,df) {
                    var empty = true;

                    $(df).find('.ODRInput').each(function (index,elem) {
                        if ( $(elem).hasClass("ODRFileDatafieldName") ) {
                            // do nothing... .ODRFileDatafieldExist will handle this file/image field
                        }
                        else if ( $(elem).hasClass("ODRFileDatafieldExist") ) {
                            // The file/image inputs need to be checked simultaneously
                            var name_value = $(elem).parent().children(".ODRFileDatafieldName").val();
                            var exist_value = $(elem).val();

                            // If either value exists, then don't hide this datafield
                            if ( name_value !== '' || exist_value !== '' )
                                empty = false;
                        }
                        else if ( $(this).hasClass("ODRDatePicker") ) {
                            // Datepickers need to check both start/end fields...
                            var id = $(elem).attr('id');
                            var id_data = id.split('_');

                            var start_id = '';
                            var end_id = '';
                            if (id_data.length == 3) {
                                start_id = '#' + id_data[0] + '_' + id_data[1] + '_start';
                                end_id = '#' + id_data[0] + '_' + id_data[1] + '_end';
                            }
                            else if (id_data.length == 4) {
                                start_id = '#' + id_data[0] + '_' + id_data[1] + '_' + id_data[2] + '_start';
                                end_id = '#' + id_data[0] + '_' + id_data[1] + '_' + id_data[2] + '_end';
                            }

                            // If either start or end has something, then dno't hide this datafield
                            if ( $(start_id).val() !== '' || $(end_id).val() !== '' )
                                empty = false;
                        }
                        else if ( $(elem).parent().hasClass('ODRRadioSearchDiv') ) {
                            // Search for a selection made in this radio field
                            var selected = false;
                            $(elem).parent().find('i').each(function () {
                                if ( $(this).hasClass('fa-check') || $(this).hasClass('fa-ban')
                                    || $(this).hasClass('ODRFourstate_OR') || $(this).hasClass('ODRFourstate_AND')
                                ) {
                                    selected = true;
                                    return false;
                                }
                            });

                            // If something is selected, then don't hide this datafield
                            if (selected)
                                empty = false;
                        }
                        else if ( $(elem).parent().hasClass('ODRTagSearchDiv') ) {
                            // Search for a selection made in this tag field
                            var selected = false;
                            $(elem).parent().find('i').each(function () {
                                if ( $(this).hasClass('fa-check') || $(this).hasClass('fa-ban')
                                    || $(this).hasClass('ODRFourstate_OR') || $(this).hasClass('ODRFourstate_AND')
                                ) {
                                    selected = true;
                                    return false;
                                }
                            });

                            // If something is selected, then don't hide this datafield
                            if (selected)
                                empty = false;
                        }
                        else if ( $(elem).val() !== '' ) {
                            // All other inputs  should not be hidden when they have a value
                            empty = false;
                        }
                    });

                    // Hide the datafield when it doesn't have a value
                    if (empty)
                        $(df).slideUp(200);
                });

                $(this).find('i').removeClass('fa-caret-up').addClass('fa-caret-down');
            }
        });

        // File/Image stuff
        $(context).find(".ODRFileDatafieldName").unbind('change keyup paste').on('keyup paste', function () {
            var datafield_id_data = $(this).attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            var value = $(this).val();
            var dropdown = $(this).parent().find("#datafield_" + datafield_id + "_ex");
            if (value != '')
                $(dropdown).prop('selectedIndex', '1').change();
            else
                $(dropdown).prop('selectedIndex', '0').change();
        });
        $(context).find(".ODRFileDatafieldExist").unbind('change').change(function () {
            var datafield_id_data = $(this).attr('id').split(/_/);
            var datafield_id = datafield_id_data[1];

            var value = $(this).val();
            var input = $(this).parent().find("#datafield_" + datafield_id + "_fn");
            if (value != 1)
                $(input).val('');
        });

        // Radio Tristate checkbox
        $(context).find(".ODRRadioLabel > .ODRTristateCheckbox").unbind('click').click(function () {
            // Grab data about the option being clicked
            var icon_div = $(this).children('i').first();
            var input_div = $(this).children('input').first();
            var radio_option_id = $(input_div).attr('rel');

            if ( $(this).parent().hasClass("ODRSelectAllOption") )
                return;

            if ($(icon_div).hasClass('fa-check')) {
                // Currently selected, change to deselected
                $(this).attr('title', 'Search for Datarecords where this option is unselected');
                $(icon_div).removeClass('fa-check').addClass('fa-ban');
                $(input_div).val('-' + radio_option_id);
            }
            else if ($(icon_div).hasClass('fa-ban')) {
                // Currently deselected, change to blank
                $(this).removeAttr('title');
                $(icon_div).removeClass('fa-ban');
                $(input_div).val('');
            }
            else {
                // Currently blank, change to selected
                $(this).attr('title', 'Search for Datarecords where this option is selected');
                $(icon_div).addClass('fa-check');
                $(input_div).val(radio_option_id);
            }
        });
        // Tag Tristate checkbox
        $(context).find(".ODRTagLabel > .ODRTristateCheckbox").unbind('click').click(function () {
            // Grab data about the tag being clicked
            var icon_div = $(this).children('i').first();
            var input_div = $(this).children('input').first();
            var tag_id = $(input_div).attr('rel');

            // Ensure this tag being clicked no longer has the "partial" class
            $(icon_div).removeClass('partial');

            if ( $(icon_div).hasClass('fa-check') ) {
                // Currently "selected", change this tag to "deselected"
                $(this).attr('title', 'Search for Datarecords where this tag is unselected');
                $(icon_div).removeClass('fa-check').addClass('fa-ban');
                $(input_div).val('-' + tag_id);
            }
            else if ( $(icon_div).hasClass('fa-ban') ) {
                // Currently "deselected", change this tag to "blank"
                $(this).removeAttr('title');
                $(icon_div).removeClass('fa-ban');
                $(input_div).val('');
            }
            else {
                // Currently "blank", change this tag to "selected"
                $(this).attr('title', 'Search for Datarecords where this tag is selected');
                $(icon_div).addClass('fa-check');
                $(input_div).val(tag_id);
            }

            // Update any parents of this tag to indicate the status of their descendant tags
            var tag_item = $(this).parent().parent();
            applyToTagParents( $(tag_item) );

            // Also need to wipe any status of the children of this tag
            applyToTagChildren( $(tag_item) );
        });

        // Radio fourstate checkbox
        $(context).find(".ODRRadioLabel > .ODRFourstateCheckbox").unbind('click').click(function () {
            // Grab data about the tag being clicked
            var default_merge_AND = $(this).parents('.ODRRadioSearchDiv').first().hasClass('ODRDefaultMerge_AND');
            var icon_div = $(this).children('i').first();
            var input_div = $(this).children('input').first();
            var radio_option_id = $(input_div).attr('rel');

            if ( $(this).parent().hasClass("ODRSelectAllOption") )
                return;

            if ( $(icon_div).hasClass('ODRFourstate_AND') ) {
                // Currently set to merge by AND...
                $(icon_div).removeClass('ODRFourstate_AND');

                if ( default_merge_AND ) {
                    // ...since default is to merge by AND, next step is to merge by OR
                    $(this).attr('title', 'Search for Datarecords where this option is selected');
                    $(icon_div).addClass('ODRFourstate_OR');
                    $(input_div).val('~' + radio_option_id);
                }
                else {
                    // ...since default is to merge by OR, next step is to "deselect" the option
                    $(this).attr('title', 'Search for Datarecords where this option is unselected');
                    $(icon_div).addClass('fa-ban');
                    $(input_div).val('-' + radio_option_id);
                }
            }
            else if ( $(icon_div).hasClass('ODRFourstate_OR') ) {
                // Currently set to merge by OR...
                $(icon_div).removeClass('ODRFourstate_OR');

                if ( default_merge_AND ) {
                    // ...since default is to merge by AND, next step is to "deselect" the option
                    $(this).attr('title', 'Search for Datarecords where this option is unselected');
                    $(icon_div).addClass('fa-ban');
                    $(input_div).val('-' + radio_option_id);
                }
                else {
                    // ...since default is to merge by OR, next step is to merge by AND
                    $(this).attr('title', 'Search for Datarecords where this option is selected');
                    $(icon_div).addClass('ODRFourstate_AND');
                    $(input_div).val('~' + radio_option_id);
                }
            }
            else if ( $(icon_div).hasClass('fa-ban') ) {
                // Currently "deselected", change to "doesn't matter"
                $(this).removeAttr('title');
                $(icon_div).removeClass('fa-ban');
                $(input_div).val('');
            }
            else {
                // Currently "blank"...
                if ( default_merge_AND ) {
                    // ...default is to merge by AND
                    $(this).attr('title', 'Search for Datarecords where this option is selected');
                    $(icon_div).addClass('ODRFourstate_AND');
                }
                else {
                    // ...default is to merge by OR
                    $(this).attr('title', 'Search for Datarecords where this option is selected');
                    $(icon_div).addClass('ODRFourstate_OR');
                }
                $(input_div).val(radio_option_id);
            }
        });
        // Tag fourstate checkbox
        $(context).find(".ODRTagLabel > .ODRFourstateCheckbox").unbind('click').click(function () {
            // Grab data about the tag being clicked
            var default_merge_AND = $(this).parents('.ODRTagSearchDiv').first().hasClass('ODRDefaultMerge_AND');
            var icon_div = $(this).children('i').first();
            var input_div = $(this).children('input').first();
            var tag_id = $(input_div).attr('rel');

            // Ensure this tag being clicked no longer has the "partial" class
            $(icon_div).removeClass('partial');

            if ( $(icon_div).hasClass('ODRFourstate_AND') ) {
                // Currently set to merge by AND...
                $(icon_div).removeClass('ODRFourstate_AND');

                if ( default_merge_AND ) {
                    // ...since default is to merge by AND, next step is to merge by OR
                    $(this).attr('title', 'Search for Datarecords where this tag is selected');
                    $(icon_div).addClass('ODRFourstate_OR');
                    $(input_div).val('~' + tag_id);
                }
                else {
                    // ...since default is to merge by OR, next step is to "deselect" the tag
                    $(this).attr('title', 'Search for Datarecords where this tag is unselected');
                    $(icon_div).addClass('fa-ban');
                    $(input_div).val('-' + tag_id);
                }
            }
            else if ( $(icon_div).hasClass('ODRFourstate_OR') ) {
                // Currently set to merge by OR...
                $(icon_div).removeClass('ODRFourstate_OR');

                if ( default_merge_AND ) {
                    // ...since default is to merge by AND, next step is to "deselect" the tag
                    $(this).attr('title', 'Search for Datarecords where this tag is unselected');
                    $(icon_div).addClass('fa-ban');
                    $(input_div).val('-' + tag_id);
                }
                else {
                    // ...since default is to merge by OR, next step is to merge by AND
                    $(this).attr('title', 'Search for Datarecords where this tag is selected');
                    $(icon_div).addClass('ODRFourstate_AND');
                    $(input_div).val('~' + tag_id);
                }
            }
            else if ( $(icon_div).hasClass('fa-ban') ) {
                // Currently "deselected", change to "doesn't matter"
                $(this).removeAttr('title');
                $(icon_div).removeClass('fa-ban fa-check');    // non-leaf tags could have the fa-check class at this point
                $(input_div).val('');
            }
            else {
                // Currently "blank"...
                if ( default_merge_AND ) {
                    // ...default is to merge by AND
                    $(this).attr('title', 'Search for Datarecords where this tag is selected');
                    $(icon_div).addClass('ODRFourstate_AND');
                }
                else {
                    // ...default is to merge by OR
                    $(this).attr('title', 'Search for Datarecords where this tag is selected');
                    $(icon_div).addClass('ODRFourstate_OR');
                }
                $(input_div).val(tag_id);
            }

            // Update any parents of this tag to indicate the status of their descendant tags
            var tag_item = $(this).parent().parent();
            applyToTagParents( $(tag_item) );

            // Also need to wipe any status of the children of this tag
            applyToTagChildren( $(tag_item) );
        });

        // Attach expand/collapse handlers to the tags in just the search sidebar
        setupTagTree( $("#ODRSearchSidebar"), 2);

        // Update the parents of all initially selected/deselected tags
        $(context).find(".ODRTagLabel > .ODRTristateCheckbox > .fa-check,.fa-ban").each(function() {
            var tag_item = $(this).parent().parent().parent();
            applyToTagParents( tag_item );
        });
        $(context).find(".ODRTagLabel > .ODRFourstateCheckbox > .ODRFourstate_OR,.ODRFourstate_AND,.fa-ban").each(function() {
            var tag_item = $(this).parent().parent().parent();
            applyToTagParents( tag_item );
        });

        // Shortcut to select all options of a Multiple Radio/Select datafield
        $(context).find(".ODRSelectAll").unbind('click').click(function () {
            var div = $(this).parents('.ODRAdvSearch_datafield').find('.ODRRadioSearchDiv').first();
            var fa_class = 'fa-check';
            if ( $(div).hasClass('ODRDefaultMerge_AND') )
                fa_class = 'ODRFourstate_AND';
            else if ( $(div).hasClass('ODRDefaultMerge_OR') )
                fa_class = 'ODRFourstate_OR';

            var datafield_id = $(this).attr('rel');
            var search_div = $(this).parents(".ODRAdvSearch_datafield").find("#Input_" + datafield_id);

            $(search_div).find('i.fa').each(function () {
                if ( !($(this).hasClass('fa-check') || $(this).hasClass('ODRFourstate_AND') || $(this).hasClass('ODRFourstate_OR')) ) {
                    $(this).parent().attr('title', 'Search for Datarecords where this option is selected');
                    $(this).removeClass('fa-ban').addClass(fa_class);
                    $(this).next().val($(this).next().attr('rel'));
                }
            });
        });
        // Shortcut to deselect all options of a Radio/Select datafield
        $(context).find(".ODRDeselectAll").unbind('click').click(function () {
            var datafield_id = $(this).attr('rel');
            var search_div = $(this).parents(".ODRAdvSearch_datafield").find("#Input_" + datafield_id);

            $(search_div).find('i.fa').each(function () {
                if ( !$(this).hasClass('fa-ban') ) {
                    $(this).parent().attr('title', 'Search for Datarecords where this option is unselected');
                    $(this).removeClass('fa-check ODRFourstate_AND ODRFourstate_OR').addClass('fa-ban');
                    $(this).next().val('-' + $(this).next().attr('rel'));
                }
            });
        });
        // Shortcut to clear all options of a Radio/Select datafield
        $(context).find(".ODRClearAll").unbind('click').click(function () {
            var datafield_id = $(this).attr('rel');
            var search_div = $(this).parents(".ODRAdvSearch_datafield").find("#Input_" + datafield_id);

            $(search_div).find('i.fa').each(function () {
                if ( $(this).hasClass('fa-check') || $(this).hasClass('fa-ban') || $(this).hasClass('ODRFourstate_AND') || $(this).hasClass('ODRFourstate_OR') ) {
                    $(this).parent().removeAttr('title');
                    $(this).removeClass('fa-check fa-ban ODRFourstate_AND ODRFourstate_OR');
                    $(this).next().val('');
                }
            });
        });

        // Trigger filtering of Radio/Tag fields
        var search_sidebar_filter_interval = null;
        $(context).find(".ODRSearchDatafieldFilter").unbind('change').unbind('keyup').unbind('paste').on('keyup paste', function() {
            var df_id_data = $(this).attr('id').split(/_/);
            var df_id = df_id_data[1];

            clearTimeout( search_sidebar_filter_interval );
            search_sidebar_filter_interval = setTimeout(function() {
                filterSearchSidebarField(context, df_id);
            }, 750);
        });

        // Set up datepicker datafields
        $(context).find(".ODRDatePicker").datepicker({
            showOtherMonths: true,
            selectOtherMonths: true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'yy-mm-dd',
            yearRange: '1800:+10',

            onSelect: function (dateText, inst) {

                var field_id = $(this).attr('rel');
                var start_date = $(context).find("#" + field_id + "_start");
                var end_date = $(context).find("#" + field_id + "_end");

                var start_date_value = $(start_date).val();
                var end_date_value = $(end_date).val();

                if (end_date_value !== '' && start_date_value !== '') {
                    if (start_date_value > end_date_value)
                        $(end_date).datepicker("setDate", start_date_value);
                    else if (end_date_value < start_date_value)
                        $(start_date).datepicker("setDate", end_date_value);

                    $(start_date).datepicker("option", "maxDate", end_date_value);
                    $(end_date).datepicker("option", "minDate", start_date_value);
                }
                else if (start_date_value === '') {
                    $(start_date).datepicker("option", "maxDate", end_date_value);
                    $(end_date).datepicker("option", "minDate", null);
                }
                else if (end_date_value === '') {
                    $(start_date).datepicker("option", "maxDate", null);
                    $(end_date).datepicker("option", "minDate", start_date_value);
                }

            },
            onClose: function () {
                $(this).blur();

                var field_id = $(this).attr('rel');
                $(context).find("#df_" + field_id + "_no_val").prop('checked', false);
                $(context).find("#df_" + field_id + "_with_val").prop('checked', false);
            },
            beforeShow: function (input, inst) {
            }
        });
        $(context).find(".ODRDatePickerSearch_clear").unbind('click').click(function() {
            var id_data = $(this).attr('id').split(/_/);

            var inputs = [];
            if ( id_data.length == 3 ) {
                inputs.push( $(context).find("#df_" + id_data[1] + "_start") );
                inputs.push( $(context).find("#df_" + id_data[1] + "_end") );

                $(context).find("#df_" + id_data[1] + "_no_val").prop('checked', false);
                $(context).find("#df_" + id_data[1] + "_with_val").prop('checked', false);
            }
            else if ( id_data.length == 4 ) {
                inputs.push( $(context).find("#dt_" + id_data[1] + "_" + id_data[2] + "_start") );
                inputs.push( $(context).find("#dt_" + id_data[1] + "_" + id_data[2] + "_end") );
            }
            // console.log(inputs);

            // Ensure the related datepicker elements are empty
            $.each(inputs, function(index,elem) {
                $(elem).datepicker("setDate", null);
                $(elem).datepicker("option", "minDate", null);
                $(elem).datepicker("option", "maxDate", null);
                $(elem).datepicker('refresh');
            });
        });
        $(context).find(".ODRDatePicker_value").unbind('change').change(function() {
            var id_data = $(this).attr('id').split(/_/);
            var df_id = id_data[1];

            // Ensure the other option is unchecked
            if ( id_data[2] === 'no' )
                $(context).find("#df_" + df_id + "_with_val").prop('checked', false);
            else
                $(context).find("#df_" + df_id + "_no_val").prop('checked', false);

            // Ensure the related datepicker elements are empty
            var inputs = [];
            inputs.push( $(context).find("#df_" + df_id + "_start") );
            inputs.push( $(context).find("#df_" + df_id + "_end") );
            $.each(inputs, function(index,elem) {
                $(elem).datepicker("setDate", null);
                $(elem).datepicker("option", "minDate", null);
                $(elem).datepicker("option", "maxDate", null);
                $(elem).datepicker('refresh');
            });
        });

        // Slide out the help menu
        $(context).find(".ODRSearchHelp").unbind('click').click(function () {
            var search_help_div = $(context).find("#ODRSearchHelp_div");
            $(search_help_div).toggleClass('ODRHidden');
        });
        $(context).find(".ODRGeneralSearchList").unbind('click').click(function () {
            $(context).find("#ODRGeneralSearchList_div").slideToggle();
        });

{% if intent != 'stored_search_keys' %}
        $(context).find(".ODRChooseSidebarLayout").unbind('click').click(function() {
            openChooseSidebarLayoutRemodal({{ target_datatype.id }}, '{{ intent }}');
        });
{% endif %}

{% if is_datatype_admin and intent != 'stored_search_keys' %}
        $(context).find(".ODRMarkdownHelp_open").unbind('click').click(function(event) {
            event.preventDefault();

            {# defined in ODRAdminBundle:Displaytemplate:markdown_help_dialog.html.twig #}
            openMarkdownHelpDialog();
        });

        $(context).find(".ODREditSearchNotes").unbind('click').click(function () {
            toggleSidebarMarkdownEditMode();
        });

        $(context).find(".ODRSearchPageNotes_save").unbind('click').click(function () {
            var url = '{{ path('odr_save_search_notes', {'datatype_id': target_datatype.id}) }}';

            // Transfer whatever the user entered into the submission form
            var upper_raw_text = $("#upper_raw").val();
            var lower_raw_text = $("#lower_raw").val();
            $("#upper_value").val(upper_raw_text);
            $("#lower_value").val(lower_raw_text);

            $.ajax({
                type: 'POST',
                url: url,
                dataType: 'json',
                data: $("#ODRSearchPageNotes_form").serialize(),
                success: function (data, textStatus, jqXHR) {
                    // Initialize markdown-it plugin
                    var md = window.markdownit();
                    md.disable(['table', 'strikethrough', 'blockquote']);

                    // Update the display divs with the new text
                    $("#upper_rendered").html( md.render(upper_raw_text) );
                    $("#lower_rendered").html( md.render(lower_raw_text) );

                    // Show display divs again
                    toggleSidebarMarkdownEditMode();

                    // Update previous values in case there's an error later on...
                    $("#upper_old").val(upper_raw_text);
                    $("#lower_old").val(lower_raw_text);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Revert back to previous values on an error
                    var upper_old_value = $("#upper_old").val();
                    $("#upper_raw").val(upper_old_value);
                    $("#upper_value").val(upper_old_value);

                    var lower_old_value = $("#lower_old").val();
                    $("#lower_raw").val(lower_old_value);
                    $("#lower_value").val(lower_old_value);
                },
                complete: function (jqXHR, textStatus) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                    }
                }
            });
        });
{% endif %}

        // Close all accordions...
        $(context).find(".ODRAdvSearch_header").trigger('click');
        {% if search_params|length <= 1 %}
        // ... then re-open the first one (target datatype)
        $(".ODRAdvSearch_default").prev().trigger('click');
        {% endif %}

        // "Expanded" search fieldsets are hidden by default...
        {% if intent == 'stored_search_keys' %}
        // ...but need them visible when dealing with stored search keys
        $(".ODRSearchSidebar_extended").removeClass('ODRHidden');
        {% elseif not using_sidebar_layout and search_params|length > 1 %}
        // ...display them by default when there's more than 1 search param
        changeSearch();
        {% endif %}
    }

{% if is_datatype_admin and intent != 'stored_search_keys' %}
    /**
     * Toggles the upper/lower search notes editing functionality of the search sidebar.
     * Doesn't need context passed in, because it only works in one area.
     */
    function toggleSidebarMarkdownEditMode() {
        var edit = $(".ODRSearchPageNotes_edit");
        var rendered = $(".ODRSearchPageNotes_rendered");
        var wrapper_upper = $("#ODRSearchPageNotes_upper");
        var wrapper_lower = $("#ODRSearchPageNotes_lower");
        var upper = $('#upper_rendered');
        var lower = $('#lower_rendered');

        if( edit.hasClass('ODRHidden') ) {
            // Hide rendered divs
            rendered.addClass('ODRHidden');

            // Show wrapper and editor
            wrapper_upper.removeClass('ODRHidden');
            wrapper_lower.removeClass('ODRHidden');
            edit.removeClass('ODRHidden')
        }
        else {
            // Show portions with data
            if (lower.html() !== "")
                lower.removeClass('ODRHidden');
            else
                wrapper_lower.addClass('ODRHidden');

            if (upper.html() !== "")
                upper.removeClass('ODRHidden');
            else
                wrapper_upper.addClass('ODRHidden');

            edit.addClass('ODRHidden')
        }
    }
{% endif %}
</script>
{% endspaceless %}
