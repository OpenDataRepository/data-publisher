{% spaceless %}

{% set is_datatype_admin = false %}
{% if datatype_permissions[target_datatype.id] is defined and datatype_permissions[target_datatype.id]['dt_admin'] is defined %}
    {% set is_datatype_admin = true %}
{% endif %}

{% set using_sidebar_layout = false %}
{% if sidebar_array['layout_array']|length > 0 %}
    {% set using_sidebar_layout = true %}
{% endif %}

{% set datatype_array = sidebar_array['datatype_array'] %}
{% set datatype = datatype_array[target_datatype.id] %}

<div id="markdown_help_dialog_wrapper">
    {% include 'ODRAdminBundle:Displaytemplate:markdown_help_dialog.html.twig' %}
</div>

    {# Search sidebar is loaded from ODROpenRepositorySearchBundle:Default:index.html.twig #}
    {#{% include 'ODROpenRepositorySearchBundle:Default:search_sidebar.html.twig' %}#}

<script>
    $(function () {
        // Need to ensure the sidebar is initialized properly...
        InitSearchSidebar();
        // ...but don't need to ensure it's enabled...the display/edit/search results page will take
        //  care of that
        // enableSearchSidebar('{{ search_key }}', 'expanded');

        // If user is on the base search page for a datatype...
        if (window.location.hash.length === 0) {
            // ...then immediately trigger a search with "default" criteria
            doSearch('{{ path('odr_search_results') }}');

            // Don't immediately return...the search controls need initialization
            // return;
        }
    });

    /**
     * Toggles the search sidebar between "simple" and "extended" modes.  By default, the sidebar
     * starts out in "simple" mode.
     */
    function changeSearch() {
        // If this element doesn't exist, then there's nothing to do
        if ( $("#ODRSearchControls_top") === undefined )
            return;

        if ($("#search_type").val() === 'simple') {
            // Show all expanded search datafields
            $("#search_type").val('extended');
            $(".ODRSearchFieldsToggle").each(function () {
                $(this).html('Close Expanded Search');
            });

            $(".ODRSearchSidebar_extended").removeAttr('style'); // show() uses display:block..don't want that
            // $(".ODRInput").prop("disabled", false);    {# TODO - don't remember if this was needed #}

            $("#ODRSearchControls_top").show();
        }
        else {
            // Hide all expanded search datafields
            $("#search_type").val('simple');
            $(".ODRSearchFieldsToggle").each(function () {
                $(this).html('Open Expanded Search');
            });

            $(".ODRSearchSidebar_extended").hide();
            // $(".ODRInput").prop("disabled", true);    {# TODO - don't remember if this was needed #}

            $("#ODRSearchControls_top").hide();
        }
    }

    /**
     * Reloads the page so the default search is guaranteed to display.
     */
    function doReset() {
        {# Redirect to get rid of anything that would match the route 'odr_search_immediate' #}
        window.location.href = '{{ path('odr_search', {'search_slug': search_slug}) }}';
    }

    /**
     * Serializes the search sidebar and POSTs the data to the given URL.
     *
     * If the given URL is equivalent to the path for the route 'odr_search_results', then a
     * regular search is triggered, and the user is redirected to the search results afterwards.
     *
     * If a callback function is provided, then it will be given whatever the POST returned.
     *
     * @param {String} target_url
     * @param {HTMLElement} context
     * @param {Function} callback
     */
    function doSearch(target_url, context = undefined, callback = undefined) {
        // ----------------------------------------
        var is_actual_search = true;
        if ( target_url != '{{ path('odr_search_results') }}' )
            is_actual_search = false;

        if (context == undefined)
            context = $("#odr_content").find("#ODRSearchSidebar").first();

        if (callback == undefined)
            callback = function() {}

        // ----------------------------------------
        // Values for Radio datafields need to be manually set
        $(context).find(".ODRRadioSearchDiv").each(function () {
            var data = $(this).attr('id').split(/_/);
            var datafield_id = data[1];

            // Reset the input's value since this is rebuilding the search value from scratch
            var datafield = $(this).children("#datafield_" + datafield_id);
            datafield.val('');

            var str = '';
            var first_selection = true;
            var has_selections = false;

            $(this).find('input').each(function () {
                // Grab the radio_option_id
                var value = $(this).val().trim();
                if (value == '')
                    return;

                has_selections = true;
                if ( !first_selection ) {
                    str += ',' + value;
                }
                else {
                    first_selection = false;
                    str += value;
                }
            });

            if (has_selections)
                datafield.val(str);
        });

        // Same for tag datafields
        $(context).find(".ODRTagSearchDiv").each(function () {
            var data = $(this).attr('id').split(/_/);
            var datafield_id = data[1];

            // Reset the input's value since this is rebuilding the search value from scratch
            var datafield = $(this).children("#datafield_" + datafield_id);
            datafield.val('');

            var str = '';
            var first_selection = true;
            var has_selections = false;

            $(this).find('input').each(function () {
                // Grab the tag
                var value = $(this).val().trim();
                if (value == '')
                    return;

                has_selections = true;
                if ( !first_selection ) {
                    str += ',' + value;
                }
                else {
                    first_selection = false;
                    str += value;
                }
            });

            if (has_selections)
                $(datafield).val(str);
        });

        // Ensure the two parts of the search criteria for a file/image match
        $(context).find(".ODRFileDatafieldName").each(function () {
            var df_id_data = $(this).attr('id').split(/_/);
            var df_id = df_id_data[1];

            var value = $(this).val().trim();
            var exist_value = $("#datafield_" + df_id + "_ex option:selected").val();

            if (exist_value == '') {
                $(this).val('');
            }
            else if (exist_value == 0) {
                $(this).val('""');   // If user wanted datarecords that do not have files/images, set this datafield's value to empty string
            }
            else if (exist_value == 1 && (value == '' || value == '""')) {
                $(this).val('!""');  // If user wanted datarecords that do have files/images, but didn't specify a filename, set this datafield's value to 'not empty'
            }
        });
        // Don't need to do anything specific for the file/image's public status or quality

        $(".ODRPluginSearchField").each(function(index,elem) {
            var id = '#' + $(elem).attr("id");
            var main_value = $(id + "_main").val();
            var alt_value = $(id + "_alt").val();

            if ( alt_value === '' ) {
                $(elem).val(main_value);
            }
            else {
                var new_value = '';
                if ( main_value !== '' )
                    new_value = main_value;

                new_value += ":" + alt_value;
                $(elem).val(new_value);
            }
        });


        var search_form = $(context).find("#search_form");
        // console.log(search_form);

        var post_data = $(search_form).serialize();
        var df_values = post_data.split(/&/);
        var cleaned = [];
        $.each(df_values, function(index, elem) {
            if ( elem.charAt(elem.length-1) !== '=' )
                cleaned.push(elem);
        });
        post_data = cleaned.join('&');
        // console.log(post_data);

        // ----------------------------------------
        // TODO - need to communicate which theme to use...

        // Request search results
        var intent = $(context).find("#ODRSearchIntent").val();
        if ( is_actual_search )
            showSearchOverlay('Searching...', intent);

        $.ajax({
            type: 'POST',
            url: target_url,
            dataType: 'json',
            data: post_data,
            success: function (data, textStatus, jqXHR) {
                // If this wasn't a "regular" search request, then execute the given callback
                if ( !is_actual_search ) {
                    callback(data);
                    return true;
                }

                // ----------------------------------------
                // If this was a "regular" search request, then do required setup before redirecting
                //  the user
                if ( intent === 'searching' ) {
                    // Overwrite any currently existing tab id, since a new search was performed
                    if (window.sessionStorage.getItem('odr_tab_id')) {
                        // Tell the server to stop storing data for the old tab
                        // TODO - transfer page length?
                        var url = '{{ path('odr_datatables_state_destroy', { 'odr_tab_id': '' } ) }}';
                        url += window.sessionStorage.getItem('odr_tab_id');

                        $.ajax({
                            type: 'GET',
                            url: url,
                            dataType: 'json',
                        });
                    }
                    window.sessionStorage.setItem('odr_tab_id', '{{ odr_tab_id }}');

                    // Now that the search has been performed and cached, render the results
                    var url = '{{ path('odr_search_render', { 'search_theme_id': 0, 'search_key': '', 'offset': '1' } ) }}';
                    url = url.substr(0, url.length - 2);
                    url += $("#selected_theme_id").val() + '/' + data.d.search_key + '/1';

                    // Save the search key so TODO
                    $(context).find("#ODRSidebarSearchKey").val(data.d.search_key);

                    // UpdateURL() will end up forcing a hashchange event one way or another, and
                    //  also replace the search overlay
                    // hideSearchOverlay();
                    UpdateURL(url);
                }
                else if ( intent === 'linking' ) {
                    var url = '{{ path('odr_search_render', { 'search_theme_id': 0, 'search_key': '', 'offset': '1', 'intent': 'linking' } ) }}';
                    url = url.substr(0, url.length - 10);
                    url += data.d.search_key + '/1/linking';

                    // Render the html into the #ODRSearchBoxContent div on this page
                    $.ajax({
                        type: 'GET',
                        url: url,
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            $(context).find("#ODRSidebarSearchKey").val(data.d.search_key);
                            $("#ODRSearchBoxContent").html(data.d.html);

                            // Linking does need the search overlay to be hidden though, since the
                            //  results are spliced onto the page
                            hideSearchOverlay();
                        }
                    });
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // TODO - should everything get reset on an error?
                // doReset();

                // If an error was encountered and this wasn't a real search, it was most likely
                //  a request from one of ODR's modals...close the modal so the error can be seen
                if ( !is_actual_search )
                    closeODRRemodal();
            },
            complete: function (jqXHR, textStatus) {

                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });
    }

    /**
     * When a tag is clicked, it's useful to visually notify the state of the tag's parent too...
     * @param {HTMLElement} source_element
     */
    function applyToTagParents(source_element) {
        var parent_tag = $(source_element).parent().parent().not('div');
        if ( $(parent_tag).length === 0)
            return;

        // $(parent_tag) should be a <li class="ODRTagItem"> element
        var parent_checkbox_icon = $(parent_tag).children('label').children('.ODRTristateCheckbox').first().children('i');
        var selected_count = $(parent_tag).children('ul').find('.fa-check').length;
        var unselected_count = $(parent_tag).children('ul').find('.fa-ban').length;
        // var total_count = $(parent_tag).children('ul').find('.fa').length;
        if (selected_count === 0 && unselected_count === 0) {
            // No children selected, so this one should be unselected too
            $(parent_checkbox_icon).removeClass('fa-check fa-ban partial');
        }
        /*
        else if (selected_count === total_count) {
            // All children selected, so this one should be selected too
            $(parent_checkbox_icon).removeClass('fa-ban partial').addClass('fa-check');
        }
        else if (unselected_count === total_count) {
            // All children selected, so this one should be selected too
            $(parent_checkbox_icon).removeClass('fa-check partial').addClass('fa-ban');
        }
        */
        else if (selected_count > 0) {
            // Some children selected, so this one should be partially selected
            $(parent_checkbox_icon).removeClass('fa-ban').addClass('fa-check partial');
        }
        else if (unselected_count > 0) {
            // No children are selected, but at least one child is unselected...so this one
            //  should be partially unselected
            $(parent_checkbox_icon).removeClass('fa-check').addClass('fa-ban partial');
        }

        // The parent tag should no longer have a selection of its own
        $(parent_tag).children('label').find('input').val('');

        // Need to recursively apply this stuff to the parent tag as well
        applyToTagParents( $(parent_tag) );
    }

    /**
     * When a tag is clicked, all of its children need to have their selections cleared...
     * @param {HTMLElement} source_element
     */
    function applyToTagChildren(source_element) {
        var child_tag_group = $(source_element).children('.ODRTagGroup').first();
        if ( $(child_tag_group).length === 0 )
            return;

        $(child_tag_group).find('i').each(function() {
            $(this).removeClass('fa-check fa-ban partial');
        });
        $(child_tag_group).find('input').each(function() {
            $(this).val('');
        });
    }

    /**
     * Filters the displayed options/tags for a field in the search sidebar.
     *
     * @param {HTMLElement} context
     * @param {number} df_id
     */
    function filterSearchSidebarField(context, df_id) {
        var filter_element = $(context).find("#df_" + df_id + "_filter").first();
        var fieldtype = $(filter_element).attr('rel');
        var filter_text = $(filter_element).val().trim().toLowerCase();

        if ( fieldtype == 'Radio' ) {
            // Radio fields are simpler to filter...
            var radio_options = $(context).find("#Input_" + df_id).children(".ODRRadioLabel");

            if ( filter_text == '' ) {
                // If no text in the filter, ensure all radio options are visible
                $(radio_options).each(function(index,elem) {
                    $(elem).removeAttr('style');
                });
            }
            else {
                $(radio_options).each(function(index,elem) {
                    // Otherwise, need to convert each radio option to lower case...
                    var option_name = $(elem).text().toLowerCase();

                    // ...so it can get compared against the provided filter text
                    if ( option_name.indexOf(filter_text) === -1 )
                        $(elem).hide();
                    else
                        $(elem).removeAttr('style');
                });
            }
        }
        else if ( fieldtype == 'Tag' ) {
            // Tag fields could have a hierarchy...
            var tags = $(context).find("#Input_" + df_id).find(".ODRTagItem");

            if ( filter_text == '' ) {
                // If no text in the filter, ensure all tags are visible
                $(tags).each(function(index,elem) {
                    $(elem).removeAttr('style');
                });
            }
            else {
                $(tags).each(function(index,elem) {
                    // Otherwise, need to convert each tag to lower case...
                    var tag_name = $(elem).children('label').text().toLowerCase();

                    // ...so it can get compared against the provided filter text
                    if ( tag_name.indexOf(filter_text) === -1 )
                        $(elem).hide();
                    else {
                        $(elem).removeAttr('style');

                        // Also need to ensure that all parents of this tag are visible
                        $(elem).parents('.ODRTagItem').removeAttr('style');
                    }
                });
            }
        }
    }
</script>

{% endspaceless %}
