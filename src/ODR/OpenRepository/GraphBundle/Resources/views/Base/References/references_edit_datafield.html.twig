{% spaceless %}

{% set datarecord_is_fake = false %}

{% set datafield_meta = datafield.dataFieldMeta %}
{% set field_typename = datafield_meta.fieldType.typeName %}
{% set field_typeclass = datafield_meta.fieldType.typeClass %}

{% set datarecordfield = '' %}
{% set valuefield = '' %}
{% set valuefield_value = '' %}
{% if datarecord.dataRecordFields[ datafield.id ] is defined %}
    {% set datarecordfield = datarecord.dataRecordFields[ datafield.id ] %}

    {# These are the only fieldtypes used by the reference plugins #}
    {% if field_typename == "File" %}
        {% set valuefield = datarecordfield.file %}
    {% elseif field_typename == "Paragraph Text" and datarecordfield.longText[0] is defined %}
        {% set valuefield = datarecordfield.longText[0] %}
        {% set valuefield_value = valuefield.value %}
    {% elseif field_typename == "Long Text" and datarecordfield.longVarchar[0] is defined %}
        {% set valuefield = datarecordfield.longVarchar[0] %}
        {% set valuefield_value = valuefield.value %}
    {% elseif field_typename == "Medium Text" and datarecordfield.mediumVarchar[0] is defined %}
        {% set valuefield = datarecordfield.mediumVarchar[0] %}
        {% set valuefield_value = valuefield.value %}
    {% elseif field_typename == "Short Text" and datarecordfield.shortVarchar[0] is defined %}
        {% set valuefield = datarecordfield.shortVarchar[0] %}
        {% set valuefield_value = valuefield.value %}
    {% endif %}
{% endif %}

{% if valuefield == '' and (field_typename == 'File' or field_typename == 'Image' or field_typeclass == 'Radio') %}
    {% set valuefield = [] %}
{% endif %}

{% set max_length = '' %}
{% if field_typename == "Long Text" %}
    {% set max_length = 255 %}
{% elseif field_typename == "Medium Text" %}
    {% set max_length = 64 %}
{% elseif field_typename == "Short Text" %}
    {% set max_length = 32 %}
{% endif %}

{% set unique_id = datarecord.id ~ '_' ~ datafield.id %}
{% set input_id = field_typeclass ~ 'Form_' ~ unique_id %}
{% set input_name = field_typeclass ~ 'Form[value]' %}

    <form
        autocomplete="off"
        action="{{ path('odr_record_save', { 'datarecord_id': datarecord.id, 'datafield_id': datafield.id }) }}"
        class="pure-u-1"
        id="EditForm_{{ unique_id }}"
        method="POST"
    >

        <input type="hidden" id="{{ field_typeclass }}Form__token" name="{{ field_typeclass }}Form[_token]" value="{{ token_list[ datarecord.id ][ datafield.id ] }}" />

    {# TODO - can't run datafield plugins because their javascript could interfere with the javascript the reference plugin needs to have... #}

    {% if field_typename == "File" %}
        {% set has_file = false %}
        {% if valuefield|length > 0 %}
            {% set has_file = true %}
        {% endif %}

        {#<fieldset>#}
        <div class="ODRFileDatafield">
            <div class="ODRFileDatafield_header pure-u-1">
            {% if not datarecord_is_fake %}
                <i class="Pointer fa fa-download fa-lg ODRDownloadAllFiles" title="Download all Files in this Datafield"></i>&nbsp;
                <span title="{{ datafield.dataFieldMeta.description }}">{{ datafield.dataFieldMeta.fieldName }}</span>
            {% else %}
                <i class="fa fa-download fa-lg ODRDownloadAllFiles"></i>&nbsp;
                <span>{{ datafield.dataFieldMeta.fieldName }}</span>
            {% endif %}
            </div>

            <div class="ODRFileDatafield_content pure-u-1">
                {% set file_delete_callback = 'function() { ODRReferencePlugin_DeleteFileCallback_' ~ datarecord.id ~ '(); }' %}
                {% include "ODRAdminBundle:Edit:edit_file_datafield.html.twig" with {
                    'datafield': datafield,
                    'datarecord': datarecord,
                    'files': valuefield,

                    'datarecord_is_fake': datarecord_is_fake,
                    'uses_file_renamer_plugin': false,

                    'file_delete_callback': file_delete_callback,
                } %}
            </div>
        </div>

        <div class="pure-u-1 {% if datafield_meta.allow_multiple_uploads == 0 and has_file == true %}ODRHidden{% endif %}">
            {# show upload area only if multiples are allowed or nothing has been uploaded yet #}
            {% set target = 'drf_' ~ datarecord.id ~ '_' ~ datafield.id %}
            {% set single_file = true %}
            {% if datafield_meta.allow_multiple_uploads == 1 %}
                {% set single_file = false %}
            {% endif %}
            {% set callback = 'ODRReferencePlugin_ReloadEditDatafield_' ~ datarecord.id ~ '(' ~ datafield.id ~');' %}

            {% include 'ODRAdminBundle:Flow:flow_upload.html.twig' with {
                'target': target,
                'single_file': single_file,
                'upload_type': 'file',
                'datatype_id': datarecord.dataType.id,
                'datarecord_id': datarecord.id,
                'datafield_id': datafield.id,
                'callback': callback
            } %}
        </div>
        {#</fieldset>#}

    {% elseif field_typename == "Paragraph Text" %}
        <fieldset>
            <label for="{{ input_id }}" class="ODRFieldLabel" title="{{ datafield_meta.description }}">
                {% if is_datatype_admin %}
                <i class="fa fa-history Pointer ODRDatafieldHistory" title="View history of {{ datafield_meta.fieldName }}"></i>&nbsp;
                {% endif %}
                {{ datafield_meta.fieldName }}
            </label>
            {% if chemistry_plugin_fields[ datafield.id ] is defined %}
                {% set subscript_delimiter = chemistry_plugin_fields[ datafield.id ]['subscript_delimiter'] %}
                {% set superscript_delimiter = chemistry_plugin_fields[ datafield.id ]['superscript_delimiter'] %}

                {% include 'ODROpenRepositoryGraphBundle:Base:Chemistry/chemistry_popup.html.twig' with {
                    'field_typename': field_typename,
                    'unique_id': unique_id,
                    'input_id': input_id,

                    'subscript_delimiter': subscript_delimiter,
                    'superscript_delimiter': superscript_delimiter,
                } %}
            {% endif %}
            <div class="ODRFieldWrapper" id="Input_{{ unique_id }}">
                <textarea
                    id="{{ input_id }}"
                    class="pure-u-1"
                    name="{{ input_name }}"
                    {% if datafield_meta.required == 1 %}required="required"{% endif %}
                    data-error-type="inline"
                    {% if datafield_meta.internal_reference_name != '' %}rel="{{ datafield_meta.internal_reference_name }}"{% endif %}
                >{{ valuefield_value }}</textarea>
                <i class="fa fa-save ODRSaveIndicator"></i>
            </div>
        </fieldset>

    {% elseif field_typename == "Integer" or field_typename == "Decimal" or field_typename == "Long Text" or field_typename == "Medium Text" or field_typename == "Short Text" %}
        <fieldset>
            <label for="{{ input_id }}" class="ODRFieldLabel" title="{{ datafield_meta.description }}">
                {% if is_datatype_admin %}
                <i class="fa fa-history Pointer ODRDatafieldHistory" title="View history of {{ datafield_meta.fieldName }}"></i>&nbsp;
                {% endif %}
                {{ datafield_meta.fieldName }}
            </label>
            {% if chemistry_plugin_fields[ datafield.id ] is defined %}
                {% set subscript_delimiter = chemistry_plugin_fields[ datafield.id ]['subscript_delimiter'] %}
                {% set superscript_delimiter = chemistry_plugin_fields[ datafield.id ]['superscript_delimiter'] %}

                {% include 'ODROpenRepositoryGraphBundle:Base:Chemistry/chemistry_popup.html.twig' with {
                    'field_typename': field_typename,
                    'unique_id': unique_id,
                    'input_id': input_id,

                    'subscript_delimiter': subscript_delimiter,
                    'superscript_delimiter': superscript_delimiter,
                } %}
            {% endif %}
            <div class="ODRFieldWrapper" id="Input_{{ unique_id }}">
                <input
                    {% if datafield_meta.internal_reference_name != '' %}rel="{{ datafield_meta.internal_reference_name }}"{% endif %}
                    type="text"
                    id="{{ input_id }}"
                    class="pure-u-1"
                    name="{{ input_name }}"
                    value="{{ valuefield_value }}"
                    data-error-type="inline"
                />
                <i class="fa fa-save ODRSaveIndicator"></i>
            </div>
        </fieldset>

    {% endif %}
    </form>


{% if field_typename == "Paragraph Text"
    or field_typename == "Long Text"
    or field_typename == "Medium Text"
    or field_typename == "Short Text"
%}
<script>
    var {{ field_typeclass }}Interval_{{ unique_id }} = null;
    $("#EditForm_{{ unique_id }}").find("{% if field_typename == 'Paragraph Text' %}textarea{% else %}input{% endif %}[name='{{ input_name }}']").unbind('change').unbind('keyup').unbind('paste').on('keyup paste', function() {
        clearTimeout( {{ field_typeclass }}Interval_{{ unique_id }} );
        {{ field_typeclass }}Interval_{{ unique_id }} = setTimeout( "$('#EditForm_{{ unique_id }}').submit()", SaveTimeout );
    });

    $("#EditForm_{{ unique_id }}").validate({
        rules: {
            "{{ input_name }}": {
            {% if field_typename == "Long Text" or field_typename == "Medium Text" or field_typename == "Short Text" %}
                maxlength: {{ max_length }},
            {% endif %}

            {% if datafield_meta.is_unique %}
                required: true,
            {% endif %}

            {% if datafield_meta.is_unique %}
                {# need to query ODR to see whether the contents of this field are unique or not #}
                remote: {
                    url: "{{ path('odr_check_fake_record_field_uniqueness', { 'datafield_id': datafield.id, 'datarecord_id': datarecord.id }) }}",
                    type: "post",
                    data: {
                        {# The form's value is automatically inserted by jQuery validate #}
                        "{{ field_typeclass }}Form[_token]": function () {
                            return $("#EditForm_{{ unique_id }}").find("input[type=hidden]").val();
                        },
                        "{{ field_typeclass }}Form[error_type]": "json",
                    }
                }
            {% endif %}
            }
        },

        {% if datafield_meta.is_unique %}
        onkeyup: false,    // If the datafield fires off a remote event to check uniqueness, then don't trigger validation on every keyup event
        {% endif %}

        submitHandler: function(form) {
            SaveRecordData(
                '#EditForm_{{ unique_id }}',
                {{ field_typeclass }}Interval_{{ unique_id }},
                function() {
                    ODRReferencePlugin_ReloadPreview_{{ datarecord.id }}();

                    {% if chemistry_plugin_fields[ datafield.id ] is defined %}
                    // Refresh the preview div
                    var text = $("#{{ input_id }}").val();
                    $("#EditForm_{{ unique_id }}").find('.ODRFileInfo').html(text);
                    {% endif %}
                }
            );

            {# TODO - this is not the correct way of saving changes to these properties... #}
            {# TODO - the server needs to automatically run these so loss of network won't leave the database out of sync with its metadata #}
            // Need to check if this is a datatype properties value
            var field_reference = jQuery('#Input_{{ unique_id }}').children(':first-child').attr('rel');
            switch(field_reference) {
                case 'database_name':
                    // Update datatype meta with this value for short and long name
                    if(typeof saveDatatypeMeta === "function") {
                        saveDatatypeMeta(
                            field_reference,
                            jQuery('#Input_{{ unique_id }}').children(':first-child').val()
                        )
                    }
                    break;

                case 'database_description':
                    // Update datatype meta with this value for description
                    if(typeof saveDatatypeMeta === "function") {
                        saveDatatypeMeta(
                            field_reference,
                            jQuery('#Input_{{ unique_id }}').children(':first-child').val()
                        )
                    }
                    break;
            }
        }
        // focusInvalid: false
    });
</script>
{% endif %}

{% endspaceless %}
