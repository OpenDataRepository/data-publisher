{% spaceless %}

{% if subscript_delimiter is not defined %}
    {% set subscript_delimiter = '_' %}
{% endif %}
{% if superscript_delimiter is not defined %}
    {% set superscript_delimiter = '^' %}
{% endif %}

<span id="{{ input_id }}_control" class="FRight">
    <span id="{{ input_id }}_chemistry_trigger" class="ODRChemistryPlugin_button" title="Open the Chemistry Plugin parsing tool"><i class="fa fa-subscript"></i></span>
    <span id="{{ input_id }}_chemistry_preview_trigger" class="ODRFileInfoDiv" title="Preview formatted value">
        <i class="fa fa-eye"></i>
        <span class="ODRFileInfo"></span>
    </span>
</span>

<div id="{{ input_id }}_popup" class="ODRChemistryPlugin_popup ODRHidden" title="">    {# NOTE: blank title so the datafield's description doesn't show up throughout the popup #}
    <div class="pure-u-1 ODRChemistryPlugin_div">
        &nbsp;&nbsp;&nbsp;&nbsp;Make a selection from the field below to run the Chemistry Plugin.
        <input id="{{ input_id }}_hidden" class="ODRHidden" type="hidden" />

        {% if field_typename == "Paragraph Text" %}
        <textarea id="{{ input_id }}_original" class="ODRPseudoField ODRChemistryPlugin_textarea pure-u-1" title="The field's current unmodified value." readonly></textarea>
        {% else %}
        <input id="{{ input_id }}_original" class="ODRPseudoField ODRChemistryPlugin_textarea pure-u-1" title="The field's current unmodified value." readonly />
        {% endif %}
    </div>

    <div class="pure-u-1 ODRChemistryPlugin_div">
        <button id="{{ input_id }}_reset" class="pure-button-primary ODRChemistryPlugin_button" title="Will reset any changes!">Reset Everything</button>
        <button id="{{ input_id }}_select_all" class="pure-button-primary ODRChemistryPlugin_button" title="Will reset any changes!">Select Everything</button>

        <label for="{{ input_id }}_remove_whitespace" class="ODRChemistryPlugin_checkbox" title="Will reset any changes!">
            <input type="checkbox" id="{{ input_id }}_remove_whitespace" />&nbsp;Remove Whitespace from Selection
        </label>
    </div>


    <div class="pure-u-1 ODRChemistryPlugin_div">
        <div class="pure-u-21-24">
            &nbsp;&nbsp;&nbsp;&nbsp;The field below can be modified, and clicking the buttons on the right will insert special characters into this field.  Changes must be manually saved with the Save button.

            <div id="{{ input_id }}_subscript_warning" class="ODRHidden">
                <i class="fa fa-exclamation-triangle ODRInputError"></i>&nbsp;There is at least one duplicated subscript character ("{{ subscript_delimiter }}").
            </div>
            <div id="{{ input_id }}_superscript_warning" class="ODRHidden">
                <i class="fa fa-exclamation-triangle ODRInputError"></i>&nbsp;There is at least one duplicated superscript character ("{{ superscript_delimiter }}").
            </div>

        {% if field_typename == "Paragraph Text" %}
            <textarea id="{{ input_id }}_parsed" class="ODRChemistryPlugin_input pure-u-1" title="The field's value with the suggested changes applied.  You can make more changes if needed."></textarea>
        {% else %}
            <input id="{{ input_id }}_parsed" class="ODRChemistryPlugin_input pure-u-1" type="text" title="The field's value with the suggested changes applied.  You can make more changes if needed." />
        {% endif %}
        </div>

        <div id="{{ input_id }}_insert_buttons" class="pure-u-3-24">
            <div class="pure-u-1 ODRChemistryPlugin_insert_label" title="Inserts the character at the cursor">Insert</div>
            <div class="pure-u-1">
                <button class="ODRChemistryPlugin_insert" title="Middle Dot">·</button>
                <button class="ODRChemistryPlugin_insert" title="Box">◻</button>
                <button class="ODRChemistryPlugin_insert" title="Sum">Σ</button>
                <button class="ODRChemistryPlugin_insert" title="Almost Equal To">≈</button>
                <button class="ODRChemistryPlugin_insert" title="Less Than or Equal To">≤</button>
                <button class="ODRChemistryPlugin_insert" title="Greater Than or Equal To">≥</button>
            </div>
        </div>
    </div>

    <div class="pure-u-1 ODRChemistryPlugin_div">
        <div class="pure-u-1">
            &nbsp;&nbsp;&nbsp;&nbsp;The field below shows what the value will look like outside of Edit mode.
        </div>
        <label for="{{ input_id }}_prettify_toggle" class="pure-u-1 ODRChemistryPlugin_checkbox">
            <input type="checkbox" id="{{ input_id }}_prettify_toggle" />&nbsp;Display as raw HTML
        </label>
        <div id="{{ input_id }}_prettified" class="ODRPseudoField ODRChemistryPlugin_textarea pure-u-23-24" title="A preview of the field's value."></div>
    </div>

    <div class="pure-u-1 ODRChemistryPlugin_div">
        <button id="{{ input_id }}_manual_save" class="ODRChemistryPlugin_button pure-button pure-button-primary pure-u-5-24">
            <i id="{{ input_id }}_warning" class="fa fa-exclamation-triangle ODRInputError ODRHidden"></i>
            <i class="fa fa-save"></i>
            Save
        </button>
        <div class="pure-u-12-24"></div>
        <button id="{{ input_id }}_cancel_save" class="ODRChemistryPlugin_button pure-button pure-button-primary pure-u-5-24" title="Close the dialog without saving changes">
            <i class="fa fa-close ODRInputError"></i>
            Cancel
        </button>
    </div>
</div>

<script>
    $(function() {
        // Ensure no random key pushes make it back to the base input element
        $("#{{ input_id }}").blur();

        // Need the preview span to have something in it before the popup is first opened
        let prettified = ODR_prettifyChemicalFormula($("#{{ input_id }}").val(), {% if field_typename == "Paragraph Text" %}true{% else %}false{% endif %}, '{{ subscript_delimiter }}', '{{ superscript_delimiter }}' );
        $("#{{ input_id }}_chemistry_preview_trigger > span").html( prettified );

        $("#{{ input_id }}_remove_whitespace").prop('checked', true);

        $("#{{ input_id }}_chemistry_trigger").unbind('click').click(function(event) {
            // Don't submit the datafield's form
            event.preventDefault();

            if ( !$("#{{ input_id }}_popup").hasClass('ODRHidden') ) {
                // Popup already visible, close it
                $("#{{ input_id }}_cancel_save").trigger('click');
            }
            else {
                // Popup not visible...close any other open popup first
                $(".ODRChemistryPlugin_popup").each(function(index, elem) {
                    if ( !$(elem).hasClass('ODRHidden') )
                        $(elem).find(".fa-close").parent().trigger('click');
                });

                // Set up initial values each time the popup is opened
                let current_value = $("#{{ input_id }}").val();
                $("#{{ input_id }}_hidden").text(current_value);
                $("#{{ input_id }}_parsed").val(current_value);

                {% if field_typename == "Paragraph Text" %}
                $("#{{ input_id }}_original").text(current_value);
                {% else %}
                $("#{{ input_id }}_original").val(current_value);
                {% endif %}

                let prettified = ODR_prettifyChemicalFormula($("#{{ input_id }}").val(), {% if field_typename == "Paragraph Text" %}true{% else %}false{% endif %}, '{{ subscript_delimiter }}', '{{ superscript_delimiter }}' );
                $("#{{ input_id }}_prettified").html( prettified );

                // The popup should display in the general area of the input...
                var popup_left, popup_top, popup_width;
                var input_left, input_top, input_width;

                var input_offset = $("#{{ input_id }}").offset();
                input_top = input_offset.top;
                input_left = input_offset.left;
                input_width = $("#{{ input_id }}").width();
                // console.log('input_top', input_top, 'input_left', input_left, 'input_width', input_width);

                // Popup should always completely cover the input
                popup_top = input_top;
                // Popup should be at least 550px wide
                if (input_width <= 550)
                    popup_width = 550;
                else
                    popup_width = input_width;
                // console.log('popup_width', popup_width);

                // Center the popup over the input if the former is wider than the latter
                popup_left = input_left;
                if (popup_width > (input_width+10)) {
                    var diff = (popup_width - input_width) / 2;
                    popup_left = input_left - diff;
                    // console.log('attempting centering, popup_left set to ', popup_left);
                }
                // Adjust the popup when it would go off the right side of the screen
                // console.log('window.innerWidth', window.innerWidth);
                if ( (popup_left + popup_width) > window.innerWidth ) {
                    popup_left = window.innerWidth - popup_width - 40;
                    // console.log('off the right side of the screen, popup_left set to ', popup_left);
                }
                // Adjust the popup when it would go off the left side of the screen
                if ( popup_left < 0 ) {
                    popup_left = input_left;
                    // console.log('off the left side of the screen, popup_left set to ', popup_left);
                }

                // The 'parsed' element should be at least as big as the input element
                $("#{{ input_id }}_parsed").height( $("#{{ input_id }}").height() );
                // The 'prettified' element should be slightly less wide than the popup
                $("#{{ input_id }}_prettified").width( popup_width - 15 );
                // Set the popup dimensions and show it
                $("#{{ input_id }}_popup").removeClass('ODRHidden')
                    .width(popup_width)    // needs to be shown prior to setting offset apparently
                    .offset({top: popup_top, left: popup_left});

                {#console.log('final offset', $("#{{ input_id }}_popup").offset() );#}
            }
        });

        $("#{{ input_id }}_original").unbind('select').select(function(event) {
            // Don't submit the datafield's form
            event.preventDefault();

            // Keep any selection in the original field visible
            $("#{{ input_id }}_original").focus();


            // Copy the current selection to the hidden element
            let textarea = $("#{{ input_id }}_original");
            let hidden_element = $("#{{ input_id }}_hidden");

            let start_position = $(textarea).prop('selectionStart');
            let end_position = $(textarea).prop('selectionEnd');
            // console.log('start', start_position);  console.log('end', end_position);

            // Extract the pieces before and after the selection...
            let before = $(textarea).val().substring(0, start_position);
            let after = $(textarea).val().substring(end_position);
            // console.log('before', before);  console.log('after', after);

            // ...but only run the chemistry plugin js on the selection itself
            let str = $(textarea).val().substring(start_position, end_position);
            // console.log('str', str);
            $(hidden_element).val(str);

            ODR_runChemistryDialog( hidden_element, $("#{{ input_id }}_remove_whitespace"), $("#{{ input_id }}_parsed"), '{{ subscript_delimiter }}', '{{ superscript_delimiter }}' );

            // Once the chemsitry plugin js finishes...
            let parsed_value = $("#{{ input_id }}_parsed").val();
            // ...splice the modified back between the before/after pieces
            $("#{{ input_id }}_parsed").val(before + parsed_value + after).trigger('paste');

            $("#{{ input_id }}_chemistry_preview_trigger > span").html( $("#{{ input_id }}_prettified").html() );
        });

        $("#{{ input_id }}_reset").unbind('click').click(function(event) {
            // Don't submit the datafield's form
            event.preventDefault();

            // Deselect everything in the original field...
            $("#{{ input_id }}_original").blur();

            // ...and reset the other two fields back to the original value
            let current_value = $("#{{ input_id }}").val();
            $("#{{ input_id }}_parsed").val(current_value);
            let prettified = ODR_prettifyChemicalFormula($("#{{ input_id }}").val(), {% if field_typename == "Paragraph Text" %}true{% else %}false{% endif %}, '{{ subscript_delimiter }}', '{{ superscript_delimiter }}' );
            $("#{{ input_id }}_prettified").html( prettified );
        });
        $("#{{ input_id }}_select_all").unbind('click').click(function(event) {
            // Don't submit the datafield's form
            event.preventDefault();

            // Select everything in the original field...
            let textarea = $("#{{ input_id }}_original");
            {% if field_typename == "Paragraph Text" %}
            let len = $(textarea).text().length;
            {% else %}
            let len = $(textarea).val().length;
            {% endif %}

            $(textarea)[0].setSelectionRange(0, len);

            // ...then trigger the Chemistry Plugin again
            $("#{{ input_id }}_original").trigger('select');
        });
        $("#{{ input_id }}_remove_whitespace").unbind('change').change(function(event) {
            // Don't submit the datafield's form
            event.preventDefault();

            // Keep any selection in the original field visible
            $("#{{ input_id }}_original").focus();
            // Re-run the Chemistry Plugin on the selected text
            $("#{{ input_id }}_original").trigger('select');
        });

        $("#{{ input_id }}_insert_buttons").find(".ODRChemistryPlugin_insert").each(function(index,elem) {
            $(elem).unbind('click').click(function(event) {
                // Don't submit the datafield's form
                event.preventDefault();

                // If any of these buttons are clicked, then assume the user is manually editing
                //  the value...therefore, the selection in the original doesn't matter
                $("#{{ input_id }}_original").blur();

                let char = $(this).text();
                // Don't insert the unicode abbreviation of this sequence
                if ( char === '◻' )
                    char = '[box]';

                let textarea = $("#{{ input_id }}_parsed");
                let position = $(textarea).prop('selectionStart');
                // console.log('position', position);

                let before = $(textarea).val().substring(0, position);
                let after = $(textarea).val().substring(position);
                // console.log('before', before, 'after', after);

                $(textarea).val(before + char + after);
                $(textarea).focus().prop('selectionStart', position+char.length).prop('selectionEnd', position+char.length);
                $(textarea).trigger('paste');
            });
        });

        $("#{{ input_id }}_prettify_toggle").unbind('change').change(function(event) {
            // Don't submit the datafield's form
            event.preventDefault();

            // Keep any selection in the original field visible
            $("#{{ input_id }}_original").focus();
            // Redo the "prettified" formula to match the current state of the checkbox
            $("#{{ input_id }}_parsed").trigger('keyup');
        });

        $("#{{ input_id }}_manual_save").unbind('click').click(function(event) {
            // Don't submit the datafield's form
            event.preventDefault();
            $("#{{ input_id }}_popup").addClass('ODRHidden');

            // Copy the parsed value back into the datafield's form and trigger a save
            $("#{{ input_id }}")
                .val( $("#{{ input_id }}_parsed").val() )
                .trigger('keyup');
        });
        $("#{{ input_id }}_cancel_save").unbind('click').click(function(event) {
            // Don't submit the datafield's form
            event.preventDefault();
            $("#{{ input_id }}_popup").addClass('ODRHidden');
            // Delete this element's style attribute so it is guaranteed to resize
            $("#{{ input_id }}_prettified").removeAttr('style');

            // Revert the preview so it's based off what's currently in the field
            let prettified = ODR_prettifyChemicalFormula( $("#{{ input_id }}").val(), {% if field_typename == "Paragraph Text" %}true{% else %}false{% endif %}, '{{ subscript_delimiter }}', '{{ superscript_delimiter }}' );
            $("#{{ input_id }}_chemistry_preview_trigger > span").html( prettified );
        });

        $("#{{ input_id }}_parsed").unbind('click').click(function() {
            // If this element is clicked, then assume the user is manually editing the value
            //  ...therefore, the selection in the original doesn't matter
            $("#{{ input_id }}_original").blur();
        });
        $("#{{ input_id }}_parsed").unbind('change').unbind('keyup').unbind('paste').on('keyup paste', function() {
            // Warn about duplicate delimiters
            ODR_hasDuplicatedDelimiters('{{ input_id }}', '{{ subscript_delimiter }}', '{{ superscript_delimiter }}');

            // Display the "prettified" version of the formula
            let prettified = ODR_prettifyChemicalFormula($("#{{ input_id }}_parsed").val(), {% if field_typename == "Paragraph Text" %}true{% else %}false{% endif %}, '{{ subscript_delimiter }}', '{{ superscript_delimiter }}' );
            if ( $("#{{ input_id }}_prettify_toggle").is(':checked') )
                $("#{{ input_id }}_prettified").text(prettified);
            else
                $("#{{ input_id }}_prettified").html(prettified);

            $("#{{ input_id }}_chemistry_preview_trigger > span").html( $("#{{ input_id }}_prettified").html() );
        });
    });
</script>
{% endspaceless %}
