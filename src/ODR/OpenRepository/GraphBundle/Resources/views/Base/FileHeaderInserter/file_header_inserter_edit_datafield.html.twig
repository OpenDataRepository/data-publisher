{% spaceless %}

{% set datarecord_is_fake = false %}

{% set datafield_meta = datafield.dataFieldMeta %}
{% set field_typename = datafield_meta.fieldType.typeName %}
{% set field_typeclass = datafield_meta.fieldType.typeClass %}

{% set datarecordfield = '' %}
{% set valuefield = '' %}
{% set valuefield_value = '' %}
{% if datarecord.dataRecordFields[ datafield.id ] is defined %}
    {% set datarecordfield = datarecord.dataRecordFields[ datafield.id ] %}

    {% if field_typename == "File" %}
        {% set valuefield = datarecordfield.file %}
    {% endif %}
{% endif %}

{% if valuefield == '' and (field_typename == 'File' or field_typename == 'Image' or field_typeclass == 'Radio') %}
    {% set valuefield = [] %}
{% endif %}

{% if field_typename == "File" %}
    {% set has_file = false %}
    {% if valuefield|length > 0 %}
        {% set has_file = true %}
    {% endif %}

    <div class="ODRFileDatafield">
        <div class="ODRFileDatafield_header pure-u-1">
        {% if not datarecord_is_fake %}
            {% if uses_file_renamer_plugin %}
                <i class="Pointer fa fa-edit fa-lg ODRFileRenamer_rebuild" title="Rebuild the filenames in this Datafield"></i>&nbsp;
            {% endif %}
            <i class="Pointer fa fa-indent fa-lg ODRFileHeaderInserter_rebuild" title="Rebuild the headers of all Files in this Datafield"></i>&nbsp;
            <i class="Pointer fa fa-download fa-lg ODRDownloadAllFiles" title="Download all Files in this Datafield"></i>&nbsp;
            <span title="{{ datafield.dataFieldMeta.description }}">{{ datafield.dataFieldMeta.fieldName }}</span>
        {% else %}
            <i class="fa fa-refresh fa-lg ODRFileHeaderInserter_rebuild"></i>&nbsp;
            <i class="fa fa-download fa-lg ODRDownloadAllFiles"></i>&nbsp;
            <span>{{ datafield.dataFieldMeta.fieldName }}</span>
        {% endif %}
        </div>

        <div class="ODRFileDatafield_content pure-u-1">
            {# Don't want to execute anything special after a file gets deleted #}
            {#{% set file_delete_callback = 'function() {}' %}#}
            {% include "ODRAdminBundle:Edit:edit_file_datafield.html.twig" with {
                'datafield': datafield,
                'datarecord': datarecord,
                'files': valuefield,

                'datarecord_is_fake': datarecord_is_fake,
                'uses_file_renamer_plugin': uses_file_renamer_plugin,
            } %}
        </div>
    </div>

    <div class="pure-u-1 {% if datafield_meta.allow_multiple_uploads == 0 and has_file == true %}ODRHidden{% endif %}">
        {# show upload area only if multiples are allowed or nothing has been uploaded yet #}
        {% set target = 'drf_' ~ datarecord.id ~ '_' ~ datafield.id %}
        {% set single_file = true %}
        {% if datafield_meta.allow_multiple_uploads == 1 %}
            {% set single_file = false %}
        {% endif %}
        {% set callback = 'ReloadFileDatafield(' ~ datarecord.id ~ ',' ~ datafield.id ~ ');' %}

        {% include 'ODRAdminBundle:Flow:flow_upload.html.twig' with {
            'target': target,
            'single_file': single_file,
            'upload_type': 'file',
            'datatype_id': datarecord.dataType.id,
            'datarecord_id': datarecord.id,
            'datafield_id': datafield.id,
            'callback': callback
        } %}
    </div>

{% endif %}

<script>
    $(function() {
        $(".ODRFileHeaderInserter_rebuild").unbind('click').click(function() {
            var id_data = $(this).parents('form').first().attr('id').split('_');
            var dr_id = id_data[1];
            var df_id = id_data[2];

            var url = "{{ path('odr_plugin_file_header_inserter_rebuild', {'dr_id': 0, 'df_id': 0}) }}";
            url = url.substr(0, url.length-3);
            url += dr_id + '/' + df_id;

            $.ajax({
                cache: false,
                type: 'GET',
                url: url,
                dataType: "json",
                success: function (data) {
                    // Reload the datafield so the new filenames show up
                    ReloadEditDatafield(dr_id, df_id);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // Don't need to do anything specific on an error
                },
                complete: function (jqXHR) {
                    // Get the xdebugToken from response headers
                    var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                    // If the Sfjs object exists
                    if (typeof Sfjs !== "undefined") {
                        // Grab the toolbar element
                        var currentElement = $('.sf-toolbar')[0];

                        // Load the data of the given xdebug token into the current toolbar wrapper
                        Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                    }
                }
            });
        });
    });
</script>

{% endspaceless %}
