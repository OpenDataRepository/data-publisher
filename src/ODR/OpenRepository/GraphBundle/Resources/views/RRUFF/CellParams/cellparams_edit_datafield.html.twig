{% spaceless %}

{% set datafield_meta = datafield.dataFieldMeta %}
{% set field_typename = datafield_meta.fieldType.typeName %}
{% set field_typeclass = datafield_meta.fieldType.typeClass %}

{% set datarecordfield = '' %}
{% set valuefield = '' %}
{% set valuefield_value = '' %}
{% if datarecord.dataRecordFields[ datafield.id ] is defined %}
    {% set datarecordfield = datarecord.dataRecordFields[ datafield.id ] %}

    {# This only gets called on "Short Text" fields #}
    {% if field_typename == "Short Text" and datarecordfield.shortVarchar[0] is defined %}
        {% set valuefield = datarecordfield.shortVarchar[0] %}
        {% set valuefield_value = valuefield.value %}
    {% endif %}
{% endif %}

{% set max_length = '' %}
{% if field_typename == "Long Text" %}
    {% set max_length = 255 %}
{% elseif field_typename == "Medium Text" %}
    {% set max_length = 64 %}
{% elseif field_typename == "Short Text" %}
    {% set max_length = 32 %}
{% endif %}

{% set unique_id = datarecord.id ~ '_' ~ datafield.id %}
{% set input_id = field_typeclass ~ 'Form_' ~ unique_id %}
{% set input_name = field_typeclass ~ 'Form[value]' %}

    <form
        autocomplete="off"
        action="{{ path('odr_record_save', { 'datarecord_id': datarecord.id, 'datafield_id': datafield.id }) }}"
        class="pure-u-1"
        id="EditForm_{{ unique_id }}"
        method="POST"
    >

        <input type="hidden" id="{{ field_typeclass }}Form__token" name="{{ field_typeclass }}Form[_token]" value="{{ token_list[ datarecord.id ][ datafield.id ] }}" />

    {# This only gets called on "Short Text" fields #}
{#    {% elseif field_typename == "Integer" or field_typename == "Decimal" or field_typename == "Long Text" or field_typename == "Medium Text" or field_typename == "Short Text" %}#}
        <fieldset>
            <label for="{{ input_id }}" class="ODRFieldLabel" title="{{ datafield_meta.description }}">
                {% if is_datatype_admin %}
                <i class="fa fa-history Pointer ODRDatafieldHistory" title="View history of {{ datafield_meta.fieldName }}"></i>&nbsp;
                {% endif %}
                {{ datafield_meta.fieldName }}

                {% include 'ODROpenRepositoryGraphBundle:RRUFF:CellParams/symmetry_popup.html.twig' with {
                    'unique_id': unique_id,
                    'input_id': input_id,

                    'field_identifiers': field_identifiers,
                    'form_token': form_token,

                    'crystal_systems': crystal_systems,
                    'point_groups': point_groups,
                    'space_groups': space_groups,
                } %}
            </label>
            <div class="ODRFieldWrapper" id="Input_{{ unique_id }}">
                <input
                    {% if datafield_meta.internal_reference_name != '' %}rel="{{ datafield_meta.internal_reference_name }}"{% endif %}
                    type="text"
                    id="{{ input_id }}"
                    class="pure-u-1"
                    name="{{ input_name }}"
                    value="{{ valuefield_value }}"
                    data-error-type="inline"
                    readonly="readonly"
                />
                <i class="fa fa-save ODRSaveIndicator"></i>
            </div>
        </fieldset>

    </form>

    <script>
        var {{ field_typeclass }}Interval_{{ unique_id }} = null;
        $("#EditForm_{{ unique_id }}").find("{% if field_typename == 'Paragraph Text' %}textarea{% else %}input{% endif %}[name='{{ input_name }}']").unbind('change').unbind('keyup').unbind('paste').on('keyup paste', function() {
            clearTimeout( {{ field_typeclass }}Interval_{{ unique_id }} );
            {{ field_typeclass }}Interval_{{ unique_id }} = setTimeout( "$('#EditForm_{{ unique_id }}').submit()", SaveTimeout );
        });

        $("#EditForm_{{ unique_id }}").validate({
            rules: {
                "{{ input_name }}": {
                    maxlength: {{ max_length }},
                }
            },

            submitHandler: function(form) {
                SaveRecordData(
                    '#EditForm_{{ unique_id }}',
                    {{ field_typeclass }}Interval_{{ unique_id }}
                );

                {# TODO - this is not the correct way of saving changes to these properties... #}
                {# TODO - the server needs to automatically run these so loss of network won't leave the database out of sync with its metadata #}
                // Need to check if this is a datatype properties value
                var field_reference = jQuery('#Input_{{ unique_id }}').children(':first-child').attr('rel');
                switch(field_reference) {
                    case 'database_name':
                        // Update datatype meta with this value for short and long name
                        if(typeof saveDatatypeMeta === "function") {
                            saveDatatypeMeta(
                                field_reference,
                                jQuery('#Input_{{ unique_id }}').children(':first-child').val()
                            )
                        }
                        break;

                    case 'database_description':
                        // Update datatype meta with this value for description
                        if(typeof saveDatatypeMeta === "function") {
                            saveDatatypeMeta(
                                field_reference,
                                jQuery('#Input_{{ unique_id }}').children(':first-child').val()
                            )
                        }
                        break;

                }
            }
            // focusInvalid: false
        });
    </script>

{% endspaceless %}
