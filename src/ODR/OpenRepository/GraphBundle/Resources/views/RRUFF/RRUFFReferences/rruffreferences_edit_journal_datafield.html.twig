{% spaceless %}

{% set DATAFIELD_PLUGIN = constant('ODR\\AdminBundle\\Entity\\RenderPlugin::DATAFIELD_PLUGIN') %}
{% set datarecord_is_fake = false %}

{% set datafield_meta = datafield.dataFieldMeta %}
{% set field_typename = datafield_meta.fieldType.typeName %}
{% set field_typeclass = datafield_meta.fieldType.typeClass %}

{% set datarecordfield = '' %}
{% set valuefield = '' %}
{% set valuefield_value = '' %}
{% if datarecord.dataRecordFields[ datafield.id ] is defined %}
    {% set datarecordfield = datarecord.dataRecordFields[ datafield.id ] %}

    {% if field_typename == "Paragraph Text" and datarecordfield.longText[0] is defined %}
        {% set valuefield = datarecordfield.longText[0] %}
        {% set valuefield_value = valuefield.value %}
    {% endif %}
{% endif %}

{% set unique_id = datarecord.id ~ '_' ~ datafield.id %}
{% set input_id = field_typeclass ~ 'Form_' ~ unique_id %}
{% set input_name = field_typeclass ~ 'Form[value]' %}

    <form
        autocomplete="off"
        action="{{ path('odr_record_save', { 'datarecord_id': datarecord.id, 'datafield_id': datafield.id }) }}"
        class="pure-u-1"
        id="EditForm_{{ unique_id }}"
        method="POST"
    >

        <input type="hidden" id="{{ field_typeclass }}Form__token" name="{{ field_typeclass }}Form[_token]" value="{{ token_list[ datarecord.id ][ datafield.id ] }}" />

        {# This will only be called with a Paragraph Text field for right now #}
        <fieldset>
            <label for="{{ input_id }}" class="ODRFieldLabel" title="{{ datafield_meta.description }}">
                {% if is_datatype_admin %}
                <i class="fa fa-history Pointer ODRDatafieldHistory" title="View history of {{ datafield_meta.fieldName }}"></i>&nbsp;
                {% endif %}
                {{ datafield_meta.fieldName }}
            </label>
            <div class="pure-u-1">
                <select id="{{ input_id }}_select" class="pure-u-1">
                {% for journal_name,num in journal_list %}
                    <option class="ODRRRUFFReferencePlugin_option" {% if journal_name == valuefield_value %}selected{% endif %}>{{ journal_name }}</option>
                {% endfor %}
                </select>
            </div>
            <div class="ODRFieldWrapper" id="Input_{{ unique_id }}">
                <textarea
                    id="{{ input_id }}"
                    class="pure-u-1"
                    name="{{ input_name }}"
                    {% if datafield_meta.required == 1 %}required="required"{% endif %}
                    data-error-type="inline"
                    {% if datafield_meta.internal_reference_name != '' %}rel="{{ datafield_meta.internal_reference_name }}"{% endif %}
                >{{ valuefield_value }}</textarea>
                <i class="fa fa-save ODRSaveIndicator"></i>
            </div>
        </fieldset>
    </form>

    <script>
        $("#{{ input_id }}_select").unbind('change').change(function() {
            var selected_option_text = $(this).find(':selected').text();
            if ( selected_option_text.length > 0 )
                $("#{{ input_id }}").val(selected_option_text).trigger('paste');
        });

        var {{ field_typeclass }}Interval_{{ unique_id }} = null;
        $("#EditForm_{{ unique_id }}").find("{% if field_typename == 'Paragraph Text' %}textarea{% else %}input{% endif %}[name='{{ input_name }}']").unbind('change').unbind('keyup').unbind('paste').on('keyup paste', function() {
            var entered_journal_text = $(this).val();

            $("#{{ input_id }}_select").children('option').each(function(index,elem) {
                if ( entered_journal_text === $(elem).text() ) {
                    $(elem).prop('selected', true);
                    return false;
                }
            });

            clearTimeout( {{ field_typeclass }}Interval_{{ unique_id }} );
            {{ field_typeclass }}Interval_{{ unique_id }} = setTimeout( "$('#EditForm_{{ unique_id }}').submit()", SaveTimeout );
        });

        $("#EditForm_{{ unique_id }}").validate({
            rules: {
                "{{ input_name }}": {
                {% if datafield_meta.is_unique %}
                    required: true,
                {% endif %}

                {% if datafield_meta.is_unique %}
                    {# need to query ODR to see whether the contents of this field are unique or not #}
                    remote: {
                        url: "{{ path('odr_check_fake_record_field_uniqueness', { 'datafield_id': datafield.id, 'datarecord_id': datarecord.id }) }}",
                        type: "post",
                        data: {
                            {# The form's value is automatically inserted by jQuery validate #}
                            "{{ field_typeclass }}Form[_token]": function () {
                                return $("#EditForm_{{ unique_id }}").find("input[type=hidden]").val();
                            },
                            "{{ field_typeclass }}Form[error_type]": "json",
                        }
                    }
                {% endif %}
                }
            },

            {% if datafield_meta.is_unique %}
            onkeyup: false,    // If the datafield fires off a remote event to check uniqueness, then don't trigger validation on every keyup event
            {% endif %}

            submitHandler: function(form) {
                SaveRecordData(
                    '#EditForm_{{ unique_id }}',
                    {{ field_typeclass }}Interval_{{ unique_id }}
                );

                {# TODO - this is not the correct way of saving changes to these properties... #}
                {# TODO - the server needs to automatically run these so loss of network won't leave the database out of sync with its metadata #}
                // Need to check if this is a datatype properties value
                var field_reference = jQuery('#Input_{{ unique_id }}').children(':first-child').attr('rel');
                switch(field_reference) {
                    case 'database_name':
                        // Update datatype meta with this value for short and long name
                        if(typeof saveDatatypeMeta === "function") {
                            saveDatatypeMeta(
                                field_reference,
                                jQuery('#Input_{{ unique_id }}').children(':first-child').val()
                            )
                        }
                        break;

                    case 'database_description':
                        // Update datatype meta with this value for description
                        if(typeof saveDatatypeMeta === "function") {
                            saveDatatypeMeta(
                                field_reference,
                                jQuery('#Input_{{ unique_id }}').children(':first-child').val()
                            )
                        }
                        break;

                }
            }
            // focusInvalid: false
        });
    </script>

{% endspaceless %}
