{% spaceless %}

{% set DATAFIELD_PLUGIN = constant('ODR\\AdminBundle\\Entity\\RenderPlugin::DATAFIELD_PLUGIN') %}

{% set datafield_meta = datafield.dataFieldMeta %}
{% set field_typename = datafield_meta.fieldType.typeName %}
{% set field_typeclass = datafield_meta.fieldType.typeClass %}

{% set datarecordfield = '' %}
{% set valuefield = '' %}
{% set valuefield_value = '' %}
{% if datarecord.dataRecordFields[ datafield.id ] is defined %}
    {% set datarecordfield = datarecord.dataRecordFields[ datafield.id ] %}

    {% if field_typename == "Paragraph Text" and datarecordfield.longText[0] is defined %}
        {% set valuefield = datarecordfield.longText[0] %}
        {% set valuefield_value = valuefield.value %}
    {% endif %}
{% endif %}

{% set unique_id = datarecord.id ~ '_' ~ datafield.id %}
{% set input_id = field_typeclass ~ 'Form_' ~ unique_id %}
{% set input_name = field_typeclass ~ 'Form[value]' %}

<form
    autocomplete="off"
    action="{{ path('odr_record_save', { 'datarecord_id': datarecord.id, 'datafield_id': datafield.id }) }}"
    class="pure-u-1"
    id="EditForm_{{ unique_id }}"
    method="POST"
>

    <input type="hidden" id="{{ field_typeclass }}Form__token" name="{{ field_typeclass }}Form[_token]" value="{{ token_list[ datarecord.id ][ datafield.id ] }}" />

    {# Intentionally ignoring the possibility of a datafield render plugin #}
    {% set status_notes_warnings = status_notes_info['warnings'] %}
    {# NOTE - this only works because the chemistry plugin is primarily javascript that does its own thing #}
    {% set subscript_delimiter = '' %}
    {% set superscript_delimiter = '' %}
    {% if status_notes_info['chemistry_plugin_rpi'] is not null %}
        {% set chemistry_plugin_options = status_notes_info['chemistry_plugin_rpi']['renderPluginOptionsMap'] %}
        {% set subscript_delimiter = chemistry_plugin_options['subscript_delimiter'] %}
        {% set superscript_delimiter = chemistry_plugin_options['superscript_delimiter'] %}
    {% endif %}

    {# Extract the related reference data from its array #}
    {% set reference_dt = related_reference_info['datatype'] %}
    {% set reference_mapping = related_reference_info['reference_mapping'] %}
    {% set invalid_references = related_reference_info['invalid_references'] %}
    {% set can_view_references = related_reference_info['can_view_references'] %}
    {% set prerendered_references = related_reference_info['prerendered_references'] %}

    <fieldset>
        <label for="{{ input_id }}" class="ODRFieldLabel" title="{{ datafield_meta.description }}">
            {% if is_datatype_admin %}
            <i class="fa fa-history Pointer ODRDatafieldHistory" title="View history of {{ datafield_meta.fieldName }}"></i>&nbsp;
            {% endif %}
            {{ datafield_meta.fieldName }}

            {% if status_notes_info['chemistry_plugin_rpi'] is not null %}
                {% include 'ODROpenRepositoryGraphBundle:Base:Chemistry/chemistry_popup.html.twig' with {
                    'field_typename': field_typename,
                    'unique_id': unique_id,
                    'input_id': input_id,

                    'subscript_delimiter': subscript_delimiter,
                    'superscript_delimiter': superscript_delimiter,
                } %}
            {% endif %}
        </label>

        <div class="ODRFieldWrapper" id="Input_{{ unique_id }}">
            <textarea
                id="{{ input_id }}"
                class="pure-u-1"
                name="{{ input_name }}"
                {% if datafield_meta.required == 1 %}required="required"{% endif %}
                data-error-type="inline"
                {% if datafield_meta.internal_reference_name != '' %}rel="{{ datafield_meta.internal_reference_name }}"{% endif %}
            >{{ valuefield_value }}</textarea>

            <i class="fa fa-save ODRSaveIndicator"></i>
        </div>

        {% if status_notes_warnings|length > 0 %}
        <div class="ODRFieldWrapper" id="Input_{{ unique_id }}">
            {% for warning in status_notes_warnings %}
            <label id="{{ input_id }}-error" class="ODRInputError" for="{{ input_id }}" style="color: red">{{ warning }}</label>
            {% endfor %}
        </div>
        {% endif %}
    </fieldset>
</form>

{# this is outside the form so clicking the button doesn't always trigger a submit #}
<div class="ODRIMAPlugin_StatusNotesTools pure-u-1">
    <button id="ODRIMAPlugin_{{ unique_id }}_button" class="ODRIMAPlugin_StatusNotesButton pure-button">Insert at Cursor</button>

    <select id="ODRIMAPlugin_{{ unique_id }}_select" class="ODRIMAPlugin_StatusNotesSelect">
        <option value="" selected>Select a reference</option>

        {% for ref_id,dr_id in reference_mapping %}
            {# The actual contents of the option depend on the status of the reference #}
            {% if prerendered_references[ref_id] is defined %}
                {# The RRUFF Reference is linked to this IMA Record, and user can see it #}
                <option value="{{ ref_id }}">
                    [{{ ref_id }}] {{ prerendered_references[ref_id]|raw }}
                </option>
            {% endif %}
        {% endfor %}
    </select>
</div>

<script>
    $("#ODRIMAPlugin_{{ unique_id }}_button").unbind('click').click(function(event) {
        var selected_ref_id = $("#ODRIMAPlugin_{{ unique_id }}_select").find(':selected').val();
        // console.log(selected_ref_id);
        if ( selected_ref_id !== '' ) {
            var textarea = $("#{{ input_id }}");
            var position = $(textarea).prop('selectionStart');
            // console.log('position', position);

            var before = $(textarea).val().substring(0, position);
            var after = $(textarea).val().substring(position);
            // console.log('before', before, 'after', after);

            $(textarea).val(before + '?:' + selected_ref_id + after);
            $(textarea).trigger('paste');
        }
    });

    var {{ field_typeclass }}Interval_{{ unique_id }} = null;
    $("#EditForm_{{ unique_id }}").find("{% if field_typename == 'Paragraph Text' %}textarea{% else %}input{% endif %}[name='{{ input_name }}']").unbind('change').unbind('keyup').unbind('paste').on('keyup paste', function() {
        clearTimeout( {{ field_typeclass }}Interval_{{ unique_id }} );
        {{ field_typeclass }}Interval_{{ unique_id }} = setTimeout( "$('#EditForm_{{ unique_id }}').submit()", SaveTimeout );
    });

    $("#EditForm_{{ unique_id }}").validate({
        rules: {
            "{{ input_name }}": {
                {% if field_typename == "Integer" %}
                ODRInteger: {},  {# 'ODRInteger' rule defined in app.js...the default 'digits' rule apparently doesn't allow negative numbers #}
                {% elseif field_typename == "Decimal" %}
                ODRDecimal: {},  {# 'ODRDecimal' rule defined in app.js...the default 'number' rule apparently allows leading zeros e.g. '00045' #}
                {% elseif field_typename == "Long Text" or field_typename == "Medium Text" or field_typename == "Short Text" %}
                maxlength: {{ max_length }},
                {% endif %}

                {% if datafield_meta.is_unique %}
                required: true,
                {% endif %}

                {% if datafield_meta.is_unique %}
                {# need to query ODR to see whether the contents of this field are unique or not #}
                remote: {
                    url: "{{ path('odr_check_fake_record_field_uniqueness', { 'datafield_id': datafield.id, 'datarecord_id': datarecord.id }) }}",
                    type: "post",
                    data: {
                        {# The form's value is automatically inserted by jQuery validate #}
                        "{{ field_typeclass }}Form[_token]": function () {
                            return $("#EditForm_{{ unique_id }}").find("input[type=hidden]").val();
                        },
                        "{{ field_typeclass }}Form[error_type]": "json",
                    }
                }
                {% endif %}
            }
        },

        {% if datafield_meta.is_unique %}
        onkeyup: false,    // If the datafield fires off a remote event to check uniqueness, then don't trigger validation on every keyup event
        {% endif %}

        submitHandler: function(form) {
            SaveRecordData(
                '#EditForm_{{ unique_id }}',
                {{ field_typeclass }}Interval_{{ unique_id }}
            );

            {# TODO - this is not the correct way of saving changes to these properties... #}
            {# TODO - the server needs to automatically run these so loss of network won't leave the database out of sync with its metadata #}
            // Need to check if this is a datatype properties value
            var field_reference = jQuery('#Input_{{ unique_id }}').children(':first-child').attr('rel');
            switch(field_reference) {
                case 'database_name':
                    // Update datatype meta with this value for short and long name
                    if(typeof saveDatatypeMeta === "function") {
                        saveDatatypeMeta(
                            field_reference,
                            jQuery('#Input_{{ unique_id }}').children(':first-child').val()
                        )
                    }
                    break;

                case 'database_description':
                    // Update datatype meta with this value for description
                    if(typeof saveDatatypeMeta === "function") {
                        saveDatatypeMeta(
                            field_reference,
                            jQuery('#Input_{{ unique_id }}').children(':first-child').val()
                        )
                    }
                    break;

            }
        }
        // focusInvalid: false
    });
</script>

{% endspaceless %}
