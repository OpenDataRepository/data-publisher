{% spaceless %}

{% set datafield_meta = datafield.dataFieldMeta %}
{% set field_typename = datafield_meta.fieldType.typeName %}
{% set field_typeclass = datafield_meta.fieldType.typeClass %}

{% set datarecordfield = '' %}
{% set valuefield = '' %}
{% set valuefield_value = '' %}
{% if datarecord.dataRecordFields[ datafield.id ] is defined %}
    {% set datarecordfield = datarecord.dataRecordFields[ datafield.id ] %}

    {# These reference fields are only allowed to be integers #}
    {% if field_typename == "Integer" and datarecordfield.integerValue[0] is defined %}
        {% set valuefield = datarecordfield.integerValue[0] %}
        {% set valuefield_value = valuefield.value %}
    {% endif %}
{% endif %}

{% set unique_id = datarecord.id ~ '_' ~ datafield.id %}
{% set input_id = field_typeclass ~ 'Form_' ~ unique_id %}
{% set input_name = field_typeclass ~ 'Form[value]' %}

<form
    autocomplete="off"
    action="{{ path('odr_record_save', { 'datarecord_id': datarecord.id, 'datafield_id': datafield.id }) }}"
    class="pure-u-1"
    id="EditForm_{{ unique_id }}"
    method="POST"
>

    <input type="hidden" id="{{ field_typeclass }}Form__token" name="{{ field_typeclass }}Form[_token]" value="{{ token_list[ datarecord.id ][ datafield.id ] }}" />

    {# Intentionally ignoring the possibility of a datafield render plugin #}

    {# Instead, we want to render the related reference if it exists #}
    {% set rendering_options = {'is_top_level': false, 'context': 'text'} %}

    {# Despite the underlying field being an integer, we don't want to render the integer value #}
    {# We instead want to render each of the linked datarecords as a <option> in a <select> #}
    {% set rendered_related_reference = false %}

    {# Extract the related reference data from its array #}
    {% set reference_dt = related_reference_info['datatype'] %}
    {% set reference_df_id = related_reference_info['id_field'] %}
    {% set reference_theme = related_reference_info['theme'] %}
    {% set reference_a_dr = related_reference_info['datarecord_a'] %}
    {% set reference_b_dr = related_reference_info['datarecord_b'] %}
    {% set can_view_datarecord_a = related_reference_info['can_view_datarecord_a'] %}
    {% set can_view_datarecord_b = related_reference_info['can_view_datarecord_b'] %}

    {# The related reference for this field isn't guaranteed to exist #}
    {% set reference_dr = null %}
    {% if rpf_name == 'Reference A' and reference_a_dr is not null %}
        {% set reference_dr = reference_a_dr %}
    {% elseif rpf_name == 'Reference B' and reference_b_dr is not null %}
        {% set reference_dr = reference_b_dr %}
    {% endif %}

    {# If it does exist, then it's also not guaranteed that the user has permissions to view it #}
    {% set can_view_related_reference = false %}
    {% if rpf_name == 'Reference A' and reference_a_dr is not null and can_view_datarecord_a %}
        {% set can_view_related_reference = true %}
    {% elseif rpf_name == 'Reference B' and reference_b_dr is not null and can_view_datarecord_b %}
        {% set can_view_related_reference = true %}
    {% endif %}

    {# If the user can't view the reference, then the loop below won't be able to locate reference_dr #}

    <fieldset>
        <label for="{{ input_id }}" class="ODRFieldLabel pure-u-1" title="{{ datafield_meta.description }}">{{ datafield_meta.fieldName }}</label>

        {% if reference_dt is null %}
            <div class="pure-u-1">
                <i class="fa fa-exclamation-triangle ODRInputError"></i>&nbsp;The "{{ datatype.dataTypeMeta.shortName }}" database is not linked to a database using the "RRUFF Reference" render plugin.
            </div>
        {% else %}
            {# The render plugin should always be able to be run, so just extract the render plugin instance #}
            {% set render_plugin_instance = null %}
            {% set can_execute_plugin = true %}
            {% for rpi_num,rpi in reference_dt.renderPluginInstances %}
                {% if rpi.renderPlugin.active and rpi.renderPlugin.render %}
                    {# Only want to save the render_plugin_instance if it's render-able #}
                    {% set render_plugin_instance = rpi %}
                {% endif %}
            {% endfor %}

            <select id="{{ input_id }}" class="pure-u-24-24" name="{{ input_name }}">
                {# Want to provide a "blank" option for deselecting purposes #}
                <option value="">&lt;No Reference Selected&gt;</option>

                {# Want to execute the reference plugin on each of this record's linked references #}
                {% set reference_dt_id = reference_dt['id'] %}
                {% set linked_records = [] %}
                {% if datarecord['children'][reference_dt_id] is defined %}
                    {% set linked_records = datarecord['children'][reference_dt_id] %}
                {% endif %}
                {# The Linked Descendant Merger plugin might have moved the references from 'children' to somewhere else...but if it did, then it will have left a copy in 'original_children' #}
                {# ...though for the moment, said plugin doesn't actually work in Edit mode, so this technically does nothing #}
                {% if datarecord['original_children'][reference_dt_id] is defined %}
                    {% set linked_records = datarecord['original_children'][reference_dt_id] %}
                {% endif %}

                {% for dr_id,dr in linked_records %}
                    {# Determine whether the current field is referring to the current datarecord #}
                    {% set selected = false %}
                    {% if reference_dr is not null and reference_a_dr['id'] == dr_id %}
                        {% set selected = true %}
                        {% set related_reference_exists = true %}
                    {% endif %}

                    {# Determine the current datarecord's reference_id value #}
                    {% set dr_ref_id = 0 %}
                    {% if dr['dataRecordFields'][reference_df_id] is defined %}
                        {% set drf = dr['dataRecordFields'][reference_df_id] %}
                        {% if drf['integerValue'] is defined and drf['integerValue'][0] is defined %}
                            {% set dr_ref_id = drf['integerValue'][0]['value'] %}
                        {% endif %}
                    {% endif %}

                    {# Execute the RRUFF References plugin on each datarecord #}
                    {% set content = [dr]|datatype_plugin(reference_dt, render_plugin_instance, reference_theme, rendering_options, datarecord) %}
                    <option value="{{ dr_ref_id }}" {% if selected %}selected{% endif %}>
                        {{ content|raw }}
                    </option>
                {% endfor %}

                {# If the field has a value but nothing got rendered... #}
                {% if valuefield_value != '' and not rendered_related_reference %}
                    {# ...then create an option to make it clear something is different #}
                    {% if reference_dr is null %}
                        <option selected>&lt;&lt; Invalid Reference &gt;&gt;</option>
                    {% elseif not can_view_related_reference %}
                        <option selected>&lt;&lt; You are not permitted to view the related reference &gt;&gt;</option>
                    {% endif %}
                {% endif %}
            </select>

            {# If the field has a value but nothing got rendered... #}
            {% if valuefield_value != '' and not rendered_related_reference %}
                {% if reference_dr is null %}
                    <label id="{{ input_id }}-error" class="ODRInputError" for="{{ input_id }}">This field no longer points to a valid reference.</label>
                {% endif %}
            {% endif %}
        {% endif %}
    </fieldset>
</form>

{% if reference_dt is not null %}
<script>
    $("#{{ input_id }}").unbind('change').change(function() {

        var post_data = $("#EditForm_{{ unique_id }}").serialize();
        var url = $("#EditForm_{{ unique_id }}").attr('action');
        // console.log(post_data, url);  return;

        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: post_data,
            success: function(data, textStatus, xhr) {
                // Don't need to do anything on success
            },
            error: function(jqXHR, textStatus, errorThrown) {
                // Just reload the datafield on most errors, since can't restore the old value
                ReloadEditDatafield({{ datarecord.id }}, {{ datafield.id }});
            },
            complete: function(jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/'+ xdebugToken);
                }
                $(form_id).find('.ODRSaveIndicator').fadeOut('350');
            }
        });
    });
</script>
{% endif %}

{% endspaceless %}
