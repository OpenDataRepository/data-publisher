<style type="text/css">
    .qanalyze-start-button {
        margin-left: 10px;
        border: 3px solid #00f;
    }

    #qanalyze-phase-list {
        list-style-type: none;
    }
</style>

<button
        type="button"
        class="pure-button qanalyze-start-button"
        title="Qanalyze will open in a new window and will process this data with your choice of phase selections."
        style="margin-left: 10px"
    >
    Run Qanzlyze
</button>



<script>
    jQuery(function() {
        jQuery(".qanalyze-start-button").click(function(ele) {
            var file_id = "";
            jQuery(ele.target).parent().parent().parent().find(".ODRFileDownload").each(
                function() {
                    var file = jQuery(this);
                    // Check if there is a CSV file
                    if(file.html().match(/\.csv$/)) {
                        // Check if label is "XRD pattern"
                        var label = file.parent().parent().parent().parent()
                            .find(".ODRFileDatafield_header span");

                        if(label.html().match(/^XRD pattern$/i)) {
                            // This is the CSV File we are looking for
                            file_id = file.attr("rel");
                        }
                    }
                }
            );
            if(file_id !== "") {
                var sample_name = "";
                jQuery("body").find(".ODRFieldLabel").each(
                    function() {
                        var ele = jQuery(this);
                        // Check if there is a CSV file
                        if(ele.html().match(/^Analysis ID$/)) {
                            var inp = $(ele).parent().find("input");
                            sample_name += inp.val()
                        }
                    }
                );

                openQanalyzeModal(file_id, sample_name);
            }
        })
    });

    var phase_sets = new Array();
    phase_sets.push({"set_name": "Mars Soil Default",
        "phases": [
            { "name": "Andesine",  "AMCSD_code": 1052 },
            { "name": "Anhydrite", "AMCSD_code": 5117 },
            { "name": "Augite",    "AMCSD_code": 1 },
            { "name": "Bassanite", "AMCSD_code": 13868 },
            { "name": "Forsterite","AMCSD_code": 2674 },
            { "name": "Hematite",  "AMCSD_code": 143 },
            { "name": "Ilmenite",  "AMCSD_code": 9082 },
            { "name": "Maghemite", "AMCSD_code": 7898 },
            { "name": "Orthopyroxene", "AMCSD_code": 4556 },
            { "name": "Pigeonite", "AMCSD_code": 209 },
            { "name": "Fayalite",  "AMCSD_code": 174 },
            { "name": "Sanidine",  "AMCSD_code": 10740 }
        ]
     });

    phase_sets.push({"set_name": "Generic Phases",
        "phases": [
            { "name": "Andesine",  "AMCSD_code": 1052 },
            { "name": "Anhydrite", "AMCSD_code": 5117 },
            { "name": "Augite",    "AMCSD_code": 1 },
            { "name": "Forsterite","AMCSD_code": 2674 },
            { "name": "Maghemite", "AMCSD_code": 7898 },
            { "name": "Pigeonite", "AMCSD_code": 209 },
        ]
    });

    function selectPhase(set_name) {
        var set_list = "";
        for(var x in phase_sets) {
            if(phase_sets[x].set_name === set_name) {
                for(var y in phase_sets[x].phases) {
                    var phase = phase_sets[x].phases[y];
                    if(y % 2 == 0) {
                        set_list += '<tr>'
                    }
                    set_list += '<td>' + phase.name + '</td><td>' + phase.AMCSD_code + '</td>';
                    if(y % 2 == 0) {
                        set_list += '<td></td>'
                    }
                    if(y % 2 > 0) {
                        set_list += '</tr>';
                    }
                }
                if(!set_list.match(/tr\>$/)) {
                    set_list += '</tr>';
                }
                qanalyze_data.phases = phase_sets[x].phases;
            }
        }

        qanalyze_data.selected_phase_group = set_name;
        jQuery("#qanalyze-phase-list").html(set_list);
        resetRemodalInnerHeight();
    }

    function openQanalyzeModal(file_id, sample_name) {
        // Set the sample name
        qanalyze_data.sample.name = sample_name;

        // Build the selector
        var body = '';
        body += '<div class="pure-u-1 pure-u-md-1 pure-u-lg-1 qanalyze-intro">' +
            '<p>Select the phase set to user for analysis.</p><p>Then click "Run Qanalyze" below to ' +
            ' open the qanalyze app in a new browser window.</p></div>';

        /* body += '<div class="pure-u-1 pure-u-md-1-2 pure-u-lg-1-3 qanalyze-phase-selection">' +
                '' +
            '</div>'; */
        body += '<div class="pure-u-1 pure-u-md-1 pure-u-lg-1 qanalyze-phase-selection">' +
            'Select phase set for analysis: <select name="qanalyze-phase-selector" id="qanalyze-phase-selector">';

        for (var x in phase_sets) {
            body += '<option value="' + phase_sets[x].set_name + '">' + phase_sets[x].set_name + '</option>';
        }

        body += '</select></div>';

        // display selected phases
        body += '<div class="pure-u-1 pure-u-md-1-2 pure-u-lg-1-3"><table class="pure-table pure-table-bordered">' +
                '<thead>' +
                '<tr>' +
                '<th>Phase</th>' +
                '<th>AMCSD Code #</th>' +
                '<th>&nbsp;</th>' +
                '<th>Phase</th>' +
                '<th>AMCSD Code #</th>' +
                '</tr>' +
                '</thead>' +
                '<tbody id="qanalyze-phase-list">' +
                '</tbody>' +
                '</table></div>';

        // Display the modal
        modal_options = {
            no_reset: true,
            title: "Qanalyze options",
            body: body,
            buttons: [
                {
                    id: 'RunQanalyze',
                    title: 'Run Qanalyze',
                    text: 'Run Qanalyze',
                }
            ]

            // loading: true,  // Force loading to display
        };
        openODRRemodal(modal_options);
        selectPhase(phase_sets[0].set_name);


        // Set up the selectors and buttons
        jQuery("#qanalyze-phase-selector").change(function (e) {
            var option = jQuery(e.target).find("option:selected");
            selectPhase(option.val());
        });

        jQuery("#RunQanalyze").click(function (e) {
            buildDataAndSubmit(file_id);
        });
    }

    // Load data from CSV File
    // Present modal with selector for phases
    // Submit data to QAnalyze
    var qanalyze_data = {
        "sample": {
            "name": "",
            "data": []
        },
        "selected_phase_group": "",
        "phases": []
    };

    function buildDataAndSubmit(file_id) {
        // Use path here...
        var base_url = '{{ path('odr_file_download_start', { 'file_id': 0 }) }}';
        base_url = base_url.substr(0,(base_url.length - 1));
        var file_url = base_url + file_id;

        // display loading/preparing
        var modal = $('[data-remodal-id=ODRRemodal]');
        setODRRemodalLoadingText("Starting");
        modal.find(".ODRRemodalBody").hide();
        modal.find(".ODRRemodalButtons").hide();
        modal.find(".ODRRemodalLoading").show();
        resetRemodalInnerHeight();


        $.ajax({
            cache: false,
            type: 'GET',
            url: file_url,
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                // Handle successful responses
                var status_code = jqXHR.status;
                if (status_code == 200) {
                    // Just get the file

                    // File exists and is ready to download
                    setODRRemodalLoadingText("Preparing data");
                    qanalyze_data.sample.data = getFileData(file_id);
                    submitData();
                }
                else if (status_code == 202) {
                    // File needs to be decrypted first
                    setODRRemodalLoadingText("Decrypting 0%");
                    window.setTimeout( "createFileDecryptProgressCheckJson(" + file_id + ", 1);", initial_decrypt_check_timeout );  // download the file after it finishes decrypting
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Handle errors
                pending_file_decryptions[ file_id ] = null;
                file_decrypt_timeouts[ file_id ] = null;
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });

    }

    function submitData() {
        var url = '//chemin.qanalyze.com/odr';
        $.ajax({
            type: 'POST',
            url: url,
            data: JSON.stringify(qanalyze_data),
            success: function(data) {
                // var w = window.open('about:blank', qanalyze_data.sample.name);
                var w = window.open('about:blank', 'qanalyze');
                if(!w || w.closed || typeof w.closed=='undefined')
                {
                    var modal = $('[data-remodal-id=ODRRemodal]');
                    modal.find(".ODRRemodalBody").html("<h4>You appear to have pop-ups blocked for this site.</h4><p>Please enable popups to allow external apps to open.<p>");
                    modal.find(".ODRRemodalLoading").hide();
                    modal.find(".ODRRemodalButtons").show();
                    modal.find(".ODRRemodalBody").show();
                    resetODRRemodalLoadingText();
                }
                else {
                    w.document.write(data);
                    w.document.close();
                    closeODRRemodal();
                }
            },
            contentType: "application/json",
            dataType: 'html'
        });
    }


    function getFileData(file_id){
        var txt = "";
        var file_url = "{{ path('odr_file_download', {'file_id': '0'}) }}";
        file_url = file_url.substr(0, file_url.length-1) + file_id;

        if(file_id != "") {
            $.ajax({
                type: "GET",
                url: file_url,
                cache: false,
                dataType: "text",
                async: false,
                success : function(data) {
                    txt = data;
                }
            });

            var file_data = [];
            if(txt) {
                var lines = txt.split(/\n/);
                for(var i=0;i<lines.length;i = i+3) {
                    var line = lines[i];
                    if(!line.match(/^#/) && (line.match(/^[0-9]/) || line.match(/^\.[0-9]/))) {
                        var data = "";
                        if(line.match(/,/)) {
                            data = line.split(/,/);
                        }
                        else if(line.match(/\t/)) {
                            data = line.split(/\t/);
                        }

                        if(undefined != data[0] && undefined != data[1]) {
                            var xval = 0 + Number(data[0].trim());
                            var yval = 0 + Number(data[1].trim());
                            file_data.push({x: xval, y: yval})
                        }
                    }
                }
            }

            return file_data;
        }
    }


    var file_decrypt_timeouts_json = {};
    function createFileDecryptProgressCheckJson(file_id, download_file_after) {
        // Ensure that at most a single timeout is running for a given file at any given time
        if ( file_decrypt_timeouts_json[ file_id ] == null || file_decrypt_timeouts_json[ file_id ] == undefined ) {
            file_decrypt_timeouts_json[ file_id ] = download_file_after;
            window.setTimeout( "checkFileDecryptProgressJson(" + file_id + ");", decrypt_check_timeout );
        }
    }
    function checkFileDecryptProgressJson(file_id) {
        // Get progress of file encryption from server
        var url = "{{ path('odr_get_file_decrypt_progress', {'file_id': 0}) }}";
        url = url.substr(0, url.length-1);
        url += file_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                var current_value = parseFloat(data.d.current_value);   // already a percentage of max_value
                var max_value = parseFloat(data.d.max_value);
                if (current_value < 100) {
                    setODRRemodalLoadingText("Decrypting " + current_value + "%")
                    // Schedule the next decrypt check
                    window.setTimeout( "checkFileDecryptProgressJson(" + file_id + ");", decrypt_check_timeout );
                }
                else {
                    setODRRemodalLoadingText("Preparing " + current_value + "%")
                    // Save whether the user needed to download this file after decryption or not
                    var download_file_after = file_decrypt_timeouts[ file_id ];
                    // File is fully decrypted, stop querying server for progress
                    file_decrypt_timeouts[ file_id ] = null;
                    qanalyze_data.sample.data = getFileData(file_id);
                    submitData();
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Handle errors
            }
        });
    }
</script>

