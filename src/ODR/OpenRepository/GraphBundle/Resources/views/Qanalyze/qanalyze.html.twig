<style type="text/css">
    .qanalyze-start-button {
        margin-left: 10px;
        border: 3px solid #00f;
    }

    #qanalyze-phase-list {
        list-style-type: none;
    }
</style>

<button
        type="button"
        class="pure-button qanalyze-start-button"
        title="Qanalyze will open in a new window and will process this data with your choice of phase selections."
        style="margin-left: 10px"
    >
    Run Qanalyze
</button>



<script>
    var analysis_file_id = ""
    var phase_set_file_id = "";
    var sample_name = "";

    // Load data from CSV File
    // Present modal with selector for phases
    // Submit data to QAnalyze
    var qanalyze_data = {
        "sample": {
            "name": "",
            "data": []
        },
        "selected_phase_group": "",
        "phases": []
    };

    jQuery(function() {
        jQuery(".qanalyze-start-button")
            .unbind('click')
            .click(function(ele) {
            console.log('click')
            jQuery(ele.target).parent().parent().parent().find(".ODRFileDownload").each(
                function() {
                    var file = jQuery(this);
                    // Check if there is a CSV file
                    if(file.html().match(/\.csv$/)) {
                        // Check if label is "XRD pattern"
                        var label = file.parent().parent().parent().parent()
                            .find(".ODRFileDatafield_header span");

                        if(label.html().match(/^XRD pattern$/i)) {
                            // This is the CSV File we are looking for
                            analysis_file_id = file.attr("rel");
                        }
                        if(label.html().match(/^AMCSD Phase List$/i)) {
                            // This is the CSV File of the phase list
                            phase_set_file_id = file.attr("rel");
                            console.log("Phase List: ", file.attr("rel"));
                        }
                    }
                }
            );
            if(analysis_file_id !== "") {
                jQuery(ele.target).closest(".ODRResults").find(".ODRFieldLabel").each(
                    function() {
                        var ele = jQuery(this);
                        // Check if there is a CSV file
                        if(ele.html().match(/^Analysis ID$/)) {
                            var inp = $(ele).parent().find("input");
                            sample_name += inp.val()
                        }
                    }
                );
                openQanalyzeModal();
            }
        })
    });

    var phase_sets = new Array();

    function selectPhase(set_name) {
        var set_list = "";
        for(var x in phase_sets) {
            if(phase_sets[x].set_name === set_name) {
                for(var y in phase_sets[x].phases) {
                    var phase = phase_sets[x].phases[y];
                    if(y % 2 == 0) {
                        set_list += '<tr>'
                    }
                    set_list += '<td>' + phase.name + '</td><td>' + phase.AMCSD_code + '</td>';
                    if(y % 2 == 0) {
                        set_list += '<td></td>'
                    }
                    if(y % 2 > 0) {
                        set_list += '</tr>';
                    }
                }
                if(!set_list.match(/tr\>$/)) {
                    set_list += '</tr>';
                }
                qanalyze_data.phases = phase_sets[x].phases;
            }
        }

        qanalyze_data.selected_phase_group = set_name;
        jQuery("#qanalyze-phase-list").html(set_list);
        resetRemodalInnerHeight();
    }

    function openQanalyzeModal() {
        // Display the modal
        var modal_options = {
            // no_reset: true,
            title: "Qanalyze options",
            loading: true,  // Force loading to display
            body: "<div>Loading</div>",
            buttons: [
                {
                    id: 'RunQanalyze',
                    title: 'Run Qanalyze',
                    text: 'Run Qanalyze',
                }
            ]
        };
        openODRRemodal(modal_options);

        // Load the phase list and then load the modal body
        console.log('getting phase data')
        getPhaseData(phase_set_file_id)

    }

    function loadModalBody() {
        // Set the sample name
        qanalyze_data.sample.name = sample_name;

        // Build the selector
        var body = '';
        body += '<div class="pure-u-1 pure-u-md-1 pure-u-lg-1 qanalyze-intro">' +
            '<p>The phase set list used for this analysis is listed below.</p><p>Click "Run Qanalyze" below to ' +
            ' open the qanalyze app in a new browser window.</p></div>';

        body += '<div>' + phase_sets[0].set_name + '</div>';

        // display selected phases
        body += '<div class="pure-u-1 pure-u-md-1-2 pure-u-lg-1-3"><table class="pure-table pure-table-bordered">' +
                '<thead>' +
                '<tr>' +
                '<th>Phase</th>' +
                '<th>AMCSD Code #</th>' +
                '<th>&nbsp;</th>' +
                '<th>Phase</th>' +
                '<th>AMCSD Code #</th>' +
                '</tr>' +
                '</thead>' +
                '<tbody id="qanalyze-phase-list">' +
                '</tbody>' +
                '</table></div>';

        // Display the modal
        $(".ODRRemodalBody").html(body);
        $(".ODRRemodalLoading").fadeOut('150', function() {
            $(".ODRRemodalBody").show();
            $(".ODRRemodalButtons").show();
            $("#ODRFileDownloadFormWrapper").show();
            // Resize ODRFileDownloadModal to take up full height
            selectPhase(phase_sets[0].set_name);
            resetRemodalInnerHeight();
        });

        jQuery("#RunQanalyze").click(function (e) {
            buildDataAndSubmit(analysis_file_id);
        });
    }



    function buildDataAndSubmit(file_id) {
        // Use path here...
        var base_url = '{{ path('odr_file_download', { 'file_id': 0 }) }}';
        base_url = base_url.substr(0,(base_url.length - 1));
        var file_url = base_url + file_id;

        // display loading/preparing
        var modal = $('[data-remodal-id=ODRRemodal]');
        setODRRemodalLoadingText("Starting");
        modal.find(".ODRRemodalBody").hide();
        modal.find(".ODRRemodalButtons").hide();
        modal.find(".ODRRemodalLoading").show();
        resetRemodalInnerHeight();


        $.ajax({
            cache: false,
            type: 'GET',
            url: file_url,
            dataType: "text",
            success: function (data, textStatus, jqXHR) {
                // Handle successful responses
                var status_code = jqXHR.status;
                if (status_code === 200) {
                    // Just get the file
                    console.log('got unencrypted file data')
                    console.log(data)
                    console.log(textStatus)
                    setODRRemodalLoadingText("Preparing data");
                    local_getFileData(data)
                }
                else if (status_code === 202) {
                    // File needs to be decrypted first
                    console.log('got encrypted file data')
                    setODRRemodalLoadingText("Decrypting 0%");
                    decryptFile(file_id, local_getFileData)
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Handle errors
                pending_file_decryptions[ file_id ] = null;
                file_decrypt_timeouts[ file_id ] = null;
            },
            complete: function (jqXHR, textStatus) {
                // Get the xdebugToken from response headers
                var xdebugToken = jqXHR.getResponseHeader('X-Debug-Token');

                // If the Sfjs object exists
                if (typeof Sfjs !== "undefined") {
                    // Grab the toolbar element
                    var currentElement = $('.sf-toolbar')[0];

                    // Load the data of the given xdebug token into the current toolbar wrapper
                    Sfjs.load(currentElement.id, '/app_dev.php/_wdt/' + xdebugToken);
                }
            }
        });

    }

    // Post data to new window
    function postData() {
        var form = document.createElement("form");
        form.setAttribute("method", "post");
        form.setAttribute("enctype", "x-www-form-urlencoded");
        form.setAttribute("action", "https://www.qanalyze.com/chemin");

        function submitToPopup(f) {
            form.target = 'qanalyze';
            var w = window.open('about:blank', form.target);
            if(!w || w.closed || typeof w.closed=='undefined')
            {
                var modal = $('[data-remodal-id=ODRRemodal]');
                modal.find(".ODRRemodalBody").html("<h4>You appear to have pop-ups blocked for this site.</h4><p>Please enable popups to allow external apps to open.<p>");
                modal.find(".ODRRemodalLoading").hide();
                modal.find(".ODRRemodalButtons").show();
                modal.find(".ODRRemodalBody").show();
                resetODRRemodalLoadingText();
            }
            else {
                var hiddenField = document.createElement("input");
                hiddenField.setAttribute("type", "hidden");
                hiddenField.setAttribute("name", "data");
                hiddenField.setAttribute("value", JSON.stringify(qanalyze_data));
                form.appendChild(hiddenField);
                form.submit();
                console.log(qanalyze_data)
                console.log('post fired')
                closeODRRemodal();
            }
        }
        document.body.appendChild(form);
        submitToPopup(form);
    }

    function submitData() {
        var url = '//chemin.qanalyze.com/odr';
        $.ajax({
            type: 'POST',
            url: url,
            data: JSON.stringify(qanalyze_data),
            success: function(data) {
                // var w = window.open('about:blank', qanalyze_data.sample.name);
                var w = window.open('about:blank', 'qanalyze');
                if(!w || w.closed || typeof w.closed=='undefined')
                {
                    var modal = $('[data-remodal-id=ODRRemodal]');
                    modal.find(".ODRRemodalBody").html("<h4>You appear to have pop-ups blocked for this site.</h4><p>Please enable popups to allow external apps to open.<p>");
                    modal.find(".ODRRemodalLoading").hide();
                    modal.find(".ODRRemodalButtons").show();
                    modal.find(".ODRRemodalBody").show();
                    resetODRRemodalLoadingText();
                }
                else {
                    w.document.write(data);
                    w.document.close();
                    closeODRRemodal();
                }
            },
            contentType: "application/json",
            dataType: 'html'
        });
    }

    function getPhaseData(file_id) {
        var file_url = "{{ path('odr_file_download', {'file_id': '0'}) }}";
        file_url = file_url.substr(0, file_url.length-1) + file_id;

        if(file_id != "") {
            $.ajax({
                type: "GET",
                url: file_url,
                cache: false,
                dataType: "text",
                success: function (data, textStatus, jqXHR) {
                    var status_code = jqXHR.status;
                    if (status_code === 200) {
                        // Just get the file
                        // File exists and is ready to download
                        console.log('got unencrypted data')
                        setODRRemodalLoadingText("Preparing data");
                        convertPhaseData(data)
                    }
                    else if (status_code === 202) {
                        // File needs to be decrypted first
                        console.log("decrypt needed")
                        setODRRemodalLoadingText("Decrypting 0%");
                        decryptFile(file_id, getPhaseData);
                    }
                }
            });
        }
    }


    function convertPhaseData(data_string) {
        console.log("DATA STRING")
        console.log(data_string)
        console.log("DATA STRING")
        var file_data = [];
        if (data_string) {
            var lines = data_string.split(/\n/);
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i];
                console.log("LINE: ", line)
                if (!line.match(/^#/)) {
                    console.log("VALID LINE: ", line)
                    var data = "";
                    // This is tab separated data
                    if (line.match(/,/)) {
                        data = line.split(/,/);
                    }
                    else if (line.match(/\t/)) {
                        console.log('split:', line)
                        data = line.split(/\t/);
                    }

                    if (undefined !== data[0] && undefined !== data[1]) {
                        var phase_name = data[0];
                        var phase_id = Number(data[1]);
                        console.log("DATA", data)
                        file_data.push({name: phase_name, "AMCSD_code": phase_id})
                    }
                }
            }
        }

        var phase_set = {}
        phase_set.set_name = sample_name + " Analysis Phases"
        phase_set.phases = []
        phase_set.phases = file_data
        phase_sets.push(phase_set)
        console.log(phase_sets)
        loadModalBody()
    }


    function local_getFileData(txt) {
        var file_data = [];
        if (txt) {
            var lines = txt.split(/\n/);
            for (var i = 0; i < lines.length; i++) {
                var line = lines[i];
                if (!line.match(/^#/) && (line.match(/^[0-9]/) || line.match(/^\.[0-9]/))) {
                    var data = "";
                    if (line.match(/,/)) {
                        data = line.split(/,/);
                    }
                    else if (line.match(/\t/)) {
                        data = line.split(/\t/);
                    }

                    if (undefined !== data[0] && undefined !== data[1]) {
                        var xval = 0 + Number(data[0].trim());
                        var yval = 0 + Number(data[1].trim());
                        file_data.push({x: xval, y: yval})
                    }
                }
            }
        }
        qanalyze_data.sample.data = file_data;
        // Run System
        postData()
    }

    var decrypt_interval = [];
    function decryptFile(file_id, cb) {
       if(decrypt_interval[file_id] !== undefined) {
           window.clearInterval(decrypt_interval[file_id])
       }
       console.log('starting decryption')
       window.setInterval(local_checkFileDecryptProgress(file_id, cb), 200)
    }

    function local_checkFileDecryptProgress(file_id, cb) {
        // Get progress of file encryption from server
        var url = "{{ path('odr_get_file_decrypt_progress', {'file_id': 0}) }}";
        url = url.substr(0, url.length-1);
        url += file_id;

        $.ajax({
            cache: false,
            type: 'GET',
            url: url,
            dataType: "json",
            success: function(data, textStatus, jqXHR) {
                var current_value = parseFloat(data.d.current_value);   // already a percentage of max_value
                // var max_value = parseFloat(data.d.max_value);
                if (current_value < 100) {
                    console.log('not decrypted yet')
                    setODRRemodalLoadingText("Decrypting " + current_value + "%")
                }
                else {
                    window.clearInterval(decrypt_interval[file_id])
                    setODRRemodalLoadingText("Preparing " + current_value + "%")
                    console.log('fully decrypted - calling getPhaseData')
                    cb(file_id)
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Handle errors
            }
        });
    }
</script>

