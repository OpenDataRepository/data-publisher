{% spaceless %}

{% set datatype = datatype_array[target_datatype_id] %}

{% if nv_pivot|length %}

    {#{% if datarecordchild.getdatatype.getdisplaytype != -1 %}#}
    {% if display_type != -1 %}
    <div class="ODRAccordionWrapper">
        <h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-state-active" role="tab" aria-expanded="true" aria-selected="true" tabindex="0">
            <span class="ui-icon ui-icon-triangle-1-s"></span>
            {#<a>{{ datarecordchild.getdatatype.shortname }}</a>#}
            <a>{{ datatype.dataTypeMeta.shortName }}</a>
            {#{% if datarecordchild.grandparent != null %}#}
            {% if is_top_level == 0 %}
                <span style="float: right;">
                   <span id="Switch_{{ nv_chart_id }}" class="DynamicSwitch" style="cursor: pointer">Switch to Dynamic Charts</span>
                &nbsp;&nbsp;&nbsp;
                </span> Charts
            {% endif %}
        </h3>
    {% endif %}


    <div class="pure-u-1 DynamicGraphs Hide">
        <div id="{{ nv_chart_id }}_GraphWrapper">
            <dl id="{{ nv_chart_id }}_GraphSelectTitle" class="ODRMultiDropdown Hide">
                <dt>
                    <span id="{{ nv_chart_id }}_GraphSelector" class="ODRSelectHeader">Select</span>
                </dt>

                <dd>
                    <div class="ODRMultiSelect">
                        <ul>
                        {% if nv_pivot|length > 1 %}
                            <li class="ODRCheckAll selected">
                                <input name="checkall" checked="checked" type="checkbox" value="ALL" /> Check All
                            </li>
                        {% endif %}
                        {# set counter = 0 #}
                        {% for drcid, pivot in nv_pivot %}
                            <li class="ODRData{% if loop.last %} selected{% endif %}">
                                <input {% if drcid not in nv_files|keys %}class="NoGraph"{% endif %} {% if drcid in nv_files|keys %}checked="checked"{% endif %} type="checkbox" value="{{ drcid }}" /> {{ pivot }}
                                {% if drcid not in nv_files|keys %}
                                    (No Graph Data)
                                {% else %}
                                    <span style="border: 1px solid #ddd; background-color:{# line_colors[counter] }}{% set counter = counter + 1 #}; float:right; width: 12px;">&nbsp;</span>
                                {% endif %}
                            </li>
                        {% endfor %}
                        </ul>
                    </div><!-- end of .ODRMultiSelect -->
                </dd>
            </dl>
        </div><!-- end of #{{ nv_chart_id }}_GraphWrapper -->
        {% if nv_files|length %}
        <div id='{{ nv_chart_id }}' class="ODRGraph ODRDynamicGraph pure-u-1">
            <div id="plotlybars_{{ nv_chart_id }}" class="plotlybars-wrapper">
                <div class="plotlybars">
                    <div class="plotlybars-bar b1"></div>
                    <div class="plotlybars-bar b2"></div>
                    <div class="plotlybars-bar b3"></div>
                    <div class="plotlybars-bar b4"></div>
                    <div class="plotlybars-bar b5"></div>
                    <div class="plotlybars-bar b6"></div>
                    <div class="plotlybars-bar b7"></div>
                </div>
                <div class="plotlybars-text">Loading graph</div>
            </div>
            <!-- <svg class="pure-u-1"></svg> -->
        </div><!-- end of .ODRGraph -->
        {% endif %}

    </div><!-- end of .DynamicGraphs -->

    <div class="pure-u-1 StaticGraphs">
        <div id="{{ nv_chart_id }}_Static_GraphWrapper">
            <dl id="{{ nv_chart_id }}_Static_GraphSelectTitle" class="ODRMultiDropdown Hide">
                <dt>
                    <span id="{{ nv_chart_id }}_Static_GraphSelector" class="ODRSelectHeader">Select</span>
                </dt>
                <dd>
                    <div class="ODRMultiSelect">
                        <ul>
                        {# set counter = 0 #}
                        {% for drcid, pivot in nv_output_files %}
                            <li class="ODRData{% if loop.last %} selected{% endif %}">
                                <input {% if drcid not in nv_output_files|keys %}class="NoGraph"{% endif %} {% if drcid == "rollup" %}checked="checked"{% endif %} type="checkbox" value="{{ drcid }}" /> {{ nv_pivot[drcid] }}
                                {% if drcid not in nv_output_files|keys %}
                                    (No Graph Data)
                                {% else %}
                                    <span style="display: none; border: 1px solid #ddd; background-color:{# jpgraph_line_colors[counter] }}{% set counter = counter + 1 #}; float:right; width: 12px;">&nbsp;</span>
                                {% endif %}
                            </li>
                        {% endfor %}
                        </ul>
                    </div><!-- end of .ODRMultiSelect -->
                </dd>
            </dl>

            {% if nv_output_files|length %}
                {% for dr_id, nv_file_name in nv_output_files %}
                    <div id="StaticGraph_{{ dr_id }}" class="ODRGraph ODRStaticGraph pure-u-1" {% if dr_id != "rollup" %}style="display: none;"{% endif %}>
                        {# Add call for image by URL Here #}
                        <img class="pure-u-1" src="{{ path('odr_plugin_graph_static', { 'plugin_id': render_plugin.id, 'datarecord_id': target_datarecord_id, 'datatype_id': target_datatype_id } ) }}.svg?nocache=1" />
                    </div><!-- end of .ODRGraph -->
                {% endfor %}
            {% endif %}
        </div><!-- end of #{{ nv_chart_id }}_Static_GraphWrapper -->
    </div><!-- end of .StaticGraphs -->
    </div>
{% endif %}

<style type="text/css">
.nv-axisMaxMin,
.nv-y .tick {
    display: none;
}
</style>

<script type="text/javascript">
/*
    Dropdown with Multiple checkbox select with jQuery - May 27, 2013
    (c) 2013 @ElmahdiMahmoud
    license: http://www.opensource.org/licenses/mit-license.php
*/

var page_plots = []
jQuery(function() {


    window.onresize = function() {
        waitForFinalEvent(function() {
            for(x in page_plots) {
                console.log('resize')
                Plotly.Plots.resize(page_plots[x]);
            }
        }, 500, "plotly_window_resize")
    }

    {#$("#DataType_{{ datarecordchild.getdatatype.id }}_dropdown").change(function() { #}
    $("#DataType_{{ datatype.id }}_dropdown").change(function() {
        alert('test');
    });

    // Dynamic Swtich
    $(".DynamicSwitch").unbind('click');
    $(".DynamicSwitch").bind('click', function(e) {
        $clicked = $(e.target);
        var chart_id = $clicked.prop('id').replace(/Switch_/, '');
        if($("#" + chart_id + "_Static_GraphWrapper").is(":visible")) {
            $clicked.text("Switch to Static Charts");
            $("#" + chart_id + "_Static_GraphWrapper").parent().hide();
            $("#" + chart_id + "_GraphWrapper").parent().show();
            window['SetupGraphs_' + chart_id]();
        }
        else {
            $clicked.text("Switch to Dynamic Charts");
            $("#" + chart_id + "_GraphWrapper").parent().hide();
            $("#" + chart_id + "_Static_GraphWrapper").parent().show();
        }
    });

    // Setup Dynamic Graphs Selectors
    $("#{{ nv_chart_id }}_GraphWrapper .ODRMultiDropdown dt").on('click', function () {
        $("#{{ nv_chart_id }}_GraphWrapper .ODRMultiDropdown dd ul").slideToggle('fast');
    });

    $("#{{ nv_chart_id }}_GraphWrapper .ODRMultiDropdown dd ul li span").on('click', function () {
        $("#{{ nv_chart_id }}_GraphWrapper .ODRMultiDropdown dd ul").hide();
    });


    // Setup Static Graphs Selectors
    $("#{{ nv_chart_id }}_Static_GraphWrapper .ODRMultiDropdown dt").on('click', function () {
        $("#{{ nv_chart_id }}_Static_GraphWrapper .ODRMultiDropdown dd ul").slideToggle('fast');
    });

    $("#{{ nv_chart_id }}_Static_GraphWrapper .ODRMultiDropdown dd ul li span").on('click', function () {
        $("#{{ nv_chart_id }}_Static_GraphWrapper .ODRMultiDropdown dd ul").hide();
    });

    function getSelectedValue(id) {
         return $("#" + id).find("dt span.value").html();
    }

    $(document).unbind('click');
    $(document).bind('click', function (e) {
        var $clicked = $(e.target);
        if (!$clicked.parents().hasClass("ODRMultiDropdown")) {
            $("#{{ nv_chart_id }}_GraphWrapper .ODRMultiDropdown dd ul").hide();
        }
    });

    $('#{{ nv_chart_id }}_GraphWrapper .ODRMultiSelect li.ODRData').on('click', function () {
        var elem = $(this).find('input[type="checkbox"]');
        elem.prop("checked", !elem.prop("checked"));
        ODRMultiSetSelected_{{ unique_id }}(elem);
    });

    $('#{{ nv_chart_id }}_GraphWrapper .ODRMultiSelect li.ODRData input[type="checkbox"]').on('click', function () {
        elem.prop("checked", !this.prop("checked"));
        ODRMultiSetSelected_{{ unique_id }}(this);
    });

    // Static Charts just remove all selections and highlight the current one
    $('#{{ nv_chart_id }}_Static_GraphWrapper .ODRMultiSelect li.ODRData').on('click', function () {
        $(this).parent().find('input[type="checkbox"]').prop('checked', false);
        var elem = $(this).find('input[type="checkbox"]');
        elem.prop("checked", true);
        $("#{{ nv_chart_id }}_Static_GraphWrapper .ODRGraph").hide();
        $("#StaticGraph_" + elem.val()).show();
    });

});

function ODRMultiSetSelected_{{ unique_id }}(elem) {
    var len = $(elem).closest('ul').find('li.ODRData input[type="checkbox"]:checked').length;
    var select_text = len + " selected.";

    $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.FieldArea').hide();
    resizeThemeElements();
    $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.ODRGraphWarning').hide();
    if(len < 1) {
        $('#{{ nv_chart_id }}_GraphWrapper .ODRSelectHeader').html('Select');
        $('#{{ nv_chart_id }}_GraphWrapper .ODRGraphWarning').show();
    }
    else if (len == 1) {
        var val = $(elem).closest('ul').find('li.ODRData input[type="checkbox"]:checked').val();
        $('#FieldArea_' + val).show();
        resizeThemeElements();

        $('#{{ nv_chart_id }}_GraphWrapper .ODRSelectHeader').html(select_text);
    }
    else {
        $('#{{ nv_chart_id }}_GraphWrapper .ODRSelectHeader').html(select_text);
        $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.ODRGraphWarning').show();
    }
    {#odr_nv_{{ nv_chart_id }}.GraphData(odr_nv_{{ nv_chart_id }});#}
}

</script>

<script type="text/javascript">

if(!window.ODRGetGraphData) {

    function ODRGetGraphData(filename, line_color, line_label, graph_type) {
        var txt;

        var file_url = "{{ path('odr_file_download', {'file_id': '0'}) }}";
        file_url = file_url.substr(0, file_url.length-1) + filename;

        if(filename != "") {
            $.ajax({
                type: "GET",
                url: file_url,
                cache: false,
                dataType: "text",
                async: false,
                success : function(data) {
                    txt = data;
                }
            });

            var line_data = [];
            if(txt) {
                var lines = txt.split(/\n/);
                for(var i=0;i<lines.length;i++) {
                    var line = lines[i];
                    if(graph_type == "histogram") {
                        if(!line.match(/^#/) && (line.match(/^[0-9]/) || line.match(/^\.[0-9]/))) {
                            line_data.push({x: Number(line.trim())})
                        }
                    }
                    else if(graph_type == "piechart" || graph_type == "bar") {
                        if(!line.match(/^#/)) {
                            var data = "";
                            if(line.match(/,/)) {
                                data = line.split(/,/);
                            }
                            else if(line.match(/\t/)) {
                                data = line.split(/\t/);
                            }
                            if(undefined != data[0] && undefined != data[1]) {
                                var xval = data[0].trim()
                                var yval = data[1].trim()
                                line_data.push({x: xval, y: yval})
                            }
                        }
                    }
                    else if (graph_type == "lineerror") {
                        if(!line.match(/^#/) && (line.match(/^[0-9]/) || line.match(/^\.[0-9]/))) {
                            var data = "";
                            if(line.match(/,/)) {
                                data = line.split(/,/);
                            }
                            else if(line.match(/\t/)) {
                                data = line.split(/\t/);
                            }

                            if(undefined != data[0] && undefined != data[1] && undefined != data[2]) {
                                var xval = 0 + Number(data[0].trim());
                                var yval = 0 + Number(data[1].trim());
                                var eval = 0 + Number(data[2].trim());
                                var fval = '';
                                if(undefined != data[3]) {
                                    fval = 0 + Number(data[3].trim());
                                }
                                line_data.push({x: xval, y: yval, e: eval, f: fval})
                            }
                        }
                    }
                    else {
                        if(!line.match(/^#/) && (line.match(/^[0-9]/) || line.match(/^\.[0-9]/))) {
                            var data = "";
                            if(line.match(/,/)) {
                                data = line.split(/,/);
                            }
                            else if(line.match(/\t/)) {
                                data = line.split(/\t/);
                            }

                            if(undefined != data[0] && undefined != data[1]) {
                                var xval = 0 + Number(data[0].trim());
                                var yval = 0 + Number(data[1].trim());
                                line_data.push({x: xval, y: yval})
                            }
                        }
                    }
                }
            }

            //Line chart data should be sent as an array of series objects.
            var trace_data = {
                    values: line_data,      //values - represents the array of {x,y} data points
                    key: line_label, //key  - //the name of the series.
                    color: line_color,  //color - optional: choose your own line color.
                    area: false
                };
            return trace_data;
        }
    }
}

if(!window.ODRNVGraph) {
    function ODRNVGraph(graph_type) {
        this.chart = "";
        this.chart_id = "";
        this.data = new Array(); // Graph Data for the available files
        this.ids = new Array(); // DRC_IDs to plot

        this.x_axis_label = "";
        this.y_axis_label = "";
        this.GraphData = function (chart_obj) {
            /* These lines are all chart setup.  Pick and choose which chart features ou want to utilize. */
            if (window.nv) {
                switch (graph_type) {
                    case "line":
                        console.log("line chart generated")
                        return lineChartGenerator(chart_obj);
                        break;
                    case "xy":
                        return lineChartPlotly(chart_obj)
                    case "bar":
                        return barChartPlotly(chart_obj)
                    case "histogram":
                        return histogramChartPlotly(chart_obj)
                        break;
                    case "starea":
                        break;
                    case "sgbar":
                        break;
                    case "cline":
                        break;
                    case "lineerror":
                        console.log('Charting Line Error')
                        return lineerrorChartPlotly(chart_obj)
                    case "piechart":
                        return pieChartPlotly(chart_obj)
                    default:
                        break;
                }
            }
        }
    }
}

var {{ nv_chart_id }}_initialized = false;


function histogramChartPlotly(chart_obj) {

    var data = []

    // var myData = new Array();   //You need data...
    console.log('HISTOGRAM CHART PLOTLY')
    console.log(chart_obj)
    var loaded_data = []
    $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
        if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
            if(loaded_data[$(this).val()] == undefined) {
                console.log('Plotting ' + $(this).val())
                var line = chart_obj.data[$(this).val()]
                var x = []
                for (var i = 0; i < line.values.length; i++) {
                    x.push(line.values[i].x)
                }

                // Build the trace object for Plotly
                var trace = {}
                if(chart_obj.histogram_dir != undefined && chart_obj.histogram_dir == "horizontal") {
                    trace.y = x
                }
                else {
                    trace.x = x
                }
                trace.opacity = '0.6'
                trace.type = 'histogram'
                // Name used for grouping bars
                trace.name = line.key

                data.push(trace)
                console.log(trace)

                // Store that this data is loaded
                loaded_data[$(this).val()] = 1
            }
        }
    });

    var layout = {
        hovermode: 'closest',
        margin: {
            l: 70,
            r: 20,
            b: 70,
            t: 20,
            pad: 4
        },
        bargap: 0.05,
        bargroupgap: 0.2,
    }

    if(chart_obj.histogram_stack != undefined) {
        if(chart_obj.histogram_stack == "stacked") {
            layout.barmode = "stack"
        }
        else if(chart_obj.histogram_stack == "overlay") {
            layout.barmode = "overlay";
        }
    }


    var WIDTH_IN_PERCENT_OF_PARENT = 100,
            HEIGHT_IN_PERCENT_OF_PARENT = 100;

    var gd3 = d3.select("#" + chart_obj.chart_id)
            .append('div')
            .style({
                width: WIDTH_IN_PERCENT_OF_PARENT + '%',
                'margin-left': (100 - WIDTH_IN_PERCENT_OF_PARENT) / 2 + '%',
                height: (HEIGHT_IN_PERCENT_OF_PARENT/2) + 'vh',
                'margin-top': '0vh'
            });

    var gd = gd3.node()

    // Add plot div to active plots
    page_plots.push(gd)

    Plotly.newPlot(gd, data, layout).then(function(){

        $("#plotlybars_" + chart_obj.chart_id).hide()
    })

}

function polarChartPlotly(chart_obj) {

    var data = []

    // var myData = new Array();   //You need data...
    console.log('POLAR CHART PLOTLY')
    console.log(chart_obj)
    var loaded_data = []
    $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
        if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
            if(loaded_data[$(this).val()] == undefined) {
                console.log('Plotting ' + $(this).val())
                var line = chart_obj.data[$(this).val()]
                var x = []
                var y = []
                for (var i = 0; i < line.values.length; i++) {
                    x.push(line.values[i].x)
                    y.push(line.values[i].y)
                }

                // Build the trace object for Plotly
                var trace = {}
                trace.labels = x
                trace.values = y
                trace.type = 'pie'
                data.push(trace)
                console.log(data)

                // Store that this data is loaded
                loaded_data[$(this).val()] = 1
            }
        }
    });


    var layout = {
        // title: 'Title of the Graph',
        hovermode: 'closest',
        // autosize: true,
        margin: {
            l: 30,
            r: 30,
            b: 30,
            t: 30,
            pad: 4
        },
        // paper_bgcolor: '#7f7f7f',
        // plot_bgcolor: '#c7c7c7',
    };

    Plotly.newPlot(chart_obj.chart_id, data, layout).then(function(){
        $("#plotlybars_" + chart_obj.chart_id).hide()
    })

}

function barChartPlotly(chart_obj) {

    var data = []

    // var myData = new Array();   //You need data...
    console.log('BAR CHART PLOTLY')
    console.log(chart_obj)
    var loaded_data = []
    $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
        if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
            if(loaded_data[$(this).val()] == undefined) {
                console.log('Plotting ' + $(this).val())
                var line = chart_obj.data[$(this).val()]
                var x = []
                var y = []
                for (var i = 0; i < line.values.length; i++) {
                    x.push(line.values[i].x)
                    y.push(line.values[i].y)
                }

                // Build the trace object for Plotly
                var trace = {}
                trace.x = x
                trace.y = y
                trace.type = 'bar'
                if (chart_obj.bar_type != undefined && chart_obj.bar_type == "horizontal") {
                    trace.orientation = 'h'
                }
                else {
                    trace.orientation = 'v'
                }
                // Name used for grouping bars
                trace.name = line.key
                data.push(trace)
                console.log(trace)

                // Store that this data is loaded
                loaded_data[$(this).val()] = 1
            }
        }
    });

    var layout = {
        // title: 'Title of the Graph',
        hovermode: 'closest',
        // autosize: true,
        margin: {
            l: 70,
            r: 20,
            b: 70,
            t: 20,
            pad: 4
        },
        // paper_bgcolor: '#7f7f7f',
        // plot_bgcolor: '#c7c7c7',
    };
    if (chart_obj.bar_options != undefined && chart_obj.bar_options == "stacked") {
        layout.barmode = 'stack'
    }

    Plotly.newPlot(chart_obj.chart_id, data, layout).then(function(){
        $("#plotlybars_" + chart_obj.chart_id).hide()
    })

}

function lineerrorChartPlotly(chart_obj) {

    var data = []

    // var myData = new Array();   //You need data...
    console.log('LINEERROR CHART PLOTLY')
    console.log(chart_obj)
    var loaded_data = []
    $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
        if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
            if(loaded_data[$(this).val()] == undefined) {
                console.log('Plotting ' + $(this).val())
                var line = chart_obj.data[$(this).val()]
                var x = []
                var y = []
                var e = []
                var f = []
                for (var i = 0; i < line.values.length; i++) {
                    x.push(line.values[i].x)
                    y.push(line.values[i].y)
                    e.push(line.values[i].e)
                    if(line.values[i].f != undefined && line.values[i].f != '') {
                        f.push(line.values[i].f)
                    }
                }

                // Build the trace object for Plotly
                var trace = {}
                trace.x = x
                trace.y = y
                trace.error_y = {}
                trace.error_y.type = 'data'
                if (f.length == e.length) {
                    console.log('asymmetric')
                    console.log(f.length)
                    console.log(e.length)

                    trace.error_y.symmetric = false
                    trace.error_y.array = e
                    trace.error_y.arrayminus = f
                }
                else {
                    console.log('symmetric')
                    trace.error_y.array = e
                    trace.error_y.symmetric = true
                    trace.error_y.visible = true
                }

                if (chart_obj.line_type != undefined) {
                    trace.mode = chart_obj.line_type
                }
                else {
                    trace.mode = 'lines'
                }
                trace.name = line.key
                data.push(trace)

                // Store that this data is loaded
                loaded_data[$(this).val()] = 1
            }
        }
    });

    var xaxis_settings = {}
    if(chart_obj.x_axis_dir == "desc" && (chart_obj.x_axis_min == "auto" || chart_obj.x_axis_max == "auto")) {
        xaxis_settings.autorange = 'reversed'
    }

    if(chart_obj.x_axis_log == "yes")  {
        xaxis_settings.type = 'log'
    }

    if(chart_obj.x_axis_caption != "") {
        xaxis_settings.title = chart_obj.x_axis_caption
    }

    if (chart_obj.x_axis_tick_interval != "auto") {
        xaxis_settings.dtick = chart_obj.x_axis_tick_interval
        xaxis_settings.tick0 = chart_obj.x_axis_tick_start
    }
    else {
        xaxis_settings.autottick = true
    }

    if(chart_obj.x_axis_labels != "yes") {
        xaxis_settings.showticklabels = false
    }

    if(chart_obj.x_axis_min != "auto" && chart_obj.x_axis_max != "auto" ) {
        xaxis_settings.range = [ chart_obj.x_axis_min, chart_obj.x_axis_max ]
    }

    xaxis_settings.showline = true
    xaxis_settings.showgrid = true
    xaxis_settings.zeroline = false

    var yaxis_settings = {}
    if(chart_obj.y_axis_dir == "desc" && (chart_obj.y_axis_min == "auto" || chart_obj.y_axis_max == "auto")) {
        yaxis_settings.autorange = 'reversed'
    }
    if(chart_obj.y_axis_log == "yes") {
        yaxis_settings.type = 'log'
    }

    if(chart_obj.y_axis_caption != "") {
        yaxis_settings.title = chart_obj.y_axis_caption
    }

    if (chart_obj.y_axis_tick_interval != "auto") {
        yaxis_settings.dtick = chart_obj.y_axis_tick_interval
        yaxis_settings.tick0 = chart_obj.y_axis_tick_start
    }
    else {
        yaxis_settings.autottick = true
    }

    if(chart_obj.x_axis_labels != "yes") {
        yaxis_settings.showticklabels = false
    }

    if(chart_obj.y_axis_min != "auto" && chart_obj.y_axis_max != "auto" ) {
        yaxis_settings.range = [ chart_obj.y_axis_min, chart_obj.y_axis_max ]
    }

    yaxis_settings.showline = true
    yaxis_settings.showgrid = true
    yaxis_settings.zeroline = false


    var layout = {
        // title: 'Title of the Graph',
        hovermode: 'closest',
        // autosize: true,
        margin: {
            l: 70,
            r: 20,
            b: 70,
            t: 20,
            pad: 4
        },
        // paper_bgcolor: '#7f7f7f',
        // plot_bgcolor: '#c7c7c7',
        xaxis: xaxis_settings,
        yaxis: yaxis_settings
    };

    Plotly.newPlot(chart_obj.chart_id, data, layout).then(function(){
        $("#plotlybars_" + chart_obj.chart_id).hide()
    })

}
function pieChartPlotly(chart_obj) {

    var data = []

    // var myData = new Array();   //You need data...
    console.log('PIE CHART PLOTLY')
    console.log(chart_obj)
    var loaded_data = []
    $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
        if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
            if(loaded_data[$(this).val()] == undefined) {
                console.log('Plotting ' + $(this).val())
                var line = chart_obj.data[$(this).val()]
                var x = []
                var y = []
                for (var i = 0; i < line.values.length; i++) {
                    x.push(line.values[i].x)
                    y.push(line.values[i].y)
                }

                // Build the trace object for Plotly
                var trace = {}
                trace.labels = x
                trace.values = y
                trace.type = 'pie'
                data.push(trace)
                console.log(data)

                // Store that this data is loaded
                loaded_data[$(this).val()] = 1
            }
        }
    });


    var layout = {
        // title: 'Title of the Graph',
        hovermode: 'closest',
        // autosize: true,
        margin: {
            l: 30,
            r: 30,
            b: 30,
            t: 30,
            pad: 4
        },
        // paper_bgcolor: '#7f7f7f',
        // plot_bgcolor: '#c7c7c7',
    };

    Plotly.newPlot(chart_obj.chart_id, data, layout).then(function(){
        $("#plotlybars_" + chart_obj.chart_id).hide()
    })

}
function lineChartPlotly(chart_obj) {

    var data = []

    // var myData = new Array();   //You need data...
    console.log('LINE CHART PLOTLY')
    console.log(chart_obj)
    var loaded_data = []
    $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
        if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
            if(loaded_data[$(this).val()] == undefined) {
                console.log('Plotting ' + $(this).val())
                var line = chart_obj.data[$(this).val()]
                var x = []
                var y = []
                for (var i = 0; i < line.values.length; i++) {
                    x.push(line.values[i].x)
                    y.push(line.values[i].y)
                }

                // Build the trace object for Plotly
                var trace = {}
                trace.x = x
                trace.y = y
                if (chart_obj.line_type != undefined) {
                    trace.mode = chart_obj.line_type
                }
                else {
                    trace.mode = 'lines'
                }
                trace.name = line.key
                data.push(trace)

                // Store that this data is loaded
                loaded_data[$(this).val()] = 1
            }
        }
    });

    var xaxis_settings = {}
    if(chart_obj.x_axis_dir == "desc" && (chart_obj.x_axis_min == "auto" || chart_obj.x_axis_max == "auto")) {
        xaxis_settings.autorange = 'reversed'
    }

    if(chart_obj.x_axis_log == "yes")  {
        xaxis_settings.type = 'log'
    }

    if(chart_obj.x_axis_caption != "") {
        xaxis_settings.title = chart_obj.x_axis_caption
    }

    if (chart_obj.x_axis_tick_interval != "auto") {
        xaxis_settings.dtick = chart_obj.x_axis_tick_interval
        xaxis_settings.tick0 = chart_obj.x_axis_tick_start
    }
    else {
        xaxis_settings.autottick = true
    }

    if(chart_obj.x_axis_labels != "yes") {
        xaxis_settings.showticklabels = false
    }

    if(chart_obj.x_axis_min != "auto" && chart_obj.x_axis_max != "auto" ) {
        xaxis_settings.range = [ chart_obj.x_axis_min, chart_obj.x_axis_max ]
    }

    xaxis_settings.showline = true
    xaxis_settings.showgrid = true
    xaxis_settings.zeroline = false

    var yaxis_settings = {}
    if(chart_obj.y_axis_dir == "desc" && (chart_obj.y_axis_min == "auto" || chart_obj.y_axis_max == "auto")) {
        yaxis_settings.autorange = 'reversed'
    }
    if(chart_obj.y_axis_log == "yes") {
        yaxis_settings.type = 'log'
    }

    if(chart_obj.y_axis_caption != "") {
        yaxis_settings.title = chart_obj.y_axis_caption
    }

    if (chart_obj.y_axis_tick_interval != "auto") {
        yaxis_settings.dtick = chart_obj.y_axis_tick_interval
        yaxis_settings.tick0 = chart_obj.y_axis_tick_start
    }
    else {
        yaxis_settings.autottick = true
    }

    if(chart_obj.x_axis_labels != "yes") {
        yaxis_settings.showticklabels = false
    }

    if(chart_obj.y_axis_min != "auto" && chart_obj.y_axis_max != "auto" ) {
        yaxis_settings.range = [ chart_obj.y_axis_min, chart_obj.y_axis_max ]
    }

    yaxis_settings.showline = true
    yaxis_settings.showgrid = true
    yaxis_settings.zeroline = false


    var layout = {
        // title: 'Title of the Graph',
        hovermode: 'closest',
        // autosize: true,
        margin: {
            l: 70,
            r: 20,
            b: 70,
            t: 20,
            pad: 4
        },
        // paper_bgcolor: '#7f7f7f',
        // plot_bgcolor: '#c7c7c7',
        xaxis: xaxis_settings,
        yaxis: yaxis_settings
    };

    Plotly.newPlot(chart_obj.chart_id, data, layout).then(function(){
        $("#plotlybars_" + chart_obj.chart_id).hide()
    })

}

function multiBarChartGenerator(chart_obj) {
    nv.addGraph(function() {
        this.chart = nv.models.multiBarChart()
        // .transitionDuration(350)
        // .reduceXTicks(true)   //If 'false', every single x-axis tick label will be rendered.
        // .rotateLabels(0)      //Angle to rotate x-axis labels.
        // .showControls(true)   //Allow user to switch between 'Grouped' and 'Stacked' mode.
        // .groupSpacing(0.1)    //Distance between each group of bars.
        ;

        this.chart.xAxis
                .axisLabel(chart_obj.x_axis_label)
                .tickFormat(d3.format(',f'));

        this.chart.yAxis
                .tickFormat(d3.format(',.1f'));


        /* Done setting the chart up? Time to render it!*/
        var myData = new Array();   //You need data...
        $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
            if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
                myData.push(chart_obj.data[$(this).val()]);
            }
        });

        $('#' + chart_obj.chart_id + ' svg').html('');

        // Select the <svg> element you want to render the chart in.
        d3.select('#' + chart_obj.chart_id + ' svg')
                .datum(myData)         //Populate the <svg> element with chart data...
                .call(this.chart);          //Finally, render the chart!

        // Update the chart when window resizes.
        nv.utils.windowResize(function() { this.chart.update() });

        return this.chart;
    });
}

function lineChartGenerator(chart_obj) {
    nv.addGraph(function() {
        this.chart = nv.models.lineChart()
//                        .margin({left: 100})  //Adjust chart margins to give the x-axis some breathing room.
                        .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
                        .transitionDuration(350)  //how fast do you want the lines to transition?
//                        .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
//                        .showYAxis(true)        //Show the y-axis
                        .showXAxis(true)        //Show the x-axis


        this.chart.xAxis     //Chart x-axis settings
                .axisLabel(chart_obj.x_axis_label)
                .tickFormat(d3.format(',r'));

        this.chart.yAxis     //Chart y-axis settings
                .tickFormat(d3.format('.02f'));

        /* Done setting the chart up? Time to render it!*/
        var myData = new Array();   //You need data...
        $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
            if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
                if(!myData.includes(chart_obj.data[$(this).val()]) ) {

                    myData.push(chart_obj.data[$(this).val()]);
                }
            }
        });

        $('#' + chart_obj.chart_id + ' svg').html('');

        // Select the <svg> element you want to render the chart in.
        d3.select('#' + chart_obj.chart_id + ' svg')
                .datum(myData)         //Populate the <svg> element with chart data...
                .call(this.chart);          //Finally, render the chart!
        // Update the chart when window resizes.
        nv.utils.windowResize(function() { this.chart.update() });
        return this.chart;
    });
}



var SetupGraphs_{{ nv_chart_id }} = function() {
    if(!{{ nv_chart_id }}_initialized) {
        {{ nv_chart_id }}_initialized = true;

        // If not ODRNVGraph - load class
        odr_nv_{{ nv_chart_id }} = new ODRNVGraph('{{ plugin_options.graph_type }}');

        // Set the chart id
        odr_nv_{{ nv_chart_id }}.chart_id = '{{ nv_chart_id }}';

        console.log('Setup Graphs')
        console.log( '{{ plugin_options.graph_type }}')
        // Get all Data
        var count = 0
        {% for drcid, file in nv_files %}
            var file = '{{ file }}';
            var line_color = '{# line_colors[loop.index0] #}111111'
            if(file != "") {
                {% for mydrcid, pivot in nv_pivot %}
                    {% if mydrcid == drcid %}
                        count++;
                        odr_nv_{{ nv_chart_id }}.data[{{ drcid}}] = ODRGetGraphData(file,  line_color, '{{ pivot }}', '{{ plugin_options.graph_type }}');
                    {% endif %}
                {% endfor %}
            }
        {% endfor %}

        {% for o_name, o_value in plugin_options %}
        odr_nv_{{ nv_chart_id }}['{{ o_name }}'] = '{{ o_value }}';
        {% endfor %}

        // Plot selected graphs
        // Get checked DRC IDs
        odr_nv_{{ nv_chart_id }}.GraphData(odr_nv_{{ nv_chart_id }});


        // Set CheckAll Handler
        $('#{{ nv_chart_id }}_GraphWrapper input[name="checkall"]').unbind('click');
        $('#{{ nv_chart_id }}_GraphWrapper input[name="checkall"]').click(function() {
            var checked = this.checked;
            $(this).closest('ul').find('li.ODRData input[type=checkbox]').each(function() {
                if(!checked) {
                    $(this).attr('checked','checked');
                }
                else {
                    $(this).removeAttr('checked');
                }
            });

            // Update Graph Accordingly
            ODRMultiSetSelected_{{ unique_id }}(this);
        });
        // Set handler to graph on select change

        var height = $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.FieldArea:first').height();
        var width = $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.FieldArea:first').width();
        var html = "<div class='ODRGraphWarning' style='min-height: 30px; width: " + width + "px;'><h2 style='margin-left: auto; margin-right:auto;'>To view files and data, please select a single data set.</h2></div>";
        $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.FieldArea:first').before(html);
        $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.FieldArea').hide();

    }
}

</script>


{% endspaceless %}
