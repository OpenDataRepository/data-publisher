<!doctype xhtml>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->

<!-- Consider adding a manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <meta charset="utf-8">

    <!-- Use the .htaccess and remove these lines to avoid edge case issues.  More info: h5bp.com/b/378 -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

    <title>{% block title %}Welcome!{% endblock %}</title>
    <link rel="icon" type="image/x-icon" href="{{ asset('favicon.ico') }}" />

    <meta name="description" content="ODR Graph Generator">
    <meta name="author" content="Open Data Repostiory (opendatarepository.org)">

    <!-- Mobile viewport optimized: h5bp.com/viewport -->
    <meta name="viewport" content="width=device-width,initial-scale=1">

    <!-- iPhone: Don't render numbers as call links -->
    <meta name="format-detection" content="telephone=no">

    <!-- Pure Layout -->
    <link rel="stylesheet" href="../../css/external/pure-min.css">
    <!--[if gt IE 8]><!--><link rel="stylesheet" href="../../css/external/pure-grids-responsive-min.css"><!--<![endif]-->

    <!-- Icon Styles -->
    <link rel="stylesheet" src="../../css/fonts/font-awesome.css">

    <!-- External Styles -->
    <link rel="stylesheet" src="../../css/external/jquery-ui-1.8.21.custom.css">

    <!-- Symfony Stylesheets -->
    <link src="../../css/pure_odr_custom.css" type="text/css" rel="stylesheet">
    <link src="../../css/custom.css" type="text/css" rel="stylesheet" />
    {% block stylesheets %}{% endblock %}

    <!-- NVD3 StyleSheet -->
    <link rel="stylesheet" href="../../js/mylibs/nvd3/nv.d3.css">

    <script src="../../js/libs/jquery-1.7.2.js"></script>
    <script src="../../js/libs/jquery-ui-1.8.21.js"></script>

    <!-- Do the same with Lo-Dash.js -->
    <script src="../../js/libs/lo-dash.js"></script>

    <!-- Load Webfont loader -->
    <script type="text/javascript">
        $(function() {
            window.WebFontConfig = {
                google: { families: [ 'PT Sans:400,700' ] },
                active: function(){ $(window).trigger('fontsloaded') }
            };
        });
    </script>

    <!-- scripts concatenated and minified via build script -->
    <script src="../../js/mylibs/nvd3/d3.v3.min.js"></script>
    <script src="../../js/mylibs/nvd3/nv.d3.js"></script>

    <!-- Images Loaded -->
    <script src="../../js/mylibs/imagesloaded/imagesloaded.pkgd.js"></script>

    <!-- Plot.ly JS Plots Based on D3 -->
    <script type="text/javascript" src="../../js/mylibs/plotly.js-1.17.3/dist/plotly.min.js"></script>

    <!-- App JS -->
    <!-- <script src="../../js/app.js"></script> -->
</head>

{% spaceless %}

{% set datatype = datatype_array[target_datatype_id] %}

{% if nv_pivot|length %}

    {#{% if datarecordchild.getdatatype.getdisplaytype != -1 %}#}
    {% if display_type != -1 %}
        <div class="ODRAccordionWrapper">
        <h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-state-active" role="tab" aria-expanded="true" aria-selected="true" tabindex="0">
            <span class="ui-icon ui-icon-triangle-1-s"></span>
            {#<a>{{ datarecordchild.getdatatype.shortname }}</a>#}
            <a>{{ datatype.dataTypeMeta.shortName }}</a>
            {#{% if datarecordchild.grandparent != null %}#}
            {% if is_top_level == 0 %}
                <span style="float: right;">
                   <span id="Switch_{{ nv_chart_id }}" class="DynamicSwitch" style="cursor: pointer">Switch to Dynamic Charts</span>
                    {#
                                    {% if datarecordchild.ispublic == true %}
                                        <i class="tooltip fa fa-globe fa-lg" title="Child Record is Public" rel="{{ datarecordchild.id }}"></i>
                                    {% else %}
                                        <i class="tooltip fa fa-globe IconRed fa-lg" title="Child Record is not Public" rel="{{ datarecordchild.id }}"></i>
                                    {% endif %}
                    #}
                    &nbsp;&nbsp;&nbsp;
                </span> Charts
            {% endif %}
        </h3>
    {% endif %}


    <div class="pure-u-1 DynamicGraphs">
        <div id="{{ nv_chart_id }}_GraphWrapper">
            <dl id="{{ nv_chart_id }}_GraphSelectTitle" class="ODRMultiDropdown Hide">
                <dt>
                    <span id="{{ nv_chart_id }}_GraphSelector" class="ODRSelectHeader">Select</span>
                </dt>

                <dd>
                    <div class="ODRMultiSelect">
                        <ul>
                            {% if nv_pivot|length > 1 %}
                                <li class="ODRCheckAll selected">
                                    <input name="checkall" checked="checked" type="checkbox" value="ALL" /> Check All
                                </li>
                            {% endif %}
                            {% set counter = 0 %}
                            {% for drcid in current_drcids %}
                                <li class="ODRData{% if loop.last %} selected{% endif %}">
                                    <input {% if drcid not in nv_files|keys %}class="NoGraph"{% endif %} {% if drcid in nv_files|keys %}checked="checked"{% endif %} type="checkbox" value="{{ drcid }}" /> {{ nv_pivot[drcid] }}
                                    {% if drcid not in nv_files|keys %}
                                        (No Graph Data)
                                    {% else %}
                                        <span style="border: 1px solid #ddd; background-color:{{ line_colors[counter] }}{% set counter = counter + 1 %}; float:right; width: 12px;">&nbsp;</span>
                                    {% endif %}
                                </li>
                            {% endfor %}
                        </ul>
                    </div><!-- end of .ODRMultiSelect -->
                </dd>
            </dl>
        </div><!-- end of #{{ nv_chart_id }}_GraphWrapper -->
        {% if nv_files|length %}
            <div id='{{ nv_chart_id }}' class="ODRGraph pure-u-1">
            </div><!-- end of .ODRGraph -->
            <!-- <div id='svg-export' class="ODRGraph pure-u-1"></div> -->
        {% endif %}

    </div><!-- end of .DynamicGraphs -->

    <div class="pure-u-1 StaticGraphs">
        <div id="{{ nv_chart_id }}_Static_GraphWrapper">
            <dl id="{{ nv_chart_id }}_Static_GraphSelectTitle" class="ODRMultiDropdown Hide">
                <dt>
                    <span id="{{ nv_chart_id }}_Static_GraphSelector" class="ODRSelectHeader">Select</span>
                </dt>
                <dd>
                    <div class="ODRMultiSelect">
                        <ul>
                            {% set counter = 0 %}
                            {% for drcid, pivot in nv_output_files %}
                                <li class="ODRData{% if loop.last %} selected{% endif %}">
                                    <input {% if drcid not in nv_output_files|keys %}class="NoGraph"{% endif %} {% if drcid == "rollup" %}checked="checked"{% endif %} type="checkbox" value="{{ drcid }}" /> {{ nv_pivot[drcid] }}
                                    {% if drcid not in nv_output_files|keys %}
                                        (No Graph Data)
                                    {% else %}
                                        <span style="display: none; border: 1px solid #ddd; background-color:{{ jpgraph_line_colors[counter] }}{% set counter = counter + 1 %}; float:right; width: 12px;">&nbsp;</span>
                                    {% endif %}
                                </li>
                            {% endfor %}
                        </ul>
                    </div><!-- end of .ODRMultiSelect -->
                </dd>
            </dl>

            {% if nv_output_files|length %}
                {% for jp_id, jp_file_name in nv_output_files %}
                    <div id="StaticGraph_{{ jp_id }}" class="ODRGraph pure-u-1" {% if jp_id != "rollup" %}style="display: none"{% endif %}>
                        <img class="pure-u-1" src="{{ jp_file_name }}" />
                    </div><!-- end of .ODRGraph -->
                {% endfor %}
            {% endif %}
        </div><!-- end of #{{ nv_chart_id }}_Static_GraphWrapper -->
    </div><!-- end of .StaticGraphs -->
    </div>
{% endif %}

<style type="text/css">
    .nv-axisMaxMin,
    .nv-y .tick {
        display: none;
    }
</style>


<script type="text/javascript">
    /*
     Dropdown with Multiple checkbox select with jQuery - May 27, 2013
     (c) 2013 @ElmahdiMahmoud
     license: http://www.opensource.org/licenses/mit-license.php
     */

    jQuery(function() {

        {#$("#DataType_{{ datarecordchild.getdatatype.id }}_dropdown").change(function() { #}
        $("#DataType_{{ datatype.id }}_dropdown").change(function() {
            alert('test');
        });

        // Dynamic Swtich
        $(".DynamicSwitch").unbind('click');
        $(".DynamicSwitch").bind('click', function(e) {
            $clicked = $(e.target);
            var chart_id = $clicked.prop('id').replace(/Switch_/, '');
            if($("#" + chart_id + "_Static_GraphWrapper").is(":visible")) {
                $clicked.text("Switch to Static Charts");
                $("#" + chart_id + "_Static_GraphWrapper").parent().hide();
                $("#" + chart_id + "_GraphWrapper").parent().show();
                window['SetupGraphs_' + chart_id]();
            }
            else {
                $clicked.text("Switch to Dynamic Charts");
                $("#" + chart_id + "_GraphWrapper").parent().hide();
                $("#" + chart_id + "_Static_GraphWrapper").parent().show();
            }
        });

        // Setup Dynamic Graphs Selectors
        $("#{{ nv_chart_id }}_GraphWrapper .ODRMultiDropdown dt").on('click', function () {
            $("#{{ nv_chart_id }}_GraphWrapper .ODRMultiDropdown dd ul").slideToggle('fast');
        });

        $("#{{ nv_chart_id }}_GraphWrapper .ODRMultiDropdown dd ul li span").on('click', function () {
            $("#{{ nv_chart_id }}_GraphWrapper .ODRMultiDropdown dd ul").hide();
        });


        // Setup Static Graphs Selectors
        $("#{{ nv_chart_id }}_Static_GraphWrapper .ODRMultiDropdown dt").on('click', function () {
            $("#{{ nv_chart_id }}_Static_GraphWrapper .ODRMultiDropdown dd ul").slideToggle('fast');
        });

        $("#{{ nv_chart_id }}_Static_GraphWrapper .ODRMultiDropdown dd ul li span").on('click', function () {
            $("#{{ nv_chart_id }}_Static_GraphWrapper .ODRMultiDropdown dd ul").hide();
        });

        function getSelectedValue(id) {
            return $("#" + id).find("dt span.value").html();
        }

        $(document).unbind('click');
        $(document).bind('click', function (e) {
            var $clicked = $(e.target);
            if (!$clicked.parents().hasClass("ODRMultiDropdown")) {
                $("#{{ nv_chart_id }}_Static_GraphWrapper .ODRMultiDropdown dd ul").hide();
            }
        });

        $('#{{ nv_chart_id }}_GraphWrapper .ODRMultiSelect li.ODRData').on('click', function () {
            var elem = $(this).find('input[type="checkbox"]');
            elem.prop("checked", !elem.prop("checked"));
            ODRMultiSetSelected_{{ unique_id }}(elem);
        });

        $('#{{ nv_chart_id }}_GraphWrapper .ODRMultiSelect li.ODRData input[type="checkbox"]').on('click', function () {
            elem.prop("checked", !this.prop("checked"));
            ODRMultiSetSelected_{{ unique_id }}(this);
        });

        // Static Charts just remove all selections and highlight the current one
        $('#{{ nv_chart_id }}_Static_GraphWrapper .ODRMultiSelect li.ODRData').on('click', function () {
            $(this).parent().find('input[type="checkbox"]').prop('checked', false);
            var elem = $(this).find('input[type="checkbox"]');
            elem.prop("checked", true);
            $("#{{ nv_chart_id }}_Static_GraphWrapper .ODRGraph").hide();
            $("#StaticGraph_" + elem.val()).show();
        });

        $("#{{ nv_chart_id }}_GraphWrapper").parent().show();
        window['SetupGraphs_{{ nv_chart_id }}']();

    });

    function ODRMultiSetSelected_{{ unique_id }}(elem) {
        var len = $(elem).closest('ul').find('li.ODRData input[type="checkbox"]:checked').length;
        var select_text = len + " selected.";

        $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.FieldArea').hide();
        resizeThemeElements();
        $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.ODRGraphWarning').hide();
        if(len < 1) {
            $('#{{ nv_chart_id }}_GraphWrapper .ODRSelectHeader').html('Select');
            $('#{{ nv_chart_id }}_GraphWrapper .ODRGraphWarning').show();
        }
        else if (len == 1) {
            var val = $(elem).closest('ul').find('li.ODRData input[type="checkbox"]:checked').val();
            $('#FieldArea_' + val).show();
            resizeThemeElements();

            $('#{{ nv_chart_id }}_GraphWrapper .ODRSelectHeader').html(select_text);
        }
        else {
            $('#{{ nv_chart_id }}_GraphWrapper .ODRSelectHeader').html(select_text);
            $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.ODRGraphWarning').show();
        }
        odr_nv_{{ nv_chart_id }}.GraphData(odr_nv_{{ nv_chart_id }});
    }

</script>

<script type="text/javascript">

    if(!window.ODRGetGraphData) {

        function ODRGetGraphData(filename, line_color, line_label, file_url) {
            var txt;

            {#var file_url = "{{ path('odr_file_download', {'file_id': '0'}) }}";#}
            {#file_url = file_url.substr(0, file_url.length-1) + filename;#}
            console.log(file_url);
            file_url = '../../' + file_url;
            console.log(file_url);
            console.log(line_color);
            if(filename != "") {
                $.ajax({
                    type: "GET",
                    url: file_url,
                    cache: false,
                    dataType: "text",
                    async: false,
                    success : function(data) {
                        txt = data;
                    }
                });

                var line_data = [];
                if(txt) {
                    var lines = txt.split(/\n/);
                    for(var i=0;i<lines.length;i = i+2) {
                        var line = lines[i];
                        if(!line.match(/^#/) && (line.match(/^[0-9]/) || line.match(/^\.[0-9]/))) {
                            var data = "";
                            if(line.match(/,/)) {
                                data = line.split(/,/);
                            }
                            else if(line.match(/\t/)) {
                                data = line.split(/\t/);
                            }
                            if(undefined != data[0] && undefined != data[1]) {
                                var xval = 0 + Number(data[0].trim());
                                var yval = 0 + Number(data[1].trim());
                                line_data.push({x: xval, y: yval})
                            }
                        }
                    }
                }

                //Line chart data should be sent as an array of series objects.
                var line = {
                    values: line_data,      //values - represents the array of {x,y} data points
                    key: line_label, //key  - the name of the series.
                    color: line_color,  //color - optional: choose your own line color.
                    area: false
                };
                return line;
            }
        }
    }

    if(!window.ODRNVGraph) {
        function ODRNVGraph() {
            this.chart = "";
            this.chart_id = "";
            this.data = new Array(); // Graph Data for the available files
            this.ids = new Array(); // DRC_IDs to plot

            this.x_axis_label = "";
            this.y_axis_label = "";
            this.GraphData = function(chart_obj) {
                /* These lines are all chart setup.  Pick and choose which chart features ou want to utilize. */
                if(window.nv) {
                    switch ('{{ plugin_options.graph_type }}') {
                        case "fline":
                            console.log("generate focus line")
                            return focusLineGenerator(chart_obj);
                            break;
                        case "line":
                            return lineChartGenerator(chart_obj);
                            break;
                        case "hbar":
                            break;
                        case "xy":
                            // return lineChartGenerator(chart_obj);
                            // return multiBarChartGenerator(chart_obj);
                            return lineChartPlotly(chart_obj);
                            break
                        case "vbar":
                            break;
                        case "starea":
                            break;
                        case "sgbar":
                            break;
                        case "cline":
                            break;
                        case "piechart":
                            break;
                        default:
                            break;
                    }
                }
            }
        };
    }

    var {{ nv_chart_id }}_initialized = false;

    function focusLineGenerator(chart_obj) {
        nv.addGraph(function() {
            this.chart = nv.models.lineWithFocusChart();
            //.margin({left: 100, right: 50})  //Adjust chart margins to give the x-axis some breathing room.
            //.useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
            //.transitionDuration(350)  //how fast do you want the lines to transition?
            //.showLegend(true)       //Show the legend, allowing users to turn on/off line series.
            //.showYAxis(true)        //Show the y-axis
            //.showXAxis(true)        //Show the x-axis
            //;

            this.chart.xAxis     //Chart x-axis settings
                    .axisLabel(chart_obj.x_axis_label)
                    .tickFormat(d3.format(',r'));

            this.chart.yAxis     //Chart y-axis settings
            // .axisLabel(chart_obj.y_axis_label)
                    .tickFormat(d3.format('.02f'));

            this.chart.y2Axis     //Chart y-axis settings
            // .axisLabel(chart_obj.y_axis_label)
                    .tickFormat(d3.format('.02f'));
            console.log("repoeasts")
            /* Done setting the chart up? Time to render it!*/
            //TODO Kind of hacky fix for the issue of duplicating header keys, just checks to make sure its not already in the file
            //     Want to fix but need to move on for right now.
            var myData = new Array();   //You need data...
            $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
                if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
//                            console.log($(this).val())
                    console.log(chart_obj)

                        myData.push(chart_obj.data[$(this).val()]);
                        console.log("pushing data")
//                            console.log(chart_obj)
                }
            });
            // Select the <svg> element you want to render the chart in.
            $('#' + chart_obj.chart_id + ' svg').html('');

            // Select the <svg> element you want to render the chart in.
            d3.select('#' + chart_obj.chart_id + ' svg')
                    .datum(myData)         //Populate the <svg> element with chart data...
                    .call(this.chart);          //Finally, render the chart!
            // Update the chart when window resizes.
            nv.utils.windowResize(function() { this.chart.update() });
            return this.chart;

        });
    }

    function lineChartPlotly(chart_obj) {

        var data = []

        // var myData = new Array();   //You need data...
        console.log(chart_obj)
        var loaded_data = []
        $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
            if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
                if(loaded_data[$(this).val()] == undefined) {
                    console.log('Plotting ' + $(this).val())
                    var line = chart_obj.data[$(this).val()]
                    var x = []
                    var y = []
                    for (i = 0; i < line.values.length; i++) {
                        x.push(line.values[i].x)
                        y.push(line.values[i].y)
                    }

                    // Build the trace object for Plotly
                    var trace = {}
                    trace.x = x
                    trace.y = y
                    {% if plugin_options.line_type is defined %}
                    trace.mode = '{{ plugin_options.line_type }}'
                    {% else %}
                    trace.mode = 'lines'
                    {%  endif %}
                    trace.name = line.key
                    data.push(trace)

                    // Store that this data is loaded
                    loaded_data[$(this).val()] = 1
                }
            }
        });

        var layout = {
            // title: 'Title of the Graph',
            {% if plugin_options.graph_width != 0 %}
               autosize: false,
               width: {{ plugin_options.graph_width * 1.5 }},
               height: {{ plugin_options.graph_height * 1.5 }},
            {% else %}
                autosize: true,
            {% endif %}
            margin: {
                l: 70,
                r: 20,
                b: 70,
                t: 20,
                pad: 4
            },
            // paper_bgcolor: '#7f7f7f',
            // plot_bgcolor: '#c7c7c7',
            xaxis: {
            {% if plugin_options.x_axis_dir == "desc" %}
                autorange: 'reversed',
            {% endif %}
            {% if plugin_options.x_axis_log == "yes" %}
                type: 'log',
            {% endif %}
            {% if plugin_options.x_axis_caption != "" %}
                title: '{{ plugin_options.x_axis_caption }}',
            {% endif %}
            {% if plugin_options.x_axis_tick_interval != "auto" %}
                dtick: {{ plugin_options.x_axis_tick_interval }},
                tick0: {{ plugin_options.x_axis_tick_start }},
            {% else %}
                autottick: true,
            {% endif %}
            {% if plugin_options.x_axis_labels != "yes" %}
                showticklabels: false,
            {% endif %}
            {% if plugin_options.x_axis_min != "auto" and plugin_options.x_axis_max != "auto" %}
                range: [{{ plugin_options.x_axis_min }}, {{ plugin_options.x_axis_max }}],
            {% endif %}
                showline: true,
                showgrid: true,
                zeroline: false
            },
            yaxis: {
            {% if plugin_options.y_axis_dir is defined and plugin_options.y_axis_dir == "desc" %}
                autorange: 'reversed',
            {% endif %}
            {% if plugin_options.y_axis_log == "yes" %}
                type: 'log',
            {% endif %}
            {% if plugin_options.y_axis_caption != "" %}
                title: '{{ plugin_options.y_axis_caption }}',
            {% endif %}
            {% if plugin_options.y_axis_tick_interval != "auto" %}
                dtick: {{ plugin_options.y_axis_tick_interval }},
                tick0: {{ plugin_options.y_axis_tick_start }},
            {% else %}
                autottick: true,
            {% endif %}
            {% if plugin_options.y_axis_labels != "yes" %}
                showticklabels: false,
            {% endif %}
            {% if plugin_options.y_axis_min != "auto" and plugin_options.y_axis_max != "auto" %}
                range: [{{ plugin_options.y_axis_min }}, {{ plugin_options.y_axis_max }}],
            {% endif %}
                showline: true,
                showgrid: true,
                zeroline: false
            }
        };

        // d3 = Plotly.d3
        // var img_svg= d3.select('#svg-export');

        Plotly.newPlot(chart_obj.chart_id, data, layout)
        .then(function(){
            console.log('Removing divs')
            // Need to remove non-svg items from Plotly Output
            var svgs = $("#" + chart_obj.chart_id + " svg.main-svg")
            $("#" + chart_obj.chart_id + " div.plot-container").before(svgs)
            // Remove divs (not-SVG Compliant)
            $("#" + chart_obj.chart_id + " div").remove()
            // Add viewBox="0 0 1400 450" preserveAspectRatio="xMinYMin meet"
            var main_svg = $("#" + chart_obj.chart_id)
            $(main_svg).attr('preserveAspectRatio', 'xMinyMin meet')
            $(main_svg).attr('viewBox', '0 0 {{ plugin_options.graph_width * 1.5 }} {{ plugin_options.graph_height * 1.5 }}')
        })
        // static image in svg format
        /* .then(
            function(gd)
            {
                Plotly.toImage(gd,{height:500,width:1400})
                .then(
                    function(url)
                    {
                        img_svg.attr("src", url);
                        return Plotly.toImage(gd,{format:'svg',height:500,width:1400});
                    }
                )
            }
        ); */
    }

    function multiBarChartGenerator(chart_obj) {
        nv.addGraph(function() {
            this.chart = nv.models.multiBarChart()
                        // .transitionDuration(350)
                        // .reduceXTicks(true)   //If 'false', every single x-axis tick label will be rendered.
                        // .rotateLabels(0)      //Angle to rotate x-axis labels.
                        // .showControls(true)   //Allow user to switch between 'Grouped' and 'Stacked' mode.
                        // .groupSpacing(0.1)    //Distance between each group of bars.
                ;

            this.chart.xAxis
                .axisLabel(chart_obj.x_axis_label)
                .tickFormat(d3.format(',f'));

            this.chart.yAxis
                .tickFormat(d3.format(',.1f'));


            /* Done setting the chart up? Time to render it!*/
            var myData = new Array();   //You need data...
            $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
                if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
//                            console.log($(this).val())
                    console.log(chart_obj)
                    myData.push(chart_obj.data[$(this).val()]);
//                            console.log(chart_obj)
                }
            });

            $('#' + chart_obj.chart_id + ' svg').html('');

            // Select the <svg> element you want to render the chart in.
            d3.select('#' + chart_obj.chart_id + ' svg')
                    .datum(myData)         //Populate the <svg> element with chart data...
                    .call(this.chart);          //Finally, render the chart!

            // Update the chart when window resizes.
            nv.utils.windowResize(function() { this.chart.update() });

            return this.chart;
        });
    }

    function lineChartGenerator(chart_obj) {
        nv.addGraph(function() {
            this.chart = nv.models.lineChart();
//                        .margin({left: 100})  //Adjust chart margins to give the x-axis some breathing room.
//                        .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!
//                        .transitionDuration(350)  //how fast do you want the lines to transition?
//                        .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
//                        .showYAxis(true)        //Show the y-axis
//                        .showXAxis(true)        //Show the x-axis


            this.chart.xAxis     //Chart x-axis settings
                    .axisLabel(chart_obj.x_axis_label)
                    .tickFormat(d3.format(',r'));

            this.chart.yAxis     //Chart y-axis settings
                    .tickFormat(d3.format('.02f'));

            /* Done setting the chart up? Time to render it!*/
            var myData = new Array();   //You need data...
            $("#" + chart_obj.chart_id + '_GraphWrapper ul :checked').each(function() {
                if($(this).val() != "ALL" && !$(this).hasClass('NoGraph')) {
//                            console.log($(this).val())
                    console.log(chart_obj)
                        myData.push(chart_obj.data[$(this).val()]);
//                            console.log(chart_obj)
                }
            });

            $('#' + chart_obj.chart_id + ' svg').html('');

            // Select the <svg> element you want to render the chart in.
            d3.select('#' + chart_obj.chart_id + ' svg')
                    .datum(myData)         //Populate the <svg> element with chart data...
                    .call(this.chart);          //Finally, render the chart!
            // Update the chart when window resizes.
            nv.utils.windowResize(function() { this.chart.update() });
            return this.chart;
        });
    }


    var {{ nv_chart_id }}_initialized = false;

    var SetupGraphs_{{ nv_chart_id }} = function() {
        if(!{{ nv_chart_id }}_initialized) {
            {{ nv_chart_id }}_initialized = true;

            // If not ODRNVGraph - load class
            odr_nv_{{ nv_chart_id }} = new ODRNVGraph();

            // Set the chart id
            odr_nv_{{ nv_chart_id }}.chart_id = '{{ nv_chart_id }}';

            // Get all Data
            {% for drcid, file in nv_files %}
            var file = '{{ file }}';
            if(file != "") {
                {% for filedrcid, filename in nv_filenames %}
                    {% for mydrcid, pivot in nv_pivot %}
                        {% for index, current_drcid in current_drcids %}
                            {% if mydrcid == drcid and filedrcid == drcid and current_drcid == drcid %}
                                console.log('made it in here===============================');
                                console.log('pivot, mydrcid' + '{{ pivot }}' +', ' + '{{ mydrcid }}');
                                console.log('index, current_drcid {{ index }} {{ current_drcid }}');
                                console.log('filename, filedrcid {{ filename }} {{ filedrcid }}');
                                odr_nv_{{ nv_chart_id }}.data[{{ drcid }}] = ODRGetGraphData(file, '{{ line_colors[loop.index0] }}', '{{ pivot }}', '{{ filename }}');
                            {% endif %}
                        {% endfor %}
                    {% endfor %}
                {% endfor %}
            }
            {% endfor %}


            odr_nv_{{ nv_chart_id }}.x_axis_label = '{{ plugin_options.x_axis_caption }}';
            odr_nv_{{ nv_chart_id }}.y_axis_label = '{{ plugin_options.y_axis_caption }}';

            // Plot selected graphs
            // Get checked DRC IDs
            odr_nv_{{ nv_chart_id }}.GraphData(odr_nv_{{ nv_chart_id }});


            // Set CheckAll Handler
            $('#{{ nv_chart_id }}_GraphWrapper input[name="checkall"]').unbind('click');
            $('#{{ nv_chart_id }}_GraphWrapper input[name="checkall"]').click(function() {
                var checked = this.checked;
                $(this).closest('ul').find('li.ODRData input[type=checkbox]').each(function() {
                    if(!checked) {
                        $(this).attr('checked','checked');
                    }
                    else {
                        $(this).removeAttr('checked');
                    }
                });

                // Update Graph Accordingly
                ODRMultiSetSelected_{{ unique_id }}(this);
            });
            // Set handler to graph on select change

            var height = $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.FieldArea:first').height();
            var width = $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.FieldArea:first').width();
            var html = "<div class='ODRGraphWarning' style='min-height: 30px; width: " + width + "px;'><h2 style='margin-left: auto; margin-right:auto;'>To view files and data, please select a single data set.</h2></div>";
            $('#{{ nv_chart_id }}_GraphWrapper').parent().children('.FieldArea:first').before(html);
            {#$('#{{ nv_chart_id }}_GraphWrapper').parent().children('.FieldArea').show();#}
            {#$('#{{ nv_chart_id }}_GraphWrapper').show();#}
            {#$('#{{ nv_chart_id }}').show();#}
            $("#{{ nv_chart_id }}_GraphWrapper").parent().show();
            window['SetupGraphs_{{ nv_chart_id }}']();
        }
    }

</script>

{% endspaceless %}